{"version":3,"sources":["../../src/client/types.ts","../../src/version.ts","../../src/types/index.ts","../../src/client/core.ts","../../src/utils/const.ts","../../src/client/get.ts","../../src/client/post.ts","../../src/core/accountAddress.ts","../../src/bcs/consts.ts","../../src/core/hex.ts","../../src/core/common.ts","../../src/bcs/serializer.ts","../../src/bcs/deserializer.ts","../../src/bcs/serializable/fixedBytes.ts","../../src/bcs/serializable/entryFunctionBytes.ts","../../src/bcs/serializable/movePrimitives.ts","../../src/bcs/serializable/moveStructs.ts","../../src/core/crypto/ed25519.ts","../../src/core/authenticationKey.ts","../../src/core/crypto/hdKey.ts","../../src/core/crypto/publicKey.ts","../../src/core/crypto/signature.ts","../../src/core/crypto/multiEd25519.ts","../../src/core/crypto/secp256k1.ts","../../src/core/crypto/singleKey.ts","../../src/core/crypto/multiKey.ts","../../src/transactions/authenticator/account.ts","../../src/core/account/Ed25519Account.ts","../../src/core/account/SingleKeyAccount.ts","../../src/core/account/Account.ts","../../src/types/generated/queries.ts","../../src/internal/general.ts","../../src/utils/memoize.ts","../../src/internal/account.ts","../../src/utils/helpers.ts","../../src/internal/transaction.ts","../../src/api/utils.ts","../../src/api/account.ts","../../src/api/aptosConfig.ts","../../src/utils/apiEndpoints.ts","../../src/transactions/instances/rotationProofChallenge.ts","../../src/transactions/transactionBuilder/transactionBuilder.ts","../../src/transactions/authenticator/transaction.ts","../../src/transactions/instances/chainId.ts","../../src/transactions/instances/identifier.ts","../../src/transactions/instances/moduleId.ts","../../src/transactions/typeTag/index.ts","../../src/transactions/instances/transactionPayload.ts","../../src/transactions/instances/rawTransaction.ts","../../src/transactions/instances/signedTransaction.ts","../../src/transactions/typeTag/parser.ts","../../src/transactions/transactionBuilder/helpers.ts","../../src/transactions/transactionBuilder/remoteAbi.ts","../../src/internal/transactionSubmission.ts","../../src/internal/coin.ts","../../src/api/coin.ts","../../src/internal/digitalAsset.ts","../../src/api/digitalAsset.ts","../../src/internal/event.ts","../../src/api/event.ts","../../src/internal/faucet.ts","../../src/api/faucet.ts","../../src/internal/fungibleAsset.ts","../../src/api/fungibleAsset.ts","../../src/api/general.ts","../../src/internal/ans.ts","../../src/api/ans.ts","../../src/internal/staking.ts","../../src/api/staking.ts","../../src/api/transactionSubmission/build.ts","../../src/api/transactionSubmission/helpers.ts","../../src/api/transactionSubmission/simulate.ts","../../src/api/transactionSubmission/submit.ts","../../src/api/transactionSubmission/management.ts","../../src/transactions/management/accountSequenceNumber.ts","../../src/transactions/management/transactionWorker.ts","../../src/transactions/management/asyncQueue.ts","../../src/api/transaction.ts","../../src/api/aptos.ts"],"names":["AptosApiError","request","response","message","VERSION","MimeType","TypeTagVariants","ScriptTransactionArgumentVariants","TransactionPayloadVariants","TransactionVariants","TransactionAuthenticatorVariant","AccountAuthenticatorVariant","AnyPublicKeyVariant","AnySignatureVariant","TransactionResponseType","isPendingTransactionResponse","isUserTransactionResponse","isGenesisTransactionResponse","isBlockMetadataTransactionResponse","isStateCheckpointTransactionResponse","isValidatorTransactionResponse","isEd25519Signature","signature","isSecp256k1Signature","isMultiAgentSignature","isFeePayerSignature","isMultiEd25519Signature","MoveFunctionVisibility","MoveAbility","RoleType","SigningScheme","SigningSchemeInput","DeriveScheme","errors","options","client","url","method","body","contentType","params","overrides","headers","aptosRequest","aptosConfig","path","fullUrl","result","indexerResponse","errorMessage","AptosApiType","DEFAULT_MAX_GAS_AMOUNT","DEFAULT_TXN_EXP_SEC_FROM_NOW","DEFAULT_TXN_TIMEOUT_SEC","APTOS_COIN","RAW_TRANSACTION_SALT","RAW_TRANSACTION_WITH_DATA_SALT","ProcessorType","get","acceptType","originMethod","type","getAptosFullNode","paginateWithCursor","out","cursor","requestParams","post","postAptosFullNode","postAptosIndexer","postAptosFaucet","bytesToHex","hexToBytes","MAX_U8_NUMBER","MAX_U16_NUMBER","MAX_U32_NUMBER","MAX_U64_BIG_INT","MAX_U128_BIG_INT","MAX_U256_BIG_INT","ParsingError","invalidReason","HexInvalidReason","Hex","_Hex","data","str","input","error","hexInput","other","value","index","Serializable","serializer","Serializer","bcsBytes","length","bytes","newBuffer","values","fn","bytesLength","dv","textEncoder","ensureBoolean","byteValue","low","high","val","valueArray","item","__decorateClass","checkNumberRange","outOfRangeErrorMessage","min","max","validateNumberInRange","minValue","maxValue","valueBigInt","target","propertyKey","descriptor","childFunction","AddressInvalidReason","_AccountAddress","byte","hex","deserializer","address","parsedInput","addressBytes","args","AccountAddress","Deserializer","len","bool","shift","cls","vector","i","FixedBytes","_FixedBytes","EntryFunctionBytes","_EntryFunctionBytes","fixedBytes","Bool","_Bool","U8","_U8","U16","_U16","U32","_U32","U64","_U64","U128","_U128","U256","_U256","MoveVector","_MoveVector","numbers","v","MoveString","_MoveString","fixedStringBytes","MoveOption","_MoveOption","nacl","sha3Hash","_AuthenticationKey","scheme","inputBytes","hashInput","hash","hashDigest","publicKey","AuthenticationKey","hmac","sha512","bip39","APTOS_HARDENED_REGEX","APTOS_BIP44_REGEX","KeyType","HARDENED_OFFSET","isValidBIP44Path","isValidHardenedPath","deriveKey","hashSeed","digest","CKDPriv","key","chainCode","buffer","indexBytes","zero","removeApostrophes","splitPath","mnemonicToSeed","mnemonic","normalizedMnemonic","part","PublicKey","AccountPublicKey","Signature","_Ed25519PublicKey","Ed25519Signature","messageBytes","signatureBytes","publicKeyBytes","Ed25519PublicKey","_Ed25519PrivateKey","privateKeyHex","keyPair","mnemonics","seed","offset","segments","el","privateKey","parentKeys","segment","Ed25519PrivateKey","_Ed25519Signature","_MultiEd25519PublicKey","publicKeys","threshold","MultiEd25519Signature","indices","j","k","keys","begin","MultiEd25519PublicKey","_MultiEd25519Signature","signatures","bitmap","bits","firstBitInByte","dupCheckSet","bit","byteOffset","sha3_256","secp256k1","HDKey","_Secp256k1PublicKey","Secp256k1Signature","messageSha3Bytes","Secp256k1PublicKey","_Secp256k1PrivateKey","messageHashBytes","Secp256k1PrivateKey","_Secp256k1Signature","AnyPublicKey","_AnyPublicKey","AnySignature","variantIndex","_AnySignature","bitCount","n","MultiKey","_MultiKey","signaturesRequired","idx","_MultiKeySignature","nSignatures","acc","MultiKeySignature","AccountAuthenticator","AccountAuthenticatorEd25519","AccountAuthenticatorMultiEd25519","AccountAuthenticatorSingleKey","AccountAuthenticatorMultiKey","_AccountAuthenticatorEd25519","public_key","_AccountAuthenticatorMultiEd25519","_AccountAuthenticatorSingleKey","_AccountAuthenticatorMultiKey","public_keys","signatures_bitmap","Ed25519Account","_Ed25519Account","SingleKeyAccount","_SingleKeyAccount","innerSignature","Account","legacy","TokenActivitiesFieldsFragmentDoc","AnsTokenFragmentFragmentDoc","CurrentTokenOwnershipFieldsFragmentDoc","GetAccountCoinsCount","GetAccountCoinsData","GetAccountCollectionsWithOwnedTokens","GetAccountOwnedObjects","GetAccountOwnedTokens","GetAccountOwnedTokensByTokenData","GetAccountOwnedTokensFromCollection","GetAccountTokensCount","GetAccountTransactionsCount","GetChainTopUserTransactions","GetCollectionData","GetCurrentFungibleAssetBalances","GetDelegatedStakingActivities","GetEvents","GetFungibleAssetActivities","GetFungibleAssetMetadata","GetNames","GetNumberOfDelegators","GetProcessorStatus","GetTokenActivity","GetCurrentTokenOwnership","GetTokenData","getLedgerInfo","getBlockByVersion","ledgerVersion","getBlockByHeight","blockHeight","getTableItem","handle","view","payload","getChainTopUserTransactions","limit","queryIndexer","query","getProcessorStatuses","getIndexerLastSuccessVersion","getProcessorStatus","processorType","whereCondition","cache","memoizeAsync","func","ttlMs","timestamp","getInfo","accountAddress","getModules","getModule","getModuleInner","moduleName","getTransactions","getResources","getResource","resourceType","lookupOriginalAccountAddress","authenticationKey","resource","authKeyAddress","originalAddress","err","getAccountTokensCount","getAccountOwnedTokens","graphqlQuery","getAccountOwnedTokensFromCollectionAddress","collectionAddress","ownerAddress","collAddress","getAccountCollectionsWithOwnedTokens","getAccountTransactionsCount","getAccountCoinAmount","coinType","getAccountCoinsData","getAccountCoinsCount","getAccountOwnedObjects","deriveAccountFromPrivateKey","singleSenderTransactionAuthenticatorAuthKey","isAccountExist","legacyAuthKey","authKey","sleep","timeMs","resolve","getGasPriceEstimation","getTransactionByVersion","getTransactionByHash","transactionHash","isTransactionPending","e","waitForTransaction","timeoutSecs","checkSuccess","isPending","timeElapsed","lastTxn","lastError","backoffIntervalMs","backoffMultiplier","WaitForTransactionError","FailedTransactionError","waitForIndexer","minimumLedgerVersion","timeoutMilliseconds","startTime","indexerVersion","lastSubmittedTransaction","transaction","waitForIndexerOnVersion","config","aptosClient","NetworkToIndexerAPI","NetworkToNodeAPI","NetworkToFaucetAPI","Network","NetworkToChainId","NetworkToNetworkName","AptosConfig","settings","apiType","RotationProofChallenge","TransactionAuthenticator","TransactionAuthenticatorEd25519","TransactionAuthenticatorMultiEd25519","TransactionAuthenticatorMultiAgent","TransactionAuthenticatorFeePayer","TransactionAuthenticatorSingleSender","_TransactionAuthenticatorEd25519","_TransactionAuthenticatorMultiEd25519","_TransactionAuthenticatorMultiAgent","sender","secondary_signer_addresses","secondary_signers","_TransactionAuthenticatorFeePayer","fee_payer","authenticator","_TransactionAuthenticatorSingleSender","ChainId","_ChainId","chainId","Identifier","_Identifier","identifier","ModuleId","_ModuleId","name","moduleId","parts","TypeTag","TypeTagBool","TypeTagU8","TypeTagU64","TypeTagU128","TypeTagAddress","TypeTagSigner","TypeTagVector","TypeTagStruct","TypeTagU16","TypeTagU32","TypeTagU256","TypeTagGeneric","_TypeTagBool","_deserializer","_TypeTagU8","_TypeTagU16","_TypeTagU32","_TypeTagU64","_TypeTagU128","_TypeTagU256","_TypeTagAddress","_TypeTagSigner","TypeTagReference","_TypeTagReference","_TypeTagGeneric","_TypeTagVector","_TypeTagStruct","typePredicate","typeArg","StructTag","structName","_StructTag","module_name","type_args","typeArgs","aptosCoinStructTag","stringStructTag","optionStructTag","objectStructTag","deserializeFromScriptArgument","TransactionPayload","TransactionPayloadScript","TransactionPayloadEntryFunction","TransactionPayloadMultiSig","_TransactionPayloadScript","script","Script","_TransactionPayloadEntryFunction","entryFunction","EntryFunction","_TransactionPayloadMultiSig","multiSig","MultiSig","_EntryFunction","function_name","module_id","fixedBytesLength","_Script","bytecode","scriptArgument","_MultiSig","multisig_address","transaction_payload","payloadPresent","MultiSigTransactionPayload","_MultiSigTransactionPayload","RawTransaction","_RawTransaction","sequence_number","max_gas_amount","gas_unit_price","expiration_timestamp_secs","chain_id","RawTransactionWithData","MultiAgentRawTransaction","FeePayerRawTransaction","_MultiAgentRawTransaction","raw_txn","rawTxn","secondarySignerAddresses","_FeePayerRawTransaction","fee_payer_address","feePayerAddress","SignedTransaction","_SignedTransaction","isValidIdentifier","isValidWhitespaceCharacter","char","isGeneric","consumeWhitespace","tagStr","pos","innerChar","TypeTagParserErrorType","TypeTagParserError","typeTagStr","parseTypeTag","typeStr","allowGenerics","saved","innerTypes","curTypes","cur","currentStr","expectedTypes","newType","parseTypeTagInner","savedPop","savedStr","savedTypes","savedExpectedTypes","parsedTypeTag","nextChar","types","structParts","isBool","arg","isString","isNumber","isLargeNumber","isNull","isEncodedEntryFunctionArgument","isBcsBool","isBcsU8","isBcsU16","isBcsU32","isBcsU64","isBcsU128","isBcsU256","isBcsAddress","isBcsString","isBcsFixedBytes","isScriptDataInput","throwTypeMismatch","expectedType","position","findFirstNonSignerArg","functionAbi","param","getFunctionParts","functionArg","funcNameParts","moduleAddress","functionName","TEXT_ENCODER","standardizeTypeTags","typeArguments","fetchEntryFunctionAbi","first","convertArgument","genericTypeParams","checkOrConvertArgument","checkType","parseArg","genericIndex","generateTransactionPayload","generateTransactionPayloadScript","generateTransactionPayloadWithABI","functionArguments","entryFunctionPayload","multisigAddress","generateRawTransaction","getChainId","getGasUnitPrice","gasEstimate","getSequenceNumber","sequenceNumber","seqNumber","maxGasAmount","gasUnitPrice","expireTimestamp","buildTransaction","signers","signer","generateSignedTransactionForSimulation","signerPublicKey","secondarySignersPublicKeys","feePayerPublicKey","accountAuthenticator","getAuthenticatorForSimulation","transactionToSign","secondaryAccountAuthenticators","feePayerAuthenticator","transactionAuthenticator","sign","generateSigningMessage","generateSignedTransaction","senderAuthenticator","additionalSignersAuthenticators","transactionToSubmit","deriveTransactionType","generateMultiSignersSignedTransaction","txAuthenticatorFeePayer","multiAgentAuthenticator","prefix","mergedArray","generateTransaction","buildTransactionPayload","buildRawTransaction","generateTransactionPayloadData","isFeePayerTransactionInput","isMultiAgentTransactionInput","getSigningMessage","signTransaction","simulateTransaction","signedTransaction","submitTransaction","signAndSubmitTransaction","packagePublishAbi","publicPackageTransaction","account","metadataBytes","moduleBytecode","totalByteCode","rotateAuthKeyAbi","rotateAuthKey","fromAccount","toNewPrivateKey","accountInfo","newAccount","challengeHex","proofSignedByCurrentPrivateKey","proofSignedByNewPrivateKey","coinTransferAbi","transferCoinTransaction","recipient","amount","Coin","PropertyTypeMap","defaultDigitalAssetType","getDigitalAssetData","digitalAssetAddress","getCurrentDigitalAssetOwnership","getOwnedDigitalAssets","getDigitalAssetActivity","createCollectionAbi","createCollectionTransaction","creator","getCollectionData","creatorAddress","collectionName","getCollectionDataByCollectionId","collectionId","getCollectionId","mintDigitalAssetAbi","mintDigitalAssetTransaction","collection","description","uri","propertyKeys","propertyTypes","propertyValues","convertedPropertyType","getPropertyValueRaw","transferDigitalAssetAbi","transferDigitalAssetTransaction","digitalAssetType","mintSoulBoundAbi","mintSoulBoundTransaction","burnDigitalAssetAbi","burnDigitalAssetTransaction","freezeDigitalAssetAbi","freezeDigitalAssetTransferTransaction","unfreezeDigitalAssetAbi","unfreezeDigitalAssetTransferTransaction","setDigitalAssetDescriptionAbi","setDigitalAssetDescriptionTransaction","setDigitalAssetNameAbi","setDigitalAssetNameTransaction","setDigitalAssetURIAbi","setDigitalAssetURITransaction","addDigitalAssetPropertyAbi","addDigitalAssetPropertyTransaction","propertyType","propertyValue","getSinglePropertyValueRaw","removeDigitalAssetPropertyAbi","removeDigitalAssetPropertyTransaction","updateDigitalAssetPropertyAbi","updateDigitalAssetPropertyTransaction","addDigitalAssetTypedPropertyAbi","addDigitalAssetTypedPropertyTransaction","updateDigitalAssetTypedPropertyAbi","updateDigitalAssetTypedPropertyTransaction","results","typ","typeTag","DigitalAsset","MAX_EVENT_TYPE_LENGTH","checkEventTypeLength","eventType","getModuleEventsByEventType","customOptions","getEvents","getAccountEventsByCreationNumber","creationNumber","getAccountEventsByEventType","Event","fundAccount","timeout","txnHash","res","Faucet","fundTxn","getFungibleAssetMetadata","getFungibleAssetActivities","getCurrentFungibleAssetBalances","faTransferAbi","transferFungibleAsset","fungibleAssetMetadataAddress","FungibleAsset","General","VALIDATION_RULES_DESCRIPTION","isValidANSSegment","fragment","isValidANSName","second","rest","LOCAL_ANS_ACCOUNT_ADDRESS","NetworkToAnsContract","getRouterAddress","Some","None","Option","unwrapOption","option","getOwnerAddress","routerAddress","domainName","subdomainName","owner","registerName","expiration","targetAddress","toAddress","transferable","hasSubdomainPolicy","years","registrationDuration","tldExpiration","getExpiration","expirationDateInMillisecondsSinceEpoch","getPrimaryName","setPrimaryName","getTargetAddress","setTargetAddress","getName","sanitizeANSName","getAccountNames","expirationDate","getANSExpirationDate","getAccountDomains","getAccountSubdomains","getDomainSubdomains","domain","gracePeriodInSeconds","gracePeriodInDays","now","renewDomain","renewalDuration","ANS","getNumberOfDelegators","poolAddress","getNumberOfDelegatorsForAllPools","getDelegatedStakingActivities","delegatorAddress","Staking","Build","ValidateFeePayerDataOnSubmission","originalMethod","methodArgs","ValidateFeePayerDataOnSimulation","Simulate","Submit","EventEmitter","AccountSequenceNumber","maxWaitTime","maximumInFlight","sleepTime","nextNumber","AsyncQueue","reject","AsyncQueueCancelledError","promiseFulfilledStatus","TransactionWorkerEventsEnum","TransactionWorker","pendingTransaction","awaitingTransactions","sequenceNumbers","sentTransactions","sentTransaction","waitFor","executedTransaction","transactionData","TransactionManagement","d","Transaction","Aptos","applyMixin","targetClass","baseClass","baseClassProp","propertyName","propertyDescriptor"],"mappings":"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","sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosRequest } from \"../types\";\n\n/**\n * The API response type\n *\n * @param status - the response status. i.e. 200\n * @param statusText - the response message\n * @param data the response data\n * @param url the url the request was made to\n * @param headers the response headers\n * @param config (optional) - the request object\n * @param request (optional) - the request object\n */\nexport interface AptosResponse<Req, Res> {\n  status: number;\n  statusText: string;\n  data: Res;\n  url: string;\n  headers: any;\n  config?: any;\n  request?: Req;\n}\n\n/**\n * The type returned from an API error\n *\n * @param name - the error name \"AptosApiError\"\n * @param url the url the request was made to\n * @param status - the response status. i.e. 400\n * @param statusText - the response message\n * @param data the response data\n * @param request - the AptosRequest\n */\nexport class AptosApiError extends Error {\n  readonly url: string;\n\n  readonly status: number;\n\n  readonly statusText: string;\n\n  readonly data: any;\n\n  readonly request: AptosRequest;\n\n  constructor(request: AptosRequest, response: AptosResponse<any, any>, message: string) {\n    super(message);\n\n    this.name = \"AptosApiError\";\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.data = response.data;\n    this.request = request;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * The current version of the SDK\n *\n * hardcoded for now, we would want to have it injected dynamically\n */\nexport const VERSION = \"1.10.0\";\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Network } from \"../utils/apiEndpoints\";\nimport { OrderBy, TokenStandard } from \"./indexer\";\n\nexport * from \"./indexer\";\n\nexport enum MimeType {\n  /**\n   * JSON representation, used for transaction submission and accept type JSON output\n   */\n  JSON = \"application/json\",\n  /**\n   * BCS representation, used for accept type BCS output\n   */\n  BCS = \"application/x-bcs\",\n  /**\n   * BCS representation, used for transaction submission in BCS input\n   */\n  BCS_SIGNED_TRANSACTION = \"application/x.aptos.signed_transaction+bcs\",\n}\n\n/**\n * Hex data as input to a function\n */\nexport type HexInput = string | Uint8Array;\n\n/**\n * TypeTag enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/third_party/move/move-core/types/src/language_storage.rs#L27}\n */\nexport enum TypeTagVariants {\n  Bool = 0,\n  U8 = 1,\n  U64 = 2,\n  U128 = 3,\n  Address = 4,\n  Signer = 5,\n  Vector = 6,\n  Struct = 7,\n  U16 = 8,\n  U32 = 9,\n  U256 = 10,\n  Reference = 254, // This is specifically a placeholder and does not represent a real type\n  Generic = 255, // This is specifically a placeholder and does not represent a real type\n}\n\n/**\n * Script transaction arguments enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/third_party/move/move-core/types/src/transaction_argument.rs#L11}\n */\nexport enum ScriptTransactionArgumentVariants {\n  U8 = 0,\n  U64 = 1,\n  U128 = 2,\n  Address = 3,\n  U8Vector = 4,\n  Bool = 5,\n  U16 = 6,\n  U32 = 7,\n  U256 = 8,\n}\n\n/**\n * Transaction payload enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/mod.rs#L478}\n */\nexport enum TransactionPayloadVariants {\n  Script = 0,\n  EntryFunction = 2,\n  Multisig = 3,\n}\n\n/**\n * Transaction variants enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/mod.rs#L440}\n */\nexport enum TransactionVariants {\n  MultiAgentTransaction = 0,\n  FeePayerTransaction = 1,\n}\n\n/**\n * Transaction Authenticator enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs#L44}\n */\nexport enum TransactionAuthenticatorVariant {\n  Ed25519 = 0,\n  MultiEd25519 = 1,\n  MultiAgent = 2,\n  FeePayer = 3,\n  SingleSender = 4,\n}\n\n/**\n * Transaction Authenticator enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs#L414}\n */\nexport enum AccountAuthenticatorVariant {\n  Ed25519 = 0,\n  MultiEd25519 = 1,\n  SingleKey = 2,\n  MultiKey = 3,\n}\n\nexport enum AnyPublicKeyVariant {\n  Ed25519 = 0,\n  Secp256k1 = 1,\n}\n\nexport enum AnySignatureVariant {\n  Ed25519 = 0,\n  Secp256k1 = 1,\n}\n\n/**\n * BCS types\n */\nexport type Uint8 = number;\nexport type Uint16 = number;\nexport type Uint32 = number;\nexport type Uint64 = bigint;\nexport type Uint128 = bigint;\nexport type Uint256 = bigint;\nexport type AnyNumber = number | bigint;\n\n/**\n * Set of configuration options that can be provided when initializing the SDK.\n * The purpose of these options is to configure various aspects of the SDK's\n * behavior and interaction with the Aptos network\n */\nexport type AptosSettings = {\n  readonly network?: Network;\n\n  readonly fullnode?: string;\n\n  readonly faucet?: string;\n\n  readonly indexer?: string;\n\n  readonly clientConfig?: ClientConfig;\n\n  readonly client?: Client;\n};\n\n/**\n *\n * Controls the number of results that are returned and the starting position of those results.\n * @param offset parameter specifies the starting position of the query result within the set of data. Default is 0.\n * @param limit specifies the maximum number of items or records to return in a query result. Default is 25.\n */\nexport interface PaginationArgs {\n  offset?: AnyNumber;\n  limit?: number;\n}\n\nexport interface TokenStandardArg {\n  tokenStandard?: TokenStandard;\n}\n\nexport interface OrderByArg<T extends {}> {\n  orderBy?: OrderBy<T>;\n}\n\nexport interface WhereArg<T extends {}> {\n  where?: T;\n}\n\n/**\n * QUERY TYPES\n */\n\n/**\n * A configuration object we can pass with the request to the server.\n *\n * @param AUTH_TOKEN - an auth token to send with a faucet request\n * @param API_KEY - api key generated from developer portal {@link https://developers.aptoslabs.com/manage/api-keys}}\n * @param HEADERS - extra headers we want to send with the request\n * @param WITH_CREDENTIALS - whether to carry cookies. By default, it is set to true and cookies will be sent\n */\nexport type ClientConfig = {\n  AUTH_TOKEN?: string;\n  API_KEY?: string;\n  HEADERS?: Record<string, string | number | boolean>;\n  WITH_CREDENTIALS?: boolean;\n};\n\nexport interface ClientRequest<Req> {\n  url: string;\n  method: \"GET\" | \"POST\";\n  body?: Req;\n  contentType?: string;\n  params?: any;\n  overrides?: ClientConfig;\n  headers?: Record<string, any>;\n}\n\nexport interface ClientResponse<Res> {\n  status: number;\n  statusText: string;\n  data: Res;\n  config?: any;\n  request?: any;\n  response?: any;\n  headers?: any;\n}\n\nexport interface Client {\n  provider<Req, Res>(requestOptions: ClientRequest<Req>): Promise<ClientResponse<Res>>;\n}\n\n/**\n * The API request type\n *\n * @param url - the url to make the request to, i.e https://fullnode.devnet.aptoslabs.com/v1\n * @param method - the request method \"GET\" | \"POST\"\n * @param endpoint (optional) - the endpoint to make the request to, i.e transactions\n * @param body (optional) - the body of the request\n * @param contentType (optional) - the content type to set the `content-type` header to,\n * by default is set to `application/json`\n * @param params (optional) - query params to add to the request\n * @param originMethod (optional) - the local method the request came from\n * @param overrides (optional) - a `ClientConfig` object type to override request data\n */\nexport type AptosRequest = {\n  url: string;\n  method: \"GET\" | \"POST\";\n  path?: string;\n  body?: any;\n  contentType?: string;\n  acceptType?: string;\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  originMethod?: string;\n  overrides?: ClientConfig;\n};\n\n/**\n * Specifies ledger version of transactions. By default latest version will be used\n */\nexport type LedgerVersionArg = {\n  ledgerVersion?: AnyNumber;\n};\n\n/**\n * RESPONSE TYPES\n */\n\n/**\n * Type holding the outputs of the estimate gas API\n */\nexport type GasEstimation = {\n  /**\n   * The deprioritized estimate for the gas unit price\n   */\n  deprioritized_gas_estimate?: number;\n  /**\n   * The current estimate for the gas unit price\n   */\n  gas_estimate: number;\n  /**\n   * The prioritized estimate for the gas unit price\n   */\n  prioritized_gas_estimate?: number;\n};\n\nexport type MoveResource = {\n  type: MoveStructId;\n  data: {};\n};\n\nexport type AccountData = {\n  sequence_number: string;\n  authentication_key: string;\n};\n\nexport type MoveModuleBytecode = {\n  bytecode: string;\n  abi?: MoveModule;\n};\n\n/**\n * TRANSACTION TYPES\n */\n\nexport enum TransactionResponseType {\n  Pending = \"pending_transaction\",\n  User = \"user_transaction\",\n  Genesis = \"genesis_transaction\",\n  BlockMetadata = \"block_metadata_transaction\",\n  StateCheckpoint = \"state_checkpoint_transaction\",\n  Validator = \"validator_transaction\",\n}\n\nexport type TransactionResponse = PendingTransactionResponse | CommittedTransactionResponse;\nexport type CommittedTransactionResponse =\n  | UserTransactionResponse\n  | GenesisTransactionResponse\n  | BlockMetadataTransactionResponse\n  | StateCheckpointTransactionResponse\n  | ValidatorTransactionResponse;\n\nexport function isPendingTransactionResponse(response: TransactionResponse): response is PendingTransactionResponse {\n  return response.type === TransactionResponseType.Pending;\n}\n\nexport function isUserTransactionResponse(response: TransactionResponse): response is UserTransactionResponse {\n  return response.type === TransactionResponseType.User;\n}\n\nexport function isGenesisTransactionResponse(response: TransactionResponse): response is GenesisTransactionResponse {\n  return response.type === TransactionResponseType.Genesis;\n}\n\nexport function isBlockMetadataTransactionResponse(\n  response: TransactionResponse,\n): response is BlockMetadataTransactionResponse {\n  return response.type === TransactionResponseType.BlockMetadata;\n}\n\nexport function isStateCheckpointTransactionResponse(\n  response: TransactionResponse,\n): response is StateCheckpointTransactionResponse {\n  return response.type === TransactionResponseType.StateCheckpoint;\n}\n\nexport function isValidatorTransactionResponse(\n  response: TransactionResponse,\n): response is ValidatorTransactionResponse {\n  return response.type === TransactionResponseType.Validator;\n}\n\nexport type PendingTransactionResponse = {\n  type: TransactionResponseType.Pending;\n  hash: string;\n  sender: string;\n  sequence_number: string;\n  max_gas_amount: string;\n  gas_unit_price: string;\n  expiration_timestamp_secs: string;\n  payload: TransactionPayloadResponse;\n  signature?: TransactionSignature;\n};\n\nexport type UserTransactionResponse = {\n  type: TransactionResponseType.User;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash: string | null;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  sender: string;\n  sequence_number: string;\n  max_gas_amount: string;\n  gas_unit_price: string;\n  expiration_timestamp_secs: string;\n  payload: TransactionPayloadResponse;\n  signature?: TransactionSignature;\n  /**\n   * Events generated by the transaction\n   */\n  events: Array<Event>;\n  timestamp: string;\n};\n\nexport type GenesisTransactionResponse = {\n  type: TransactionResponseType.Genesis;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash?: string;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  payload: GenesisPayload;\n  /**\n   * Events emitted during genesis\n   */\n  events: Array<Event>;\n};\n\nexport type BlockMetadataTransactionResponse = {\n  type: TransactionResponseType.BlockMetadata;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash: string | null;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  id: string;\n  epoch: string;\n  round: string;\n  /**\n   * The events emitted at the block creation\n   */\n  events: Array<Event>;\n  /**\n   * Previous block votes\n   */\n  previous_block_votes_bitvec: Array<number>;\n  proposer: string;\n  /**\n   * The indices of the proposers who failed to propose\n   */\n  failed_proposer_indices: Array<number>;\n  timestamp: string;\n};\n\nexport type StateCheckpointTransactionResponse = {\n  type: TransactionResponseType.StateCheckpoint;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash: string | null;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  timestamp: string;\n};\n\nexport type ValidatorTransactionResponse = {\n  type: TransactionResponseType.Validator;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash: string | null;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  /**\n   * The events emitted by the validator transaction\n   */\n  events: Array<Event>;\n  timestamp: string;\n};\n\n/**\n * WRITESET CHANGE TYPES\n */\n\nexport type WriteSetChange =\n  | WriteSetChangeDeleteModule\n  | WriteSetChangeDeleteResource\n  | WriteSetChangeDeleteTableItem\n  | WriteSetChangeWriteModule\n  | WriteSetChangeWriteResource\n  | WriteSetChangeWriteTableItem;\n\nexport type WriteSetChangeDeleteModule = {\n  type: string;\n  address: string;\n  /**\n   * State key hash\n   */\n  state_key_hash: string;\n  module: MoveModuleId;\n};\n\nexport type WriteSetChangeDeleteResource = {\n  type: string;\n  address: string;\n  state_key_hash: string;\n  resource: string;\n};\n\nexport type WriteSetChangeDeleteTableItem = {\n  type: string;\n  state_key_hash: string;\n  handle: string;\n  key: string;\n  data?: DeletedTableData;\n};\n\nexport type WriteSetChangeWriteModule = {\n  type: string;\n  address: string;\n  state_key_hash: string;\n  data: MoveModuleBytecode;\n};\n\nexport type WriteSetChangeWriteResource = {\n  type: string;\n  address: string;\n  state_key_hash: string;\n  data: MoveResource;\n};\n\nexport type WriteSetChangeWriteTableItem = {\n  type: string;\n  state_key_hash: string;\n  handle: string;\n  key: string;\n  value: string;\n  data?: DecodedTableData;\n};\n\nexport type DecodedTableData = {\n  /**\n   * Key of table in JSON\n   */\n  key: any;\n  /**\n   * Type of key\n   */\n  key_type: string;\n  /**\n   * Value of table in JSON\n   */\n  value: any;\n  /**\n   * Type of value\n   */\n  value_type: string;\n};\n\n/**\n * Deleted table data\n */\nexport type DeletedTableData = {\n  /**\n   * Deleted key\n   */\n  key: any;\n  /**\n   * Deleted key type\n   */\n  key_type: string;\n};\n\nexport type TransactionPayloadResponse = EntryFunctionPayloadResponse | ScriptPayloadResponse | MultisigPayloadResponse;\n\nexport type EntryFunctionPayloadResponse = {\n  type: string;\n  function: MoveFunctionId;\n  /**\n   * Type arguments of the function\n   */\n  type_arguments: Array<string>;\n  /**\n   * Arguments of the function\n   */\n  arguments: Array<any>;\n};\n\nexport type ScriptPayloadResponse = {\n  type: string;\n  code: MoveScriptBytecode;\n  /**\n   * Type arguments of the function\n   */\n  type_arguments: Array<string>;\n  /**\n   * Arguments of the function\n   */\n  arguments: Array<any>;\n};\n\nexport type MultisigPayloadResponse = {\n  type: string;\n  multisig_address: string;\n  transaction_payload?: EntryFunctionPayloadResponse;\n};\n\nexport type GenesisPayload = {\n  type: string;\n  write_set: WriteSet;\n};\n\n/**\n * Move script bytecode\n */\nexport type MoveScriptBytecode = {\n  bytecode: string;\n  abi?: MoveFunction;\n};\n\n/**\n * These are the JSON representations of transaction signatures returned from the node API.\n */\nexport type TransactionSignature =\n  | TransactionEd25519Signature\n  | TransactionSecp256k1Signature\n  | TransactionMultiEd25519Signature\n  | TransactionMultiAgentSignature\n  | TransactionFeePayerSignature;\n\nexport function isEd25519Signature(signature: TransactionSignature): signature is TransactionFeePayerSignature {\n  return \"signature\" in signature && signature.signature === \"ed25519_signature\";\n}\n\nexport function isSecp256k1Signature(signature: TransactionSignature): signature is TransactionFeePayerSignature {\n  return \"signature\" in signature && signature.signature === \"secp256k1_ecdsa_signature\";\n}\n\nexport function isMultiAgentSignature(signature: TransactionSignature): signature is TransactionMultiAgentSignature {\n  return signature.type === \"multi_agent_signature\";\n}\n\nexport function isFeePayerSignature(signature: TransactionSignature): signature is TransactionFeePayerSignature {\n  return signature.type === \"fee_payer_signature\";\n}\n\nexport function isMultiEd25519Signature(\n  signature: TransactionSignature,\n): signature is TransactionMultiEd25519Signature {\n  return signature.type === \"multi_ed25519_signature\";\n}\n\nexport type TransactionEd25519Signature = {\n  type: string;\n  public_key: string;\n  signature: \"ed25519_signature\";\n};\n\nexport type TransactionSecp256k1Signature = {\n  type: string;\n  public_key: string;\n  signature: \"secp256k1_ecdsa_signature\";\n};\n\nexport type TransactionMultiEd25519Signature = {\n  type: \"multi_ed25519_signature\";\n  /**\n   * The public keys for the Ed25519 signature\n   */\n  public_keys: Array<string>;\n  /**\n   * Signature associated with the public keys in the same order\n   */\n  signatures: Array<string>;\n  /**\n   * The number of signatures required for a successful transaction\n   */\n  threshold: number;\n  bitmap: string;\n};\n\nexport type TransactionMultiAgentSignature = {\n  type: \"multi_agent_signature\";\n  sender: AccountSignature;\n  /**\n   * The other involved parties' addresses\n   */\n  secondary_signer_addresses: Array<string>;\n  /**\n   * The associated signatures, in the same order as the secondary addresses\n   */\n  secondary_signers: Array<AccountSignature>;\n};\n\nexport type TransactionFeePayerSignature = {\n  type: \"fee_payer_signature\";\n  sender: AccountSignature;\n  /**\n   * The other involved parties' addresses\n   */\n  secondary_signer_addresses: Array<string>;\n  /**\n   * The associated signatures, in the same order as the secondary addresses\n   */\n  secondary_signers: Array<AccountSignature>;\n  fee_payer_address: string;\n  fee_payer_signer: AccountSignature;\n};\n\n/**\n * The union of all single account signatures.\n */\nexport type AccountSignature =\n  | TransactionEd25519Signature\n  | TransactionSecp256k1Signature\n  | TransactionMultiEd25519Signature;\n\nexport type WriteSet = ScriptWriteSet | DirectWriteSet;\n\nexport type ScriptWriteSet = {\n  type: string;\n  execute_as: string;\n  script: ScriptPayloadResponse;\n};\n\nexport type DirectWriteSet = {\n  type: string;\n  changes: Array<WriteSetChange>;\n  events: Array<Event>;\n};\n\nexport type EventGuid = {\n  creation_number: string;\n  account_address: string;\n};\n\nexport type Event = {\n  guid: EventGuid;\n  sequence_number: string;\n  type: string;\n  /**\n   * The JSON representation of the event\n   */\n  data: any;\n};\n\n/**\n * Map of Move types to local TypeScript types\n */\nexport type MoveUint8Type = number;\nexport type MoveUint16Type = number;\nexport type MoveUint32Type = number;\nexport type MoveUint64Type = string;\nexport type MoveUint128Type = string;\nexport type MoveUint256Type = string;\nexport type MoveAddressType = string;\nexport type MoveObjectType = string;\nexport type MoveOptionType = MoveType | null | undefined;\n/**\n * This is the format for a fully qualified struct, resource, or entry function in Move.\n */\nexport type MoveStructId = `${string}::${string}::${string}`;\n// These are the same, unfortunately, it reads really strangely to take a StructId for a Function and there wasn't a\n// good middle ground name.\nexport type MoveFunctionId = MoveStructId;\n\n// TODO: Add support for looking up ABI to add proper typing\nexport type MoveStructType = {};\n\nexport type MoveType =\n  | boolean\n  | string\n  | MoveUint8Type\n  | MoveUint16Type\n  | MoveUint32Type\n  | MoveUint64Type\n  | MoveUint128Type\n  | MoveUint256Type\n  | MoveAddressType\n  | MoveObjectType\n  | MoveStructType\n  | Array<MoveType>;\n\n/**\n * Possible Move values acceptable by move functions (entry, view)\n *\n * Map of a Move value to the corresponding TypeScript value\n *\n * `Bool -> boolean`\n *\n * `u8, u16, u32 -> number`\n *\n * `u64, u128, u256 -> string`\n *\n * `String -> string`\n *\n * `Address -> 0x${string}`\n *\n * `Struct - 0x${string}::${string}::${string}`\n *\n * `Object -> 0x${string}`\n *\n * `Vector -> Array<MoveValue>`\n *\n * `Option -> MoveValue | null | undefined`\n */\nexport type MoveValue =\n  | boolean\n  | string\n  | MoveUint8Type\n  | MoveUint16Type\n  | MoveUint32Type\n  | MoveUint64Type\n  | MoveUint128Type\n  | MoveUint256Type\n  | MoveAddressType\n  | MoveObjectType\n  | MoveStructId\n  | MoveOptionType\n  | Array<MoveValue>;\n\n/**\n * Move module id is a string representation of Move module.\n * Module name is case-sensitive.\n */\nexport type MoveModuleId = `${string}::${string}`;\n\n/**\n * Move function visibility\n */\nexport enum MoveFunctionVisibility {\n  PRIVATE = \"private\",\n  PUBLIC = \"public\",\n  FRIEND = \"friend\",\n}\n\n/**\n * Move function ability\n */\nexport enum MoveAbility {\n  STORE = \"store\",\n  DROP = \"drop\",\n  KEY = \"key\",\n  COPY = \"copy\",\n}\n\n/**\n * Move abilities tied to the generic type param and associated with the function that uses it\n */\nexport type MoveFunctionGenericTypeParam = {\n  constraints: Array<MoveAbility>;\n};\n\n/**\n * Move struct field\n */\nexport type MoveStructField = {\n  name: string;\n  type: string;\n};\n\n/**\n * A Move module\n */\nexport type MoveModule = {\n  address: string;\n  name: string;\n  /**\n   * Friends of the module\n   */\n  friends: Array<MoveModuleId>;\n  /**\n   * Public functions of the module\n   */\n  exposed_functions: Array<MoveFunction>;\n  /**\n   * Structs of the module\n   */\n  structs: Array<MoveStruct>;\n};\n\n/**\n * A move struct\n */\nexport type MoveStruct = {\n  name: string;\n  /**\n   * Whether the struct is a native struct of Move\n   */\n  is_native: boolean;\n  /**\n   * Abilities associated with the struct\n   */\n  abilities: Array<MoveAbility>;\n  /**\n   * Generic types associated with the struct\n   */\n  generic_type_params: Array<MoveFunctionGenericTypeParam>;\n  /**\n   * Fields associated with the struct\n   */\n  fields: Array<MoveStructField>;\n};\n\n/**\n * Move function\n */\nexport type MoveFunction = {\n  name: string;\n  visibility: MoveFunctionVisibility;\n  /**\n   * Whether the function can be called as an entry function directly in a transaction\n   */\n  is_entry: boolean;\n  /**\n   * Whether the function is a view function or not\n   */\n  is_view: boolean;\n  /**\n   * Generic type params associated with the Move function\n   */\n  generic_type_params: Array<MoveFunctionGenericTypeParam>;\n  /**\n   * Parameters associated with the move function\n   */\n  params: Array<string>;\n  /**\n   * Return type of the function\n   */\n  return: Array<string>;\n};\n\nexport enum RoleType {\n  VALIDATOR = \"validator\",\n  FULL_NODE = \"full_node\",\n}\n\nexport type LedgerInfo = {\n  /**\n   * Chain ID of the current chain\n   */\n  chain_id: number;\n  epoch: string;\n  ledger_version: string;\n  oldest_ledger_version: string;\n  ledger_timestamp: string;\n  node_role: RoleType;\n  oldest_block_height: string;\n  block_height: string;\n  /**\n   * Git hash of the build of the API endpoint.  Can be used to determine the exact\n   * software version used by the API endpoint.\n   */\n  git_hash?: string;\n};\n\n/**\n * A Block type\n */\nexport type Block = {\n  block_height: string;\n  block_hash: string;\n  block_timestamp: string;\n  first_version: string;\n  last_version: string;\n  /**\n   * The transactions in the block in sequential order\n   */\n  transactions?: Array<TransactionResponse>;\n};\n\n/**\n * The data needed to generate a View Request payload\n */\nexport type InputViewRequestData = {\n  function: MoveFunctionId;\n  typeArguments?: Array<MoveStructId>;\n  functionArguments?: Array<MoveValue>;\n};\n\n// REQUEST TYPES\n\n/**\n * View request for the Move view function API\n *\n * `type MoveFunctionId = ${string}::${string}::${string}`;\n */\nexport type ViewRequest = {\n  function: MoveFunctionId;\n  /**\n   * Type arguments of the function\n   */\n  typeArguments: Array<MoveStructId>;\n  /**\n   * Arguments of the function\n   */\n  functionArguments: Array<MoveValue>;\n};\n\n/**\n * Table Item request for the GetTableItem API\n */\nexport type TableItemRequest = {\n  key_type: MoveValue;\n  value_type: MoveValue;\n  /**\n   * The value of the table item's key\n   */\n  key: any;\n};\n\n/**\n * A list of Authentication Key schemes that are supported by Aptos.\n *\n * They are combinations of signing schemes and derive schemes.\n */\nexport type AuthenticationKeyScheme = SigningScheme | DeriveScheme;\n\nexport enum SigningScheme {\n  /**\n   * For Ed25519PublicKey\n   */\n  Ed25519 = 0,\n  /**\n   * For MultiEd25519PublicKey\n   */\n  MultiEd25519 = 1,\n  /**\n   * For SingleKey ecdsa\n   */\n  SingleKey = 2,\n\n  MultiKey = 3,\n}\n\nexport enum SigningSchemeInput {\n  /**\n   * For Ed25519PublicKey\n   */\n  Ed25519 = 0,\n  /**\n   * For Secp256k1Ecdsa\n   */\n  Secp256k1Ecdsa = 2,\n}\n\n/**\n * Scheme used for deriving account addresses from other data\n */\nexport enum DeriveScheme {\n  /**\n   * Derives an address using an AUID, used for objects\n   */\n  DeriveAuid = 251,\n  /**\n   * Derives an address from another object address\n   */\n  DeriveObjectAddressFromObject = 252,\n  /**\n   * Derives an address from a GUID, used for objects\n   */\n  DeriveObjectAddressFromGuid = 253,\n  /**\n   * Derives an address from seed bytes, used for named objects\n   */\n  DeriveObjectAddressFromSeed = 254,\n  /**\n   * Derives an address from seed bytes, used for resource accounts\n   */\n  DeriveResourceAccountAddress = 255,\n}\n\n/**\n * Option properties to pass for waitForTransaction() function\n */\nexport type WaitForTransactionOptions = {\n  timeoutSecs?: number;\n  checkSuccess?: boolean;\n  waitForIndexer?: boolean;\n};\n\n/**\n * Input type to generate an account using Single Signer\n * Ed25519 or Legacy Ed25519\n */\nexport type GenerateAccountWithEd25519 = {\n  scheme: SigningSchemeInput.Ed25519;\n  legacy: boolean;\n};\n\n/**\n * Input type to generate an account using Single Signer\n * Secp256k1\n */\nexport type GenerateAccountWithSingleSignerSecp256k1Key = {\n  scheme: SigningSchemeInput.Secp256k1Ecdsa;\n  legacy?: false;\n};\n\nexport type GenerateAccount = GenerateAccountWithEd25519 | GenerateAccountWithSingleSignerSecp256k1Key;\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AptosApiError, AptosResponse } from \"./types\";\nimport { VERSION } from \"../version\";\nimport { AptosRequest, MimeType, ClientRequest, ClientResponse, Client, AnyNumber } from \"../types\";\n\n/**\n * Meaningful errors map\n */\nconst errors: Record<number, string> = {\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  429: \"Too Many Requests\",\n  500: \"Internal Server Error\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\",\n};\n\n/**\n * Given a url and method, sends the request with axios and\n * returns the response.\n */\nexport async function request<Req, Res>(options: ClientRequest<Req>, client: Client): Promise<ClientResponse<Res>> {\n  const { url, method, body, contentType, params, overrides } = options;\n  const headers: Record<string, string | AnyNumber | boolean | undefined> = {\n    ...overrides?.HEADERS,\n    \"x-aptos-client\": `aptos-typescript-sdk/${VERSION}`,\n    \"content-type\": contentType ?? MimeType.JSON,\n  };\n\n  // TODO - auth token is being used only for faucet, it breaks full node requests.\n  // Find a more sophisticated way than that but without the need to add the\n  // auth_token on every `aptos.fundAccount()` call\n  if (overrides?.AUTH_TOKEN && url.includes(\"faucet\")) {\n    headers.Authorization = `Bearer ${overrides?.AUTH_TOKEN}`;\n  }\n  if (overrides?.API_KEY && !url.includes(\"faucet\")) {\n    headers.Authorization = `Bearer ${overrides?.API_KEY}`;\n  }\n\n  /*\n   * make a call using the @aptos-labs/aptos-client package\n   * {@link https://www.npmjs.com/package/@aptos-labs/aptos-client}\n   */\n  return client.provider<Req, Res>({\n    url,\n    method,\n    body,\n    params,\n    headers,\n    overrides,\n  });\n}\n\n/**\n * The main function to use when doing an API request.\n *\n * @param options AptosRequest\n * @param aptosConfig The config information for the SDK client instance\n * @returns the response or AptosApiError\n */\nexport async function aptosRequest<Req extends {}, Res extends {}>(\n  options: AptosRequest,\n  aptosConfig: AptosConfig,\n): Promise<AptosResponse<Req, Res>> {\n  const { url, path } = options;\n  const fullUrl = path ? `${url}/${path}` : url;\n  const response = await request<Req, Res>({ ...options, url: fullUrl }, aptosConfig.client);\n\n  const result: AptosResponse<Req, Res> = {\n    status: response.status,\n    statusText: response.statusText!,\n    data: response.data,\n    headers: response.headers,\n    config: response.config,\n    request: response.request,\n    url: fullUrl,\n  };\n\n  // to support both fullnode and indexer responses,\n  // check if it is an indexer query, and adjust response.data\n  if (aptosConfig.isIndexerRequest(url)) {\n    const indexerResponse = result.data as any;\n    // errors from indexer\n    if (indexerResponse.errors) {\n      throw new AptosApiError(\n        options,\n        result,\n        `Indexer error: ${indexerResponse.errors[0].message}` ??\n          `Indexer unhandled Error ${response.status} : ${response.statusText}`,\n      );\n    }\n    result.data = indexerResponse.data as Res;\n  }\n\n  if (result.status >= 200 && result.status < 300) {\n    return result;\n  }\n\n  let errorMessage: string;\n\n  if (result && result.data && \"message\" in result.data && \"error_code\" in result.data) {\n    errorMessage = JSON.stringify(result.data);\n  } else if (result.status in errors) {\n    // If it's not an API type, it must come form infra, these are prehandled\n    errorMessage = errors[result.status];\n  } else {\n    // Everything else is unhandled\n    errorMessage = `Unhandled Error ${result.status} : ${result.statusText}`;\n  }\n\n  // Since we already checked if it is an Indexer request, here we can be sure\n  // it either Fullnode or Faucet request\n  throw new AptosApiError(\n    options,\n    result,\n    `${aptosConfig.isFullnodeRequest(url) ? \"Fullnode\" : \"Faucet\"} error: ${errorMessage}`,\n  );\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Type of API endpoint for request routing\n */\nexport enum AptosApiType {\n  FULLNODE,\n  INDEXER,\n  FAUCET,\n}\n\n/**\n * The default max gas amount when none is given.\n *\n * This is the maximum number of gas units that will be used by a transaction before being rejected.\n *\n * Note that max gas amount varies based on the transaction.  A larger transaction will go over this\n * default gas amount, and the value will need to be changed for the specific transaction.\n */\nexport const DEFAULT_MAX_GAS_AMOUNT = 200000;\n\n/**\n * The default transaction expiration seconds from now.\n *\n * This time is how long until the blockchain nodes will reject the transaction.\n *\n * Note that the transaction expiration time varies based on network connection and network load.  It may need to be\n * increased for the transaction to be processed.\n */\nexport const DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\n\n/**\n * The default number of seconds to wait for a transaction to be processed.\n *\n * This time is the amount of time that the SDK will wait for a transaction to be processed when waiting for\n * the results of the transaction.  It may take longer based on network connection and network load.\n */\nexport const DEFAULT_TXN_TIMEOUT_SEC = 20;\n\n/**\n * The default gas currency for the network.\n */\nexport const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n\nexport const RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\nexport const RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\n\n/**\n * The list of supported Processor types for our indexer api.\n *\n * These can be found from the processor_status table in the indexer database.\n * {@link https://cloud.hasura.io/public/graphiql?endpoint=https://indexer.mainnet.aptoslabs.com/v1/graphql}\n */\nexport enum ProcessorType {\n  ACCOUNT_TRANSACTION_PROCESSOR = \"account_transactions_processor\",\n  DEFAULT = \"default_processor\",\n  EVENTS_PROCESSOR = \"events_processor\",\n  // Fungible asset processor also handles coins\n  FUNGIBLE_ASSET_PROCESSOR = \"fungible_asset_processor\",\n  STAKE_PROCESSOR = \"stake_processor\",\n  // Token V2 processor replaces Token processor (not only for digital assets)\n  TOKEN_V2_PROCESSOR = \"token_v2_processor\",\n  USER_TRANSACTION_PROCESSOR = \"user_transaction_processor\",\n}\n","import { AptosConfig } from \"../api/aptosConfig\";\nimport { aptosRequest } from \"./core\";\nimport { AptosResponse } from \"./types\";\nimport { AnyNumber, ClientConfig, MimeType } from \"../types\";\nimport { AptosApiType } from \"../utils/const\";\n\nexport type GetRequestOptions = {\n  /**\n   * The config for the API client\n   */\n  aptosConfig: AptosConfig;\n  /**\n   * The type of API endpoint to call e.g. fullnode, indexer, etc\n   */\n  type: AptosApiType;\n  /**\n   * The name of the API method\n   */\n  originMethod: string;\n  /**\n   * The URL path to the API method\n   */\n  path: string;\n  /**\n   * The content type of the request body\n   */\n  contentType?: MimeType;\n  /**\n   * The accepted content type of the response of the API\n   */\n  acceptType?: MimeType;\n  /**\n   * The query parameters for the request\n   */\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  /**\n   * Specific client overrides for this request to override aptosConfig\n   */\n  overrides?: ClientConfig;\n};\n\nexport type GetAptosRequestOptions = Omit<GetRequestOptions, \"type\">;\n\n/**\n * Main function to do a Get request\n *\n * @param options GetRequestOptions\n * @returns\n */\nexport async function get<Req extends {}, Res extends {}>(\n  options: GetRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig, overrides, params, contentType, acceptType, path, originMethod, type } = options;\n  const url = aptosConfig.getRequestUrl(type);\n\n  return aptosRequest<Req, Res>(\n    {\n      url,\n      method: \"GET\",\n      originMethod,\n      path,\n      contentType: contentType?.valueOf(),\n      acceptType: acceptType?.valueOf(),\n      params,\n      overrides: {\n        ...aptosConfig.clientConfig,\n        ...overrides,\n      },\n    },\n    aptosConfig,\n  );\n}\n\nexport async function getAptosFullNode<Req extends {}, Res extends {}>(\n  options: GetAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return get<Req, Res>({ ...options, type: AptosApiType.FULLNODE });\n}\n\n/// This function is a helper for paginating using a function wrapping an API\nexport async function paginateWithCursor<Req extends Record<string, any>, Res extends Array<{}>>(\n  options: GetAptosRequestOptions,\n): Promise<Res> {\n  const out: any[] = [];\n  let cursor: string | undefined;\n  const requestParams = options.params as { start?: string; limit?: number };\n  do {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await get<Req, Res>({\n      type: AptosApiType.FULLNODE,\n      aptosConfig: options.aptosConfig,\n      originMethod: options.originMethod,\n      path: options.path,\n      params: requestParams,\n      overrides: options.overrides,\n    });\n    /**\n     * the cursor is a \"state key\" from the API perspective. Client\n     * should not need to \"care\" what it represents but just use it\n     * to query the next chunk of data.\n     */\n    cursor = response.headers[\"x-aptos-cursor\"];\n    // Now that we have the cursor (if any), we remove the headers before\n    // adding these to the output of this function.\n    delete response.headers;\n    out.push(...response.data);\n    requestParams.start = cursor;\n  } while (cursor !== null && cursor !== undefined);\n  return out as Res;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { aptosRequest } from \"./core\";\nimport { AptosResponse } from \"./types\";\nimport { AnyNumber, ClientConfig, MimeType } from \"../types\";\nimport { AptosApiType } from \"../utils/const\";\n\nexport type PostRequestOptions = {\n  /**\n   * The config for the API client\n   */\n  aptosConfig: AptosConfig;\n  /**\n   * The type of API endpoint to call e.g. fullnode, indexer, etc\n   */\n  type: AptosApiType;\n  /**\n   * The name of the API method\n   */\n  originMethod: string;\n  /**\n   * The URL path to the API method\n   */\n  path: string;\n  /**\n   * The content type of the request body\n   */\n  contentType?: MimeType;\n  /**\n   * The accepted content type of the response of the API\n   */\n  acceptType?: MimeType;\n  /**\n   * The query parameters for the request\n   */\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  /**\n   * The body of the request, should match the content type of the request\n   */\n  body?: any;\n  /**\n   * Specific client overrides for this request to override aptosConfig\n   */\n  overrides?: ClientConfig;\n};\n\nexport type PostAptosRequestOptions = Omit<PostRequestOptions, \"type\">;\n\n/**\n * Main function to do a Post request\n *\n * @param options PostRequestOptions\n * @returns\n */\nexport async function post<Req extends {}, Res extends {}>(\n  options: PostRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { type, originMethod, path, body, acceptType, contentType, params, aptosConfig, overrides } = options;\n  const url = aptosConfig.getRequestUrl(type);\n\n  return aptosRequest<Req, Res>(\n    {\n      url,\n      method: \"POST\",\n      originMethod,\n      path,\n      body,\n      contentType: contentType?.valueOf(),\n      acceptType: acceptType?.valueOf(),\n      params,\n      overrides: {\n        ...aptosConfig.clientConfig,\n        ...overrides,\n      },\n    },\n    aptosConfig,\n  );\n}\n\nexport async function postAptosFullNode<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.FULLNODE });\n}\n\nexport async function postAptosIndexer<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.INDEXER });\n}\n\nexport async function postAptosFaucet<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.FAUCET });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { Serializable, Serializer } from \"../bcs/serializer\";\nimport { Deserializer } from \"../bcs/deserializer\";\nimport { ParsingError, ParsingResult } from \"./common\";\nimport { TransactionArgument } from \"../transactions/instances/transactionArgument\";\nimport { HexInput, ScriptTransactionArgumentVariants } from \"../types\";\n\n/**\n * This enum is used to explain why an address was invalid.\n */\nexport enum AddressInvalidReason {\n  INCORRECT_NUMBER_OF_BYTES = \"incorrect_number_of_bytes\",\n  INVALID_HEX_CHARS = \"invalid_hex_chars\",\n  TOO_SHORT = \"too_short\",\n  TOO_LONG = \"too_long\",\n  LEADING_ZERO_X_REQUIRED = \"leading_zero_x_required\",\n  LONG_FORM_REQUIRED_UNLESS_SPECIAL = \"long_form_required_unless_special\",\n  INVALID_PADDING_ZEROES = \"INVALID_PADDING_ZEROES\",\n}\n\nexport type AccountAddressInput = HexInput | AccountAddress;\n\n/**\n * NOTE: Only use this class for account addresses. For other hex data, e.g. transaction\n * hashes, use the Hex class.\n *\n * AccountAddress is used for working with account addresses. Account addresses, when\n * represented as a string, generally look like these examples:\n * - 0x1\n * - 0xaa86fe99004361f747f91342ca13c426ca0cccb0c1217677180c9493bad6ef0c\n *\n * Proper formatting and parsing of account addresses is defined by AIP-40.\n * To learn more about the standard, read the AIP here:\n * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n *\n * The comments in this class make frequent reference to the LONG and SHORT formats,\n * as well as \"special\" addresses. To learn what these refer to see AIP-40.\n */\nexport class AccountAddress extends Serializable implements TransactionArgument {\n  /**\n   * This is the internal representation of an account address.\n   */\n  readonly data: Uint8Array;\n\n  /**\n   * The number of bytes that make up an account address.\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The length of an address string in LONG form without a leading 0x.\n   */\n  static readonly LONG_STRING_LENGTH: number = 64;\n\n  static ZERO: AccountAddress = AccountAddress.from(\"0x0\");\n\n  static ONE: AccountAddress = AccountAddress.from(\"0x1\");\n\n  static TWO: AccountAddress = AccountAddress.from(\"0x2\");\n\n  static THREE: AccountAddress = AccountAddress.from(\"0x3\");\n\n  static FOUR: AccountAddress = AccountAddress.from(\"0x4\");\n\n  /**\n   * Creates an instance of AccountAddress from a Uint8Array.\n   *\n   * @param args.data A Uint8Array representing an account address.\n   */\n  constructor(input: Uint8Array) {\n    super();\n    if (input.length !== AccountAddress.LENGTH) {\n      throw new ParsingError(\n        \"AccountAddress data should be exactly 32 bytes long\",\n        AddressInvalidReason.INCORRECT_NUMBER_OF_BYTES,\n      );\n    }\n    this.data = input;\n  }\n\n  /**\n   * Returns whether an address is special, where special is defined as 0x0 to 0xf\n   * inclusive. In other words, the last byte of the address must be < 0b10000 (16)\n   * and every other byte must be zero.\n   *\n   * For more information on how special addresses are defined see AIP-40:\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * @returns true if the address is special, false if not.\n   */\n  isSpecial(): boolean {\n    return (\n      this.data.slice(0, this.data.length - 1).every((byte) => byte === 0) && this.data[this.data.length - 1] < 0b10000\n    );\n  }\n\n  // ===\n  // Methods for representing an instance of AccountAddress as other types.\n  // ===\n\n  /**\n   * Return the AccountAddress as a string as per AIP-40.\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * In short, it means that special addresses are represented in SHORT form, meaning\n   * 0x0 through to 0xf inclusive, and every other address is represented in LONG form,\n   * meaning 0x + 64 hex characters.\n   *\n   * @returns AccountAddress as a string conforming to AIP-40.\n   */\n  toString(): `0x${string}` {\n    return `0x${this.toStringWithoutPrefix()}`;\n  }\n\n  /**\n   * NOTE: Prefer to use `toString` where possible.\n   *\n   * Return the AccountAddress as a string as per AIP-40 but without the leading 0x.\n   *\n   * Learn more by reading the docstring of `toString`.\n   *\n   * @returns AccountAddress as a string conforming to AIP-40 but without the leading 0x.\n   */\n  toStringWithoutPrefix(): string {\n    let hex = bytesToHex(this.data);\n    if (this.isSpecial()) {\n      hex = hex[hex.length - 1];\n    }\n    return hex;\n  }\n\n  /**\n   * NOTE: Prefer to use `toString` where possible.\n   *\n   * Whereas toString will format special addresses (as defined by isSpecial) using the\n   * SHORT form (no leading 0s), this format the address in the LONG format\n   * unconditionally.\n   *\n   * This means it will be 0x + 64 hex characters.\n   *\n   * @returns AccountAddress as a string in LONG form.\n   */\n  toStringLong(): `0x${string}` {\n    return `0x${this.toStringLongWithoutPrefix()}`;\n  }\n\n  /**\n   * NOTE: Prefer to use `toString` where possible.\n   *\n   * Whereas toString will format special addresses (as defined by isSpecial) using the\n   * SHORT form (no leading 0s), this function will include leading zeroes. The string\n   * will not have a leading zero.\n   *\n   * This means it will be 64 hex characters without a leading 0x.\n   *\n   * @returns AccountAddress as a string in LONG form without a leading 0x.\n   */\n  toStringLongWithoutPrefix(): string {\n    return bytesToHex(this.data);\n  }\n\n  /**\n   * Get the inner hex data. The inner data is already a Uint8Array so no conversion\n   * is taking place here, it just returns the inner data.\n   *\n   * @returns Hex data as Uint8Array\n   */\n  toUint8Array(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Serialize the AccountAddress to a Serializer instance's data buffer.\n   * @param serializer The serializer to serialize the AccountAddress to.\n   * @returns void\n   * @example\n   * const serializer = new Serializer();\n   * const address = AccountAddress.fromString(\"0x1\");\n   * address.serialize(serializer);\n   * const bytes = serializer.toUint8Array();\n   * // `bytes` is now the BCS-serialized address.\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.Address);\n    serializer.serialize(this);\n  }\n\n  /**\n   * Deserialize an AccountAddress from the byte buffer in a Deserializer instance.\n   * @param deserializer The deserializer to deserialize the AccountAddress from.\n   * @returns An instance of AccountAddress.\n   * @example\n   * const bytes = hexToBytes(\"0x0102030405060708091011121314151617181920212223242526272829303132\");\n   * const deserializer = new Deserializer(bytes);\n   * const address = AccountAddress.deserialize(deserializer);\n   * // `address` is now an instance of AccountAddress.\n   */\n  static deserialize(deserializer: Deserializer): AccountAddress {\n    const bytes = deserializer.deserializeFixedBytes(AccountAddress.LENGTH);\n    return new AccountAddress(bytes);\n  }\n\n  // ===\n  // Methods for creating an instance of AccountAddress from other types.\n  // ===\n\n  /**\n   * NOTE: This function has strict parsing behavior. For relaxed behavior, please use\n   * the `fromString` function.\n   *\n   * Creates an instance of AccountAddress from a hex string.\n   *\n   * This function allows only the strictest formats defined by AIP-40. In short this\n   * means only the following formats are accepted:\n   *\n   * - LONG\n   * - SHORT for special addresses\n   *\n   * Where:\n   * - LONG is defined as 0x + 64 hex characters.\n   * - SHORT for special addresses is 0x0 to 0xf inclusive without padding zeroes.\n   *\n   * This means the following are not accepted:\n   * - SHORT for non-special addresses.\n   * - Any address without a leading 0x.\n   *\n   * Learn more about the different address formats by reading AIP-40:\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * @param input A hex string representing an account address.\n   *\n   * @returns An instance of AccountAddress.\n   */\n  static fromStringStrict(input: string): AccountAddress {\n    // Assert the string starts with 0x.\n    if (!input.startsWith(\"0x\")) {\n      throw new ParsingError(\"Hex string must start with a leading 0x.\", AddressInvalidReason.LEADING_ZERO_X_REQUIRED);\n    }\n\n    const address = AccountAddress.fromString(input);\n\n    // Check if the address is in LONG form. If it is not, this is only allowed for\n    // special addresses, in which case we check it is in proper SHORT form.\n    if (input.length !== AccountAddress.LONG_STRING_LENGTH + 2) {\n      if (!address.isSpecial()) {\n        throw new ParsingError(\n          `The given hex string ${input} is not a special address, it must be represented as 0x + 64 chars.`,\n          AddressInvalidReason.LONG_FORM_REQUIRED_UNLESS_SPECIAL,\n        );\n      } else if (input.length !== 3) {\n        // 0x + one hex char is the only valid SHORT form for special addresses.\n        throw new ParsingError(\n          // eslint-disable-next-line max-len\n          `The given hex string ${input} is a special address not in LONG form, it must be 0x0 to 0xf without padding zeroes.`,\n          AddressInvalidReason.INVALID_PADDING_ZEROES,\n        );\n      }\n    }\n\n    return address;\n  }\n\n  /**\n   * NOTE: This function has relaxed parsing behavior. For strict behavior, please use\n   * the `fromStringStrict` function. Where possible use `fromStringStrict` rather than this\n   * function, `fromString` is only provided for backwards compatibility.\n   *\n   * Creates an instance of AccountAddress from a hex string.\n   *\n   * This function allows all formats defined by AIP-40. In short this means the\n   * following formats are accepted:\n   *\n   * - LONG, with or without leading 0x\n   * - SHORT, with or without leading 0x\n   *\n   * Where:\n   * - LONG is 64 hex characters.\n   * - SHORT is 1 to 63 hex characters inclusive.\n   * - Padding zeroes are allowed, e.g. 0x0123 is valid.\n   *\n   * Learn more about the different address formats by reading AIP-40:\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * @param input A hex string representing an account address.\n   *\n   * @returns An instance of AccountAddress.\n   */\n  static fromString(input: string): AccountAddress {\n    let parsedInput = input;\n    // Remove leading 0x for parsing.\n    if (input.startsWith(\"0x\")) {\n      parsedInput = input.slice(2);\n    }\n\n    // Ensure the address string is at least 1 character long.\n    if (parsedInput.length === 0) {\n      throw new ParsingError(\n        \"Hex string is too short, must be 1 to 64 chars long, excluding the leading 0x.\",\n        AddressInvalidReason.TOO_SHORT,\n      );\n    }\n\n    // Ensure the address string is not longer than 64 characters.\n    if (parsedInput.length > 64) {\n      throw new ParsingError(\n        \"Hex string is too long, must be 1 to 64 chars long, excluding the leading 0x.\",\n        AddressInvalidReason.TOO_LONG,\n      );\n    }\n\n    let addressBytes: Uint8Array;\n    try {\n      // Pad the address with leading zeroes, so it is 64 chars long and then convert\n      // the hex string to bytes. Every two characters in a hex string constitutes a\n      // single byte. So a 64 length hex string becomes a 32 byte array.\n      addressBytes = hexToBytes(parsedInput.padStart(64, \"0\"));\n    } catch (error: any) {\n      // At this point the only way this can fail is if the hex string contains\n      // invalid characters.\n      throw new ParsingError(`Hex characters are invalid: ${error?.message}`, AddressInvalidReason.INVALID_HEX_CHARS);\n    }\n\n    return new AccountAddress(addressBytes);\n  }\n\n  /**\n   * Convenience method for creating an AccountAddress from all known inputs.\n   *\n   * This handles, Uint8array, string, and AccountAddress itself\n   * @param input\n   */\n  static from(input: AccountAddressInput): AccountAddress {\n    if (input instanceof AccountAddress) {\n      return input;\n    }\n    if (input instanceof Uint8Array) {\n      return new AccountAddress(input);\n    }\n    return AccountAddress.fromString(input);\n  }\n\n  /**\n   * Convenience method for creating an AccountAddress from all known inputs.\n   *\n   * This handles, Uint8array, string, and AccountAddress itself\n   * @param input\n   */\n  static fromStrict(input: AccountAddressInput): AccountAddress {\n    if (input instanceof AccountAddress) {\n      return input;\n    }\n    if (input instanceof Uint8Array) {\n      return new AccountAddress(input);\n    }\n    return AccountAddress.fromStringStrict(input);\n  }\n\n  // ===\n  // Methods for checking validity.\n  // ===\n\n  /**\n   * Check if the string is a valid AccountAddress.\n   *\n   * @param args.input A hex string representing an account address.\n   * @param args.strict If true, use strict parsing behavior. If false, use relaxed parsing behavior.\n   *\n   * @returns valid = true if the string is valid, valid = false if not. If the string\n   * is not valid, invalidReason will be set explaining why it is invalid.\n   */\n  static isValid(args: { input: AccountAddressInput; strict?: boolean }): ParsingResult<AddressInvalidReason> {\n    try {\n      if (args.strict) {\n        AccountAddress.fromStrict(args.input);\n      } else {\n        AccountAddress.from(args.input);\n      }\n      return { valid: true };\n    } catch (error: any) {\n      return {\n        valid: false,\n        invalidReason: error?.invalidReason,\n        invalidReasonMessage: error?.message,\n      };\n    }\n  }\n\n  /**\n   * Return whether AccountAddresses are equal. AccountAddresses are considered equal\n   * if their underlying byte data is identical.\n   *\n   * @param other The AccountAddress to compare to.\n   * @returns true if the AccountAddresses are equal, false if not.\n   */\n  equals(other: AccountAddress): boolean {\n    if (this.data.length !== other.data.length) return false;\n    return this.data.every((value, index) => value === other.data[index]);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Uint8, Uint16, Uint32, Uint64, Uint128, Uint256 } from \"../types\";\n\n// Upper bound values for uint8, uint16, uint64 etc.  These are all derived as\n// 2^N - 1, where N is the number of bits in the type.\nexport const MAX_U8_NUMBER: Uint8 = 255;\nexport const MAX_U16_NUMBER: Uint16 = 65535;\nexport const MAX_U32_NUMBER: Uint32 = 4294967295;\nexport const MAX_U64_BIG_INT: Uint64 = 18446744073709551615n;\nexport const MAX_U128_BIG_INT: Uint128 = 340282366920938463463374607431768211455n;\nexport const MAX_U256_BIG_INT: Uint256 =\n  115792089237316195423570985008687907853269984665640564039457584007913129639935n;\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { ParsingError, ParsingResult } from \"./common\";\nimport { HexInput } from \"../types\";\n\n/**\n * This enum is used to explain why parsing might have failed.\n */\nexport enum HexInvalidReason {\n  TOO_SHORT = \"too_short\",\n  INVALID_LENGTH = \"invalid_length\",\n  INVALID_HEX_CHARS = \"invalid_hex_chars\",\n}\n\n/**\n * NOTE: Do not use this class when working with account addresses, use AccountAddress.\n *\n * NOTE: When accepting hex data as input to a function, prefer to accept HexInput and\n * then use the static helper methods of this class to convert it into the desired\n * format. This enables the greatest flexibility for the developer.\n *\n * Hex is a helper class for working with hex data. Hex data, when represented as a\n * string, generally looks like this, for example: 0xaabbcc, 45cd32, etc.\n *\n * You might use this class like this:\n *\n * ```ts\n * getTransactionByHash(txnHash: HexInput): Promise<Transaction> {\n *   const txnHashString = Hex.fromHexInput(txnHash).toString();\n *   return await getTransactionByHashInner(txnHashString);\n * }\n * ```\n *\n * This call to `Hex.fromHexInput().toString()` converts the HexInput to a hex string\n * with a leading 0x prefix, regardless of what the input format was.\n *\n * These are some other ways to chain the functions together:\n * - `Hex.fromString({ hexInput: \"0x1f\" }).toUint8Array()`\n * - `new Hex([1, 3]).toStringWithoutPrefix()`\n */\nexport class Hex {\n  private readonly data: Uint8Array;\n\n  /**\n   * Create a new Hex instance from a Uint8Array.\n   *\n   * @param data Uint8Array\n   */\n  constructor(data: Uint8Array) {\n    this.data = data;\n  }\n\n  // ===\n  // Methods for representing an instance of Hex as other types.\n  // ===\n\n  /**\n   * Get the inner hex data. The inner data is already a Uint8Array so no conversion\n   * is taking place here, it just returns the inner data.\n   *\n   * @returns Hex data as Uint8Array\n   */\n  toUint8Array(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Get the hex data as a string without the 0x prefix.\n   *\n   * @returns Hex string without 0x prefix\n   */\n  toStringWithoutPrefix(): string {\n    return bytesToHex(this.data);\n  }\n\n  /**\n   * Get the hex data as a string with the 0x prefix.\n   *\n   * @returns Hex string with 0x prefix\n   */\n  toString(): string {\n    return `0x${this.toStringWithoutPrefix()}`;\n  }\n\n  // ===\n  // Methods for creating an instance of Hex from other types.\n  // ===\n\n  /**\n   * Static method to convert a hex string to Hex\n   *\n   * @param str A hex string, with or without the 0x prefix\n   *\n   * @returns Hex\n   */\n  static fromString(str: string): Hex {\n    let input = str;\n\n    if (input.startsWith(\"0x\")) {\n      input = input.slice(2);\n    }\n\n    if (input.length === 0) {\n      throw new ParsingError(\n        \"Hex string is too short, must be at least 1 char long, excluding the optional leading 0x.\",\n        HexInvalidReason.TOO_SHORT,\n      );\n    }\n\n    if (input.length % 2 !== 0) {\n      throw new ParsingError(\"Hex string must be an even number of hex characters.\", HexInvalidReason.INVALID_LENGTH);\n    }\n\n    try {\n      return new Hex(hexToBytes(input));\n    } catch (error: any) {\n      throw new ParsingError(\n        `Hex string contains invalid hex characters: ${error?.message}`,\n        HexInvalidReason.INVALID_HEX_CHARS,\n      );\n    }\n  }\n\n  /**\n   * Static method to convert an instance of HexInput to Hex\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   *\n   * @returns Hex\n   */\n  static fromHexInput(hexInput: HexInput): Hex {\n    if (hexInput instanceof Uint8Array) return new Hex(hexInput);\n    return Hex.fromString(hexInput);\n  }\n\n  // ===\n  // Methods for checking validity.\n  // ===\n\n  /**\n   * Check if the string is valid hex.\n   *\n   * @param str A hex string representing byte data.\n   *\n   * @returns valid = true if the string is valid, false if not. If the string is not\n   * valid, invalidReason and invalidReasonMessage will be set explaining why it is\n   * invalid.\n   */\n  static isValid(str: string): ParsingResult<HexInvalidReason> {\n    try {\n      Hex.fromString(str);\n      return { valid: true };\n    } catch (error: any) {\n      return {\n        valid: false,\n        invalidReason: error?.invalidReason,\n        invalidReasonMessage: error?.message,\n      };\n    }\n  }\n\n  /**\n   * Return whether Hex instances are equal. Hex instances are considered equal if\n   * their underlying byte data is identical.\n   *\n   * @param other The Hex instance to compare to.\n   * @returns true if the Hex instances are equal, false if not.\n   */\n  equals(other: Hex): boolean {\n    if (this.data.length !== other.data.length) return false;\n    return this.data.every((value, index) => value === other.data[index]);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This error is used to explain why parsing failed.\n */\nexport class ParsingError<T> extends Error {\n  /**\n   * This provides a programmatic way to access why parsing failed. Downstream devs\n   * might want to use this to build their own error messages if the default error\n   * messages are not suitable for their use case. This should be an enum.\n   */\n  public invalidReason: T;\n\n  constructor(message: string, invalidReason: T) {\n    super(message);\n    this.invalidReason = invalidReason;\n  }\n}\n\n/**\n * Whereas ParsingError is thrown when parsing fails, e.g. in a fromString function,\n * this type is returned from \"defensive\" functions like isValid.\n */\nexport type ParsingResult<T> = {\n  /**\n   * True if valid, false otherwise.\n   */\n  valid: boolean;\n\n  /**\n   * If valid is false, this will be a code explaining why parsing failed.\n   */\n  invalidReason?: T;\n\n  /**\n   * If valid is false, this will be a string explaining why parsing failed.\n   */\n  invalidReasonMessage?: string;\n};\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport {\n  MAX_U128_BIG_INT,\n  MAX_U16_NUMBER,\n  MAX_U32_NUMBER,\n  MAX_U64_BIG_INT,\n  MAX_U8_NUMBER,\n  MAX_U256_BIG_INT,\n} from \"./consts\";\nimport { Hex } from \"../core/hex\";\nimport { AnyNumber, Uint16, Uint32, Uint8 } from \"../types\";\n\n// This class is intended to be used as a base class for all serializable types.\n// It can be used to facilitate composable serialization of a complex type and\n// in general to serialize a type to its BCS representation.\nexport abstract class Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Serializes a `Serializable` value to its BCS representation.\n   * This function is the Typescript SDK equivalent of `bcs::to_bytes` in Move.\n   * @returns the BCS representation of the Serializable instance as a byte buffer\n   */\n  bcsToBytes(): Uint8Array {\n    const serializer = new Serializer();\n    this.serialize(serializer);\n    return serializer.toUint8Array();\n  }\n\n  /**\n   * Helper function to get a value's BCS-serialized bytes as a Hex instance.\n   * @returns a Hex instance with the BCS-serialized bytes loaded into its underlying Uint8Array\n   */\n  bcsToHex(): Hex {\n    const bcsBytes = this.bcsToBytes();\n    return Hex.fromHexInput(bcsBytes);\n  }\n}\n\nexport class Serializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  // Constructs a serializer with a buffer of size `length` bytes, 64 bytes by default.\n  // `length` must be greater than 0.\n  constructor(length: number = 64) {\n    if (length <= 0) {\n      throw new Error(\"Length needs to be greater than 0\");\n    }\n    this.buffer = new ArrayBuffer(length);\n    this.offset = 0;\n  }\n\n  private ensureBufferWillHandleSize(bytes: number) {\n    while (this.buffer.byteLength < this.offset + bytes) {\n      const newBuffer = new ArrayBuffer(this.buffer.byteLength * 2);\n      new Uint8Array(newBuffer).set(new Uint8Array(this.buffer));\n      this.buffer = newBuffer;\n    }\n  }\n\n  protected appendToBuffer(values: Uint8Array) {\n    this.ensureBufferWillHandleSize(values.length);\n    new Uint8Array(this.buffer, this.offset).set(values);\n    this.offset += values.length;\n  }\n\n  private serializeWithFunction(\n    fn: (byteOffset: number, value: number, littleEndian?: boolean) => void,\n    bytesLength: number,\n    value: number,\n  ) {\n    this.ensureBufferWillHandleSize(bytesLength);\n    const dv = new DataView(this.buffer, this.offset);\n    fn.apply(dv, [0, value, true]);\n    this.offset += bytesLength;\n  }\n\n  /**\n   * Serializes a string. UTF8 string is supported.\n   *\n   * The number of bytes in the string content is serialized first, as a uleb128-encoded u32 integer.\n   * Then the string content is serialized as UTF8 encoded bytes.\n   *\n   * BCS layout for \"string\": string_length | string_content\n   * where string_length is a u32 integer encoded as a uleb128 integer, equal to the number of bytes in string_content.\n   *\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeStr(\"1234abcd\");\n   * assert(serializer.toUint8Array() === new Uint8Array([8, 49, 50, 51, 52, 97, 98, 99, 100]));\n   * ```\n   */\n  serializeStr(value: string) {\n    const textEncoder = new TextEncoder();\n    this.serializeBytes(textEncoder.encode(value));\n  }\n\n  /**\n   * Serializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes\n   * where bytes_length is a u32 integer encoded as a uleb128 integer, equal to the length of the bytes array.\n   */\n  serializeBytes(value: Uint8Array) {\n    this.serializeU32AsUleb128(value.length);\n    this.appendToBuffer(value);\n  }\n\n  /**\n   * Serializes an array of bytes with known length. Therefore, length doesn't need to be\n   * serialized to help deserialization.\n   *\n   * When deserializing, the number of bytes to deserialize needs to be passed in.\n   */\n  serializeFixedBytes(value: Uint8Array) {\n    this.appendToBuffer(value);\n  }\n\n  /**\n   * Serializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for true and \"0x00\" for false.\n   */\n  serializeBool(value: boolean) {\n    ensureBoolean(value);\n    const byteValue = value ? 1 : 0;\n    this.appendToBuffer(new Uint8Array([byteValue]));\n  }\n\n  /**\n   * Serializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  @checkNumberRange(0, MAX_U8_NUMBER)\n  serializeU8(value: Uint8) {\n    this.appendToBuffer(new Uint8Array([value]));\n  }\n\n  /**\n   * Serializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU16(4660);\n   * assert(serializer.toUint8Array() === new Uint8Array([0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U16_NUMBER)\n  serializeU16(value: Uint16) {\n    this.serializeWithFunction(DataView.prototype.setUint16, 2, value);\n  }\n\n  /**\n   * Serializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU32(305419896);\n   * assert(serializer.toUint8Array() === new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32(value: Uint32) {\n    this.serializeWithFunction(DataView.prototype.setUint32, 4, value);\n  }\n\n  /**\n   * Serializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU64(1311768467750121216);\n   * assert(serializer.toUint8Array() === new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(BigInt(0), MAX_U64_BIG_INT)\n  serializeU64(value: AnyNumber) {\n    const low = BigInt(value) & BigInt(MAX_U32_NUMBER);\n    const high = BigInt(value) >> BigInt(32);\n\n    // write little endian number\n    this.serializeU32(Number(low));\n    this.serializeU32(Number(high));\n  }\n\n  /**\n   * Serializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U128_BIG_INT)\n  serializeU128(value: AnyNumber) {\n    const low = BigInt(value) & MAX_U64_BIG_INT;\n    const high = BigInt(value) >> BigInt(64);\n\n    // write little endian number\n    this.serializeU64(low);\n    this.serializeU64(high);\n  }\n\n  /**\n   * Serializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U256_BIG_INT)\n  serializeU256(value: AnyNumber) {\n    const low = BigInt(value) & MAX_U128_BIG_INT;\n    const high = BigInt(value) >> BigInt(128);\n\n    // write little endian number\n    this.serializeU128(low);\n    this.serializeU128(high);\n  }\n\n  /**\n   * Serializes a uint32 number with uleb128.\n   *\n   * BCS uses uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32AsUleb128(val: Uint32) {\n    let value = val;\n    const valueArray = [];\n    while (value >>> 7 !== 0) {\n      valueArray.push((value & 0x7f) | 0x80);\n      value >>>= 7;\n    }\n    valueArray.push(value);\n    this.appendToBuffer(new Uint8Array(valueArray));\n  }\n\n  /**\n   * Returns the buffered bytes\n   */\n  toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer).slice(0, this.offset);\n  }\n\n  /**\n   * Serializes a `Serializable` value, facilitating composable serialization.\n   *\n   * @param value The Serializable value to serialize\n   *\n   * @example\n   * // Define the MoveStruct class that implements the Serializable interface\n   * class MoveStruct extends Serializable {\n   *     constructor(\n   *         public creatorAddress: AccountAddress, // where AccountAddress extends Serializable\n   *         public collectionName: string,\n   *         public tokenName: string\n   *     ) {}\n   *\n   *     serialize(serializer: Serializer): void {\n   *         serializer.serialize(this.creatorAddress);  // Composable serialization of another Serializable object\n   *         serializer.serializeStr(this.collectionName);\n   *         serializer.serializeStr(this.tokenName);\n   *     }\n   * }\n   *\n   * // Construct a MoveStruct\n   * const moveStruct = new MoveStruct(new AccountAddress(...), \"MyCollection\", \"TokenA\");\n   *\n   * // Serialize a string, a u64 number, and a MoveStruct instance.\n   * const serializer = new Serializer();\n   * serializer.serializeStr(\"ExampleString\");\n   * serializer.serializeU64(12345678);\n   * serializer.serialize(moveStruct);\n   *\n   * // Get the bytes from the Serializer instance\n   * const serializedBytes = serializer.toUint8Array();\n   *\n   * @returns the serializer instance\n   */\n  serialize<T extends Serializable>(value: T): void {\n    // NOTE: The `serialize` method called by `value` is defined in `value`'s\n    // Serializable interface, not the one defined in this class.\n    value.serialize(this);\n  }\n\n  /**\n   * Serializes an array of BCS Serializable values to a serializer instance.\n   * Note that this does not return anything. The bytes are added to the serializer instance's byte buffer.\n   *\n   * @param values The array of BCS Serializable values\n   * @example\n   * const addresses = new Array<AccountAddress>(\n   *   AccountAddress.from(\"0x1\"),\n   *   AccountAddress.from(\"0x2\"),\n   *   AccountAddress.from(\"0xa\"),\n   *   AccountAddress.from(\"0xb\"),\n   * );\n   * const serializer = new Serializer();\n   * serializer.serializeVector(addresses);\n   * const serializedBytes = serializer.toUint8Array();\n   * // serializedBytes is now the BCS-serialized bytes\n   * // The equivalent value in Move would be:\n   * // `bcs::to_bytes(&vector<address> [@0x1, @0x2, @0xa, @0xb])`;\n   */\n  serializeVector<T extends Serializable>(values: Array<T>): void {\n    this.serializeU32AsUleb128(values.length);\n    values.forEach((item) => {\n      item.serialize(this);\n    });\n  }\n}\n\nexport function ensureBoolean(value: unknown): asserts value is boolean {\n  if (typeof value !== \"boolean\") {\n    throw new Error(`${value} is not a boolean value`);\n  }\n}\n\nexport const outOfRangeErrorMessage = (value: AnyNumber, min: AnyNumber, max: AnyNumber) =>\n  `${value} is out of range: [${min}, ${max}]`;\n\nexport function validateNumberInRange<T extends AnyNumber>(value: T, minValue: T, maxValue: T) {\n  const valueBigInt = BigInt(value);\n  if (valueBigInt > BigInt(maxValue) || valueBigInt < BigInt(minValue)) {\n    throw new Error(outOfRangeErrorMessage(value, minValue, maxValue));\n  }\n}\n\n/**\n * A decorator to ensure the input argument for a function is within a range.\n * @param minValue The input argument must be >= minValue\n * @param maxValue The input argument must be <= maxValue\n */\nfunction checkNumberRange<T extends AnyNumber>(minValue: T, maxValue: T) {\n  return (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const childFunction = descriptor.value;\n    // eslint-disable-next-line no-param-reassign\n    descriptor.value = function deco(value: AnyNumber) {\n      validateNumberInRange(value, minValue, maxValue);\n      return childFunction.apply(this, [value]);\n    };\n\n    return descriptor;\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport { MAX_U32_NUMBER } from \"./consts\";\nimport { Uint8, Uint16, Uint32, Uint64, Uint128, Uint256 } from \"../types\";\n\n/**\n * This interface exists to define Deserializable<T> inputs for functions that\n * deserialize a byte buffer into a type T.\n * It is not intended to be implemented or extended, because Typescript has no support\n * for static methods in interfaces.\n */\nexport interface Deserializable<T> {\n  deserialize(deserializer: Deserializer): T;\n}\n\nexport class Deserializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  constructor(data: Uint8Array) {\n    // copies data to prevent outside mutation of buffer.\n    this.buffer = new ArrayBuffer(data.length);\n    new Uint8Array(this.buffer).set(data, 0);\n    this.offset = 0;\n  }\n\n  private read(length: number): ArrayBuffer {\n    if (this.offset + length > this.buffer.byteLength) {\n      throw new Error(\"Reached to the end of buffer\");\n    }\n\n    const bytes = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return bytes;\n  }\n\n  /**\n   * Deserializes a string. UTF8 string is supported. Reads the string's bytes length \"l\" first,\n   * and then reads \"l\" bytes of content. Decodes the byte array into a string.\n   *\n   * BCS layout for \"string\": string_length | string_content\n   * where string_length is a u32 integer encoded as a uleb128 integer, equal to the number of bytes in string_content.\n   *\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([8, 49, 50, 51, 52, 97, 98, 99, 100]));\n   * assert(deserializer.deserializeStr() === \"1234abcd\");\n   * ```\n   */\n  deserializeStr(): string {\n    const value = this.deserializeBytes();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(value);\n  }\n\n  /**\n   * Deserializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes\n   * where bytes_length is a u32 integer encoded as a uleb128 integer, equal to the length of the bytes array.\n   */\n  deserializeBytes(): Uint8Array {\n    const len = this.deserializeUleb128AsU32();\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes an array of bytes. The number of bytes to read is already known.\n   *\n   */\n  deserializeFixedBytes(len: number): Uint8Array {\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for true and \"0x00\" for false.\n   */\n  deserializeBool(): boolean {\n    const bool = new Uint8Array(this.read(1))[0];\n    if (bool !== 1 && bool !== 0) {\n      throw new Error(\"Invalid boolean value\");\n    }\n    return bool === 1;\n  }\n\n  /**\n   * Deserializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  deserializeU8(): Uint8 {\n    return new DataView(this.read(1)).getUint8(0);\n  }\n\n  /**\n   * Deserializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x34, 0x12]));\n   * assert(deserializer.deserializeU16() === 4660);\n   * ```\n   */\n  deserializeU16(): Uint16 {\n    return new DataView(this.read(2)).getUint16(0, true);\n  }\n\n  /**\n   * Deserializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU32() === 305419896);\n   * ```\n   */\n  deserializeU32(): Uint32 {\n    return new DataView(this.read(4)).getUint32(0, true);\n  }\n\n  /**\n   * Deserializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU64() === 1311768467750121216);\n   * ```\n   */\n  deserializeU64(): Uint64 {\n    const low = this.deserializeU32();\n    const high = this.deserializeU32();\n\n    // combine the two 32-bit values and return (little endian)\n    return BigInt((BigInt(high) << BigInt(32)) | BigInt(low));\n  }\n\n  /**\n   * Deserializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  deserializeU128(): Uint128 {\n    const low = this.deserializeU64();\n    const high = this.deserializeU64();\n\n    // combine the two 64-bit values and return (little endian)\n    return BigInt((high << BigInt(64)) | low);\n  }\n\n  /**\n   * Deserializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Thirty-two bytes. Binary format in little-endian representation.\n   */\n  deserializeU256(): Uint256 {\n    const low = this.deserializeU128();\n    const high = this.deserializeU128();\n\n    // combine the two 128-bit values and return (little endian)\n    return BigInt((high << BigInt(128)) | low);\n  }\n\n  /**\n   * Deserializes a uleb128 encoded uint32 number.\n   *\n   * BCS use uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  deserializeUleb128AsU32(): Uint32 {\n    let value: bigint = BigInt(0);\n    let shift = 0;\n\n    while (value < MAX_U32_NUMBER) {\n      const byte = this.deserializeU8();\n      value |= BigInt(byte & 0x7f) << BigInt(shift);\n\n      if ((byte & 0x80) === 0) {\n        break;\n      }\n      shift += 7;\n    }\n\n    if (value > MAX_U32_NUMBER) {\n      throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n    }\n\n    return Number(value);\n  }\n\n  /**\n   * Helper function that primarily exists to support alternative syntax for deserialization.\n   * That is, if we have a `const deserializer: new Deserializer(...)`, instead of having to use\n   * `MyClass.deserialize(deserializer)`, we can call `deserializer.deserialize(MyClass)`.\n   *\n   * @example const deserializer = new Deserializer(new Uint8Array([1, 2, 3]));\n   * const value = deserializer.deserialize(MyClass); // where MyClass has a `deserialize` function\n   * // value is now an instance of MyClass\n   * // equivalent to `const value = MyClass.deserialize(deserializer)`\n   * @param cls The BCS-deserializable class to deserialize the buffered bytes into.\n   *\n   * @returns the deserialized value of class type T\n   */\n  deserialize<T>(cls: Deserializable<T>): T {\n    // NOTE: `deserialize` in `cls.deserialize(this)` here is a static method defined in `cls`,\n    // It is separate from the `deserialize` instance method defined here in Deserializer.\n    return cls.deserialize(this);\n  }\n\n  /**\n   * Deserializes an array of BCS Deserializable values given an existing Deserializer\n   * instance with a loaded byte buffer.\n   *\n   * @param cls The BCS-deserializable class to deserialize the buffered bytes into.\n   * @example\n   * // serialize a vector of addresses\n   * const addresses = new Array<AccountAddress>(\n   *   AccountAddress.from(\"0x1\"),\n   *   AccountAddress.from(\"0x2\"),\n   *   AccountAddress.from(\"0xa\"),\n   *   AccountAddress.from(\"0xb\"),\n   * );\n   * const serializer = new Serializer();\n   * serializer.serializeVector(addresses);\n   * const serializedBytes = serializer.toUint8Array();\n   *\n   * // deserialize the bytes into an array of addresses\n   * const deserializer = new Deserializer(serializedBytes);\n   * const deserializedAddresses = deserializer.deserializeVector(AccountAddress);\n   * // deserializedAddresses is now an array of AccountAddress instances\n   * @returns an array of deserialized values of type T\n   */\n  deserializeVector<T>(cls: Deserializable<T>): Array<T> {\n    const length = this.deserializeUleb128AsU32();\n    const vector = new Array<T>();\n    for (let i = 0; i < length; i += 1) {\n      vector.push(this.deserialize(cls));\n    }\n    return vector;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../serializer\";\nimport { Deserializer } from \"../deserializer\";\nimport { HexInput } from \"../../types\";\nimport { Hex } from \"../../core/hex\";\nimport { TransactionArgument } from \"../../transactions/instances/transactionArgument\";\n\n/**\n *  This class exists to represent a contiguous sequence of already serialized BCS-bytes.\n *\n *  It differs from most other Serializable classes in that its internal byte buffer is serialized to BCS\n *  bytes exactly as-is, without prepending the length of the bytes.\n *\n *  If you want to write your own serialization function and pass the bytes as a transaction argument,\n *  you should use this class.\n *\n *  This class is also more generally used to represent type-agnostic BCS bytes as a vector<u8>.\n *\n *  An example of this is the bytes resulting from entry function arguments that have been serialized\n *  for an entry function.\n *\n *  @example\n *  const yourCustomSerializedBytes = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);\n *  const fixedBytes = new FixedBytes(yourCustomSerializedBytes);\n *  const payload = await generateTransactionPayload({\n *    function: \"0xbeefcafe::your_module::your_function_that_requires_custom_serialization\",\n *    functionArguments: [yourCustomBytes],\n *  });\n *\n *  For example, if you store each of the 32 bytes for an address as a U8 in a MoveVector<U8>, when you\n *  serialize that MoveVector<U8>, it will be serialized to 33 bytes. If you solely want to pass around\n *  the 32 bytes as a Serializable class that *does not* prepend the length to the BCS-serialized representation,\n *  use this class.\n *\n * @params value: HexInput representing a sequence of Uint8 bytes\n * @returns a Serializable FixedBytes instance, which when serialized, does not prepend the length of the bytes\n * @see EntryFunctionBytes\n */\nexport class FixedBytes extends Serializable implements TransactionArgument {\n  public value: Uint8Array;\n\n  constructor(value: HexInput) {\n    super();\n    this.value = Hex.fromHexInput(value).toUint8Array();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    serializer.serialize(this);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer, length: number): FixedBytes {\n    const bytes = deserializer.deserializeFixedBytes(length);\n    return new FixedBytes(bytes);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../serializer\";\nimport { Deserializer } from \"../deserializer\";\nimport { FixedBytes } from \"./fixedBytes\";\nimport { EntryFunctionArgument } from \"../../transactions/instances/transactionArgument\";\nimport { HexInput } from \"../../types\";\n\n/**\n * This class exists solely to represent a sequence of fixed bytes as a serialized entry function, because\n * serializing an entry function appends a prefix that's *only* used for entry function arguments.\n *\n * NOTE: Attempting to use this class for a serialized script function will result in erroneous\n * and unexpected behavior.\n *\n * If you wish to convert this class back to a TransactionArgument, you must know the type\n * of the argument beforehand, and use the appropriate class to deserialize the bytes within\n * an instance of this class.\n */\nexport class EntryFunctionBytes extends Serializable implements EntryFunctionArgument {\n  public readonly value: FixedBytes;\n\n  private constructor(value: HexInput) {\n    super();\n    this.value = new FixedBytes(value);\n  }\n\n  // Note that to see the Move, BCS-serialized representation of the underlying fixed byte vector,\n  // we must not serialize the length prefix.\n  //\n  // In other words, this class is only used to represent a sequence of bytes that are already\n  // BCS-serialized as a type. To represent those bytes accurately, the BCS-serialized form is the same exact\n  // representation.\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.value);\n  }\n\n  // When we serialize these bytes as an entry function argument, we need to\n  // serialize the length prefix. This essentially converts the underlying fixed byte vector to a type-agnostic\n  // byte vector to an `any` type.\n  // NOTE: This, and the lack of a `serializeForScriptFunction`, is the only meaningful difference between this\n  // class and FixedBytes.\n  serializeForEntryFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.value.value.length);\n    serializer.serialize(this);\n  }\n\n  /**\n   * The only way to create an instance of this class is to use this static method.\n   *\n   * This function should only be used when deserializing a sequence of EntryFunctionPayload arguments.\n   * @param deserializer the deserializer instance with the buffered bytes\n   * @param length the length of the bytes to deserialize\n   * @returns an instance of this class, which will now only be usable as an EntryFunctionArgument\n   */\n  static deserialize(deserializer: Deserializer, length: number): EntryFunctionBytes {\n    const fixedBytes = FixedBytes.deserialize(deserializer, length);\n    return new EntryFunctionBytes(fixedBytes.value);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  MAX_U128_BIG_INT,\n  MAX_U16_NUMBER,\n  MAX_U32_NUMBER,\n  MAX_U64_BIG_INT,\n  MAX_U8_NUMBER,\n  MAX_U256_BIG_INT,\n} from \"../consts\";\nimport { Deserializer } from \"../deserializer\";\nimport { Serializable, Serializer, ensureBoolean, validateNumberInRange } from \"../serializer\";\nimport { TransactionArgument } from \"../../transactions/instances/transactionArgument\";\nimport { AnyNumber, Uint16, Uint32, Uint8, ScriptTransactionArgumentVariants } from \"../../types\";\n\nexport class Bool extends Serializable implements TransactionArgument {\n  public readonly value: boolean;\n\n  constructor(value: boolean) {\n    super();\n    ensureBoolean(value);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBool(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.Bool);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): Bool {\n    return new Bool(deserializer.deserializeBool());\n  }\n}\n\nexport class U8 extends Serializable implements TransactionArgument {\n  public readonly value: Uint8;\n\n  constructor(value: Uint8) {\n    super();\n    validateNumberInRange(value, 0, MAX_U8_NUMBER);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U8);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U8 {\n    return new U8(deserializer.deserializeU8());\n  }\n}\n\nexport class U16 extends Serializable implements TransactionArgument {\n  public readonly value: Uint16;\n\n  constructor(value: Uint16) {\n    super();\n    validateNumberInRange(value, 0, MAX_U16_NUMBER);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU16(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U16);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U16 {\n    return new U16(deserializer.deserializeU16());\n  }\n}\n\nexport class U32 extends Serializable implements TransactionArgument {\n  public readonly value: Uint32;\n\n  constructor(value: Uint32) {\n    super();\n    validateNumberInRange(value, 0, MAX_U32_NUMBER);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U32);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U32 {\n    return new U32(deserializer.deserializeU32());\n  }\n}\n\nexport class U64 extends Serializable implements TransactionArgument {\n  public readonly value: bigint;\n\n  constructor(value: AnyNumber) {\n    super();\n    validateNumberInRange(value, BigInt(0), MAX_U64_BIG_INT);\n    this.value = BigInt(value);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU64(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U64);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U64 {\n    return new U64(deserializer.deserializeU64());\n  }\n}\n\nexport class U128 extends Serializable implements TransactionArgument {\n  public readonly value: bigint;\n\n  constructor(value: AnyNumber) {\n    super();\n    validateNumberInRange(value, BigInt(0), MAX_U128_BIG_INT);\n    this.value = BigInt(value);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU128(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U128);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U128 {\n    return new U128(deserializer.deserializeU128());\n  }\n}\n\nexport class U256 extends Serializable implements TransactionArgument {\n  public readonly value: bigint;\n\n  constructor(value: AnyNumber) {\n    super();\n    validateNumberInRange(value, BigInt(0), MAX_U256_BIG_INT);\n    this.value = BigInt(value);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU256(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U256);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U256 {\n    return new U256(deserializer.deserializeU256());\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Bool, U128, U16, U256, U32, U64, U8 } from \"./movePrimitives\";\nimport { Serializable, Serializer } from \"../serializer\";\nimport { Deserializable, Deserializer } from \"../deserializer\";\nimport { AnyNumber, HexInput, ScriptTransactionArgumentVariants } from \"../../types\";\nimport { Hex } from \"../../core/hex\";\nimport { EntryFunctionArgument, TransactionArgument } from \"../../transactions/instances/transactionArgument\";\n\n/**\n * This class is the Aptos Typescript SDK representation of a Move `vector<T>`,\n * where `T` represents either a primitive type (`bool`, `u8`, `u64`, ...)\n * or a BCS-serializable struct itself.\n *\n * It is a BCS-serializable, array-like type that contains an array of values of type `T`,\n * where `T` is a class that implements `Serializable`.\n *\n * The purpose of this class is to facilitate easy construction of BCS-serializable\n * Move `vector<T>` types.\n *\n * @example\n * // in Move: `vector<u8> [1, 2, 3, 4];`\n * const vecOfU8s = new MoveVector<U8>([new U8(1), new U8(2), new U8(3), new U8(4)]);\n * // in Move: `std::bcs::to_bytes(vector<u8> [1, 2, 3, 4]);`\n * const bcsBytes = vecOfU8s.toUint8Array();\n *\n * // vector<vector<u8>> [ vector<u8> [1], vector<u8> [1, 2, 3, 4], vector<u8> [5, 6, 7, 8] ];\n * const vecOfVecs = new MoveVector<MoveVector<U8>>([\n *   new MoveVector<U8>([new U8(1)]),\n *   MoveVector.U8([1, 2, 3, 4]),\n *   MoveVector.U8([5, 6, 7, 8]),\n * ]);\n *\n * // vector<Option<u8>> [ std::option::some<u8>(1), std::option::some<u8>(2) ];\n * const vecOfOptionU8s = new MoveVector<MoveOption<U8>>([\n *    MoveOption.U8(1),\n *    MoveOption.U8(2),\n * ]);\n *\n * // vector<MoveString> [ std::string::utf8(b\"hello\"), std::string::utf8(b\"world\") ];\n * const vecOfStrings = new MoveVector([new MoveString(\"hello\"), new MoveString(\"world\")]);\n * const vecOfStrings2 = MoveVector.MoveString([\"hello\", \"world\"]);\n *\n * @params\n * values: an Array<T> of values where T is a class that implements Serializable\n * @returns a `MoveVector<T>` with the values `values`\n */\nexport class MoveVector<T extends Serializable & EntryFunctionArgument>\n  extends Serializable\n  implements TransactionArgument\n{\n  public values: Array<T>;\n\n  constructor(values: Array<T>) {\n    super();\n    this.values = values;\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  /**\n   * NOTE: This function will only work when the inner values in the `MoveVector` are `U8`s.\n   * @param serializer\n   */\n  serializeForScriptFunction(serializer: Serializer): void {\n    // runtime check to ensure that you can't serialize anything other than vector<u8>\n    const isU8 = this.values[0] instanceof U8;\n    // if the inner array is length 0, we can't check the type because it has no instance, so we assume it's a u8\n    // it may not be, but we don't care because regardless of a vector's type,\n    // a zero-length vector is serialized to a single byte value: 0\n    if (!isU8 && this.values[0] !== undefined) {\n      throw new Error(\"Script function arguments only accept u8 vectors\");\n    }\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U8Vector);\n    serializer.serialize(this);\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U8s from an array of numbers.\n   *\n   * @example\n   * const v = MoveVector.U8([1, 2, 3, 4]);\n   * @params values: an array of `numbers` to convert to U8s\n   * @returns a `MoveVector<U8>`\n   */\n  static U8(values: Array<number> | HexInput): MoveVector<U8> {\n    let numbers: Array<number>;\n\n    if (Array.isArray(values) && typeof values[0] === \"number\") {\n      numbers = values;\n    } else if (typeof values === \"string\") {\n      const hex = Hex.fromHexInput(values);\n      numbers = Array.from(hex.toUint8Array());\n    } else if (values instanceof Uint8Array) {\n      numbers = Array.from(values);\n    } else {\n      throw new Error(\"Invalid input type\");\n    }\n\n    return new MoveVector<U8>(numbers.map((v) => new U8(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U16s from an array of numbers.\n   *\n   * @example\n   * const v = MoveVector.U16([1, 2, 3, 4]);\n   * @params values: an array of `numbers` to convert to U16s\n   * @returns a `MoveVector<U16>`\n   */\n  static U16(values: Array<number>): MoveVector<U16> {\n    return new MoveVector<U16>(values.map((v) => new U16(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U32s from an array of numbers.\n   *\n   * @example\n   * const v = MoveVector.U32([1, 2, 3, 4]);\n   * @params values: an array of `numbers` to convert to U32s\n   * @returns a `MoveVector<U32>`\n   */\n  static U32(values: Array<number>): MoveVector<U32> {\n    return new MoveVector<U32>(values.map((v) => new U32(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U64s from an array of numbers or bigints.\n   *\n   * @example\n   * const v = MoveVector.U64([1, 2, 3, 4]);\n   * @params values: an array of numbers of type `number | bigint` to convert to U64s\n   * @returns a `MoveVector<U64>`\n   */\n  static U64(values: Array<AnyNumber>): MoveVector<U64> {\n    return new MoveVector<U64>(values.map((v) => new U64(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U128s from an array of numbers or bigints.\n   *\n   * @example\n   * const v = MoveVector.U128([1, 2, 3, 4]);\n   * @params values: an array of numbers of type `number | bigint` to convert to U128s\n   * @returns a `MoveVector<U128>`\n   */\n  static U128(values: Array<AnyNumber>): MoveVector<U128> {\n    return new MoveVector<U128>(values.map((v) => new U128(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U256s from an array of numbers or bigints.\n   *\n   * @example\n   * const v = MoveVector.U256([1, 2, 3, 4]);\n   * @params values: an array of numbers of type `number | bigint` to convert to U256s\n   * @returns a `MoveVector<U256>`\n   */\n  static U256(values: Array<AnyNumber>): MoveVector<U256> {\n    return new MoveVector<U256>(values.map((v) => new U256(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of Bools from an array of booleans.\n   *\n   * @example\n   * const v = MoveVector.Bool([true, false, true, false]);\n   * @params values: an array of `bools` to convert to Bools\n   * @returns a `MoveVector<Bool>`\n   */\n  static Bool(values: Array<boolean>): MoveVector<Bool> {\n    return new MoveVector<Bool>(values.map((v) => new Bool(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of MoveStrings from an array of strings.\n   *\n   * @example\n   * const v = MoveVector.MoveString([\"hello\", \"world\"]);\n   * @params values: an array of `strings` to convert to MoveStrings\n   * @returns a `MoveVector<MoveString>`\n   */\n  static MoveString(values: Array<string>): MoveVector<MoveString> {\n    return new MoveVector<MoveString>(values.map((v) => new MoveString(v)));\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeVector(this.values);\n  }\n\n  /**\n   * Deserialize a MoveVector of type T, specifically where T is a Serializable and Deserializable type.\n   *\n   * NOTE: This only works with a depth of one. Generics will not work.\n   *\n   * NOTE: This will not work with types that aren't of the Serializable class.\n   *\n   * If you're looking for a more flexible deserialization function, you can use the deserializeVector function\n   * in the Deserializer class.\n   *\n   * @example\n   * const vec = MoveVector.deserialize(deserializer, U64);\n   * @params deserializer: the Deserializer instance to use, with bytes loaded into it already.\n   * cls: the class to typecast the input values to, must be a Serializable and Deserializable type.\n   * @returns a MoveVector of the corresponding class T\n   * *\n   */\n  static deserialize<T extends Serializable & EntryFunctionArgument>(\n    deserializer: Deserializer,\n    cls: Deserializable<T>,\n  ): MoveVector<T> {\n    const length = deserializer.deserializeUleb128AsU32();\n    const values = new Array<T>();\n    for (let i = 0; i < length; i += 1) {\n      values.push(cls.deserialize(deserializer));\n    }\n    return new MoveVector(values);\n  }\n}\n\nexport class MoveString extends Serializable implements TransactionArgument {\n  public value: string;\n\n  constructor(value: string) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    // Serialize the string as a fixed byte string, i.e., without the length prefix\n    const fixedStringBytes = this.bcsToBytes().slice(1);\n    // Put those bytes into a vector<u8> and serialize it as a script function argument\n    const vectorU8 = MoveVector.U8(fixedStringBytes);\n    vectorU8.serializeForScriptFunction(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): MoveString {\n    return new MoveString(deserializer.deserializeStr());\n  }\n}\n\nexport class MoveOption<T extends Serializable & EntryFunctionArgument>\n  extends Serializable\n  implements EntryFunctionArgument\n{\n  private vec: MoveVector<T>;\n\n  public readonly value?: T;\n\n  constructor(value?: T | null) {\n    super();\n    if (typeof value !== \"undefined\" && value !== null) {\n      this.vec = new MoveVector([value]);\n    } else {\n      this.vec = new MoveVector([]);\n    }\n\n    [this.value] = this.vec.values;\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  /**\n   * Retrieves the inner value of the MoveOption.\n   *\n   * This method is inspired by Rust's `Option<T>.unwrap()`.\n   * In Rust, attempting to unwrap a `None` value results in a panic.\n   *\n   * Similarly, this method will throw an error if the value is not present.\n   *\n   * @example\n   * const option = new MoveOption<Bool>(new Bool(true));\n   * const value = option.unwrap();  // Returns the Bool instance\n   *\n   * @throws {Error} Throws an error if the MoveOption does not contain a value.\n   *\n   * @returns {T} The contained value if present.\n   */\n  unwrap(): T {\n    if (!this.isSome()) {\n      throw new Error(\"Called unwrap on a MoveOption with no value\");\n    } else {\n      return this.vec.values[0];\n    }\n  }\n\n  // Check if the MoveOption has a value.\n  isSome(): boolean {\n    return this.vec.values.length === 1;\n  }\n\n  serialize(serializer: Serializer): void {\n    // serialize 0 or 1\n    // if 1, serialize the value\n    this.vec.serialize(serializer);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U8> from a `number` or `undefined`.\n   *\n   * @example\n   * MoveOption.U8(1).isSome() === true;\n   * MoveOption.U8().isSome() === false;\n   * MoveOption.U8(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U8> with an inner value `value`\n   */\n  static U8(value?: number | null): MoveOption<U8> {\n    return new MoveOption<U8>(value !== null && value !== undefined ? new U8(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U16> from a `number` or `undefined`.\n   *\n   * @example\n   * MoveOption.U16(1).isSome() === true;\n   * MoveOption.U16().isSome() === false;\n   * MoveOption.U16(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U16> with an inner value `value`\n   */\n  static U16(value?: number | null): MoveOption<U16> {\n    return new MoveOption<U16>(value !== null && value !== undefined ? new U16(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U32> from a `number` or `undefined`.\n   *\n   * @example\n   * MoveOption.U32(1).isSome() === true;\n   * MoveOption.U32().isSome() === false;\n   * MoveOption.U32(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U32> with an inner value `value`\n   */\n  static U32(value?: number | null): MoveOption<U32> {\n    return new MoveOption<U32>(value !== null && value !== undefined ? new U32(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U64> from a `number` or a `bigint` or `undefined`.\n   *\n   * @example\n   * MoveOption.U64(1).isSome() === true;\n   * MoveOption.U64().isSome() === false;\n   * MoveOption.U64(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U64> with an inner value `value`\n   */\n  static U64(value?: AnyNumber | null): MoveOption<U64> {\n    return new MoveOption<U64>(value !== null && value !== undefined ? new U64(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U128> from a `number` or a `bigint` or `undefined`.\n   *\n   * @example\n   * MoveOption.U128(1).isSome() === true;\n   * MoveOption.U128().isSome() === false;\n   * MoveOption.U128(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U128> with an inner value `value`\n   */\n  static U128(value?: AnyNumber | null): MoveOption<U128> {\n    return new MoveOption<U128>(value !== null && value !== undefined ? new U128(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U256> from a `number` or a `bigint` or `undefined`.\n   *\n   * @example\n   * MoveOption.U256(1).isSome() === true;\n   * MoveOption.U256().isSome() === false;\n   * MoveOption.U256(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U256> with an inner value `value`\n   */\n  static U256(value?: AnyNumber | null): MoveOption<U256> {\n    return new MoveOption<U256>(value !== null && value !== undefined ? new U256(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<Bool> from a `boolean` or `undefined`.\n   *\n   * @example\n   * MoveOption.Bool(true).isSome() === true;\n   * MoveOption.Bool().isSome() === false;\n   * MoveOption.Bool(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<Bool> with an inner value `value`\n   */\n  static Bool(value?: boolean | null): MoveOption<Bool> {\n    return new MoveOption<Bool>(value !== null && value !== undefined ? new Bool(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<MoveString> from a `string` or `undefined`.\n   *\n   * @example\n   * MoveOption.MoveString(\"hello\").isSome() === true;\n   * MoveOption.MoveString(\"\").isSome() === true;\n   * MoveOption.MoveString().isSome() === false;\n   * MoveOption.MoveString(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<MoveString> with an inner value `value`\n   */\n  static MoveString(value?: string | null): MoveOption<MoveString> {\n    return new MoveOption<MoveString>(value !== null && value !== undefined ? new MoveString(value) : undefined);\n  }\n\n  static deserialize<U extends Serializable & EntryFunctionArgument>(\n    deserializer: Deserializer,\n    cls: Deserializable<U>,\n  ): MoveOption<U> {\n    const vector = MoveVector.deserialize(deserializer, cls);\n    return new MoveOption(vector.values[0]);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport nacl from \"tweetnacl\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Hex } from \"../hex\";\nimport { HexInput, SigningScheme as AuthenticationKeyScheme } from \"../../types\";\nimport { CKDPriv, deriveKey, HARDENED_OFFSET, isValidHardenedPath, mnemonicToSeed, splitPath } from \"./hdKey\";\nimport { PrivateKey } from \"./privateKey\";\nimport { AccountPublicKey, VerifySignatureArgs } from \"./publicKey\";\nimport { Signature } from \"./signature\";\n\n/**\n * Represents the public key of an Ed25519 key pair.\n *\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263) Aptos supports\n * `Legacy` and `Unified` authentication keys.\n *\n * Ed25519 scheme is represented in the SDK as `Legacy authentication key` and also\n * as `AnyPublicKey` that represents any `Unified authentication key`\n */\nexport class Ed25519PublicKey extends AccountPublicKey {\n  /**\n   * Length of an Ed25519 public key\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * Bytes of the public key\n   * @private\n   */\n  private readonly key: Hex;\n\n  /**\n   * Create a new PublicKey instance from a Uint8Array or String.\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const hex = Hex.fromHexInput(hexInput);\n    if (hex.toUint8Array().length !== Ed25519PublicKey.LENGTH) {\n      throw new Error(`PublicKey length should be ${Ed25519PublicKey.LENGTH}`);\n    }\n    this.key = hex;\n  }\n\n  // region AccountPublicKey\n\n  /**\n   * Verifies a signed data with a public key\n   * @param args.message a signed message\n   * @param args.signature the signature of the message\n   */\n  verifySignature(args: VerifySignatureArgs): boolean {\n    const { message, signature } = args;\n    if (!(signature instanceof Ed25519Signature)) {\n      return false;\n    }\n\n    const messageBytes = Hex.fromHexInput(message).toUint8Array();\n    const signatureBytes = signature.toUint8Array();\n    const publicKeyBytes = this.key.toUint8Array();\n    return nacl.sign.detached.verify(messageBytes, signatureBytes, publicKeyBytes);\n  }\n\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.Ed25519,\n      input: this.toUint8Array(),\n    });\n  }\n\n  /**\n   * Get the public key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the public key\n   */\n  toUint8Array(): Uint8Array {\n    return this.key.toUint8Array();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.key.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519PublicKey(bytes);\n  }\n\n  // endregion\n\n  /**\n   * @deprecated use `instanceof Ed25519PublicKey` instead.\n   */\n  static isPublicKey(publicKey: AccountPublicKey): publicKey is Ed25519PublicKey {\n    return publicKey instanceof Ed25519PublicKey;\n  }\n}\n\n/**\n * Represents the private key of an Ed25519 key pair.\n */\nexport class Ed25519PrivateKey extends Serializable implements PrivateKey {\n  /**\n   * Length of an Ed25519 private key\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The Ed25519 key seed to use for BIP-32 compatibility\n   * See more {@link https://github.com/satoshilabs/slips/blob/master/slip-0010.md}\n   */\n  static readonly SLIP_0010_SEED = \"ed25519 seed\";\n\n  /**\n   * The Ed25519 signing key\n   * @private\n   */\n  private readonly signingKeyPair: nacl.SignKeyPair;\n\n  // region Constructors\n\n  /**\n   * Create a new PrivateKey instance from a Uint8Array or String.\n   *\n   * @param hexInput HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const privateKeyHex = Hex.fromHexInput(hexInput);\n    if (privateKeyHex.toUint8Array().length !== Ed25519PrivateKey.LENGTH) {\n      throw new Error(`PrivateKey length should be ${Ed25519PrivateKey.LENGTH}`);\n    }\n\n    // Create keyPair from Private key in Uint8Array format\n    this.signingKeyPair = nacl.sign.keyPair.fromSeed(privateKeyHex.toUint8Array().slice(0, Ed25519PrivateKey.LENGTH));\n  }\n\n  /**\n   * Generate a new random private key.\n   *\n   * @returns Ed25519PrivateKey\n   */\n  static generate(): Ed25519PrivateKey {\n    const keyPair = nacl.sign.keyPair();\n    return new Ed25519PrivateKey(keyPair.secretKey.slice(0, Ed25519PrivateKey.LENGTH));\n  }\n\n  /**\n   * Derives a private key from a mnemonic seed phrase.\n   *\n   * To derive multiple keys from the same phrase, change the path\n   *\n   * IMPORTANT: Ed25519 supports hardened derivation only (since it lacks a key homomorphism,\n   * so non-hardened derivation cannot work)\n   *\n   * @param path the BIP44 path\n   * @param mnemonics the mnemonic seed phrase\n   */\n  static fromDerivationPath(path: string, mnemonics: string): Ed25519PrivateKey {\n    if (!isValidHardenedPath(path)) {\n      throw new Error(`Invalid derivation path ${path}`);\n    }\n    return Ed25519PrivateKey.fromDerivationPathInner(path, mnemonicToSeed(mnemonics));\n  }\n\n  /**\n   * A private inner function so we can separate from the main fromDerivationPath() method\n   * to add tests to verify we create the keys correctly.\n   *\n   * @param path the BIP44 path\n   * @param seed the seed phrase created by the mnemonics\n   * @param offset the offset used for key derivation, defaults to 0x80000000\n   * @returns\n   */\n  private static fromDerivationPathInner(path: string, seed: Uint8Array, offset = HARDENED_OFFSET): Ed25519PrivateKey {\n    const { key, chainCode } = deriveKey(Ed25519PrivateKey.SLIP_0010_SEED, seed);\n\n    const segments = splitPath(path).map((el) => parseInt(el, 10));\n\n    // Derive the child key based on the path\n    const { key: privateKey } = segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n      key,\n      chainCode,\n    });\n    return new Ed25519PrivateKey(privateKey);\n  }\n\n  // endregion\n\n  // region PrivateKey\n\n  /**\n   * Derive the Ed25519PublicKey for this private key.\n   *\n   * @returns Ed25519PublicKey\n   */\n  publicKey(): Ed25519PublicKey {\n    const bytes = this.signingKeyPair.publicKey;\n    return new Ed25519PublicKey(bytes);\n  }\n\n  /**\n   * Sign the given message with the private key.\n   *\n   * @param message in HexInput format\n   * @returns Signature\n   */\n  sign(message: HexInput): Ed25519Signature {\n    const messageBytes = Hex.fromHexInput(message).toUint8Array();\n    const signatureBytes = nacl.sign.detached(messageBytes, this.signingKeyPair.secretKey);\n    return new Ed25519Signature(signatureBytes);\n  }\n\n  /**\n   * Get the private key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the private key\n   */\n  toUint8Array(): Uint8Array {\n    return this.signingKeyPair.secretKey.slice(0, Ed25519PrivateKey.LENGTH);\n  }\n\n  /**\n   * Get the private key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the private key\n   */\n  toString(): string {\n    return Hex.fromHexInput(this.toUint8Array()).toString();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519PrivateKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519PrivateKey(bytes);\n  }\n\n  // endregion\n\n  /**\n   * @deprecated use `instanceof Ed25519PrivateKey` instead.\n   */\n  static isPrivateKey(privateKey: PrivateKey): privateKey is Ed25519PrivateKey {\n    return privateKey instanceof Ed25519PrivateKey;\n  }\n}\n\n/**\n * A signature of a message signed using an Ed25519 private key\n */\nexport class Ed25519Signature extends Signature {\n  /**\n   * Length of an Ed25519 signature\n   */\n  static readonly LENGTH = 64;\n\n  /**\n   * The signature bytes\n   * @private\n   */\n  private readonly data: Hex;\n\n  // region Constructors\n\n  constructor(hexInput: HexInput) {\n    super();\n    const data = Hex.fromHexInput(hexInput);\n    if (data.toUint8Array().length !== Ed25519Signature.LENGTH) {\n      throw new Error(`Signature length should be ${Ed25519Signature.LENGTH}`);\n    }\n    this.data = data;\n  }\n\n  // endregion\n\n  // region Signature\n\n  toUint8Array(): Uint8Array {\n    return this.data.toUint8Array();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.data.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519Signature(bytes);\n  }\n\n  // endregion\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { AccountAddress } from \"./accountAddress\";\nimport type { AccountPublicKey } from \"./crypto\";\nimport { Hex } from \"./hex\";\nimport { AuthenticationKeyScheme, HexInput } from \"../types\";\nimport { Serializable, Serializer } from \"../bcs/serializer\";\nimport { Deserializer } from \"../bcs/deserializer\";\n\n/**\n * Each account stores an authentication key. Authentication key enables account owners to rotate\n * their private key(s) associated with the account without changing the address that hosts their account.\n * @see {@link https://aptos.dev/concepts/accounts | Account Basics}\n *\n * Account addresses can be derived from AuthenticationKey\n */\nexport class AuthenticationKey extends Serializable {\n  /**\n   * An authentication key is always a SHA3-256 hash of data, and is always 32 bytes.\n   *\n   * The data to hash depends on the underlying public key type and the derivation scheme.\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The raw bytes of the authentication key.\n   */\n  public readonly data: Hex;\n\n  constructor(args: { data: HexInput }) {\n    super();\n    const { data } = args;\n    const hex = Hex.fromHexInput(data);\n    if (hex.toUint8Array().length !== AuthenticationKey.LENGTH) {\n      throw new Error(`Authentication Key length should be ${AuthenticationKey.LENGTH}`);\n    }\n    this.data = hex;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data.toUint8Array());\n  }\n\n  /**\n   * Deserialize an AuthenticationKey from the byte buffer in a Deserializer instance.\n   * @param deserializer The deserializer to deserialize the AuthenticationKey from.\n   * @returns An instance of AuthenticationKey.\n   */\n  static deserialize(deserializer: Deserializer): AuthenticationKey {\n    const bytes = deserializer.deserializeFixedBytes(AuthenticationKey.LENGTH);\n    return new AuthenticationKey({ data: bytes });\n  }\n\n  toString(): string {\n    return this.data.toString();\n  }\n\n  toUint8Array(): Uint8Array {\n    return this.data.toUint8Array();\n  }\n\n  static fromSchemeAndBytes(args: { scheme: AuthenticationKeyScheme; input: HexInput }): AuthenticationKey {\n    const { scheme, input } = args;\n    const inputBytes = Hex.fromHexInput(input).toUint8Array();\n    const hashInput = new Uint8Array([...inputBytes, scheme]);\n    const hash = sha3Hash.create();\n    hash.update(hashInput);\n    const hashDigest = hash.digest();\n    return new AuthenticationKey({ data: hashDigest });\n  }\n\n  /**\n   * @deprecated Use `fromPublicKey` instead\n   * Derives an AuthenticationKey from the public key seed bytes and an explicit derivation scheme.\n   *\n   * This facilitates targeting a specific scheme for deriving an authentication key from a public key.\n   *\n   * @param args - the public key and scheme to use for the derivation\n   */\n  public static fromPublicKeyAndScheme(args: { publicKey: AccountPublicKey; scheme: AuthenticationKeyScheme }) {\n    const { publicKey } = args;\n    return publicKey.authKey();\n  }\n\n  /**\n   * Converts a PublicKey(s) to an AuthenticationKey, using the derivation scheme inferred from the\n   * instance of the PublicKey type passed in.\n   *\n   * @param args.publicKey\n   * @returns AuthenticationKey\n   */\n  static fromPublicKey(args: { publicKey: AccountPublicKey }): AuthenticationKey {\n    const { publicKey } = args;\n    return publicKey.authKey();\n  }\n\n  /**\n   * Derives an account address from an AuthenticationKey. Since an AccountAddress is also 32 bytes,\n   * the AuthenticationKey bytes are directly translated to an AccountAddress.\n   *\n   * @returns AccountAddress\n   */\n  derivedAddress(): AccountAddress {\n    return new AccountAddress(this.data.toUint8Array());\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport * as bip39 from \"@scure/bip39\";\n\nexport type DerivedKeys = {\n  key: Uint8Array;\n  chainCode: Uint8Array;\n};\n\n/**\n * Aptos derive path is 637\n */\nexport const APTOS_HARDENED_REGEX = /^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'?$/;\nexport const APTOS_BIP44_REGEX = /^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+\\/[0-9]+$/;\n\n/**\n * A list of supported key types and associated seeds\n */\nexport enum KeyType {\n  ED25519 = \"ed25519 seed\",\n}\n\nexport const HARDENED_OFFSET = 0x80000000;\n\n/**\n * Aptos derive path is 637\n *\n * Parse and validate a path that is compliant to BIP-44 in form m/44'/637'/{account_index}'/{change_index}/{address_index}\n * for Secp256k1\n *\n * Note that for secp256k1, last two components must be non-hardened.\n *\n * @param path path string (e.g. `m/44'/637'/0'/0/0`).\n */\nexport function isValidBIP44Path(path: string): boolean {\n  return APTOS_BIP44_REGEX.test(path);\n}\n\n/**\n * Aptos derive path is 637\n *\n * Parse and validate a path that is compliant to SLIP-0010 and BIP-44\n * in form m/44'/637'/{account_index}'/{change_index}'/{address_index}'.\n * See SLIP-0010 {@link https://github.com/satoshilabs/slips/blob/master/slip-0044.md}\n * See BIP-44 {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n *\n * Note that for Ed25519, all components must be hardened.\n * This is because non-hardened [PK] derivation would not work due to Ed25519's lack of a key homomorphism.\n * Specifically, you cannot derive the PK associated with derivation path a/b/c given the PK of a/b.\n * This is because the PK in Ed25519 is, more or less, computed as 𝑔𝐻(𝑠𝑘),\n * with the hash function breaking the homomorphism.\n *\n * @param path path string (e.g. `m/44'/637'/0'/0'/0'`).\n */\nexport function isValidHardenedPath(path: string): boolean {\n  return APTOS_HARDENED_REGEX.test(path);\n}\n\nexport const deriveKey = (hashSeed: Uint8Array | string, data: Uint8Array | string): DerivedKeys => {\n  const digest = hmac.create(sha512, hashSeed).update(data).digest();\n  return {\n    key: digest.slice(0, 32),\n    chainCode: digest.slice(32),\n  };\n};\n\n/**\n * Derive a child key from the private key\n * @param key\n * @param chainCode\n * @param index\n * @constructor\n */\nexport const CKDPriv = ({ key, chainCode }: DerivedKeys, index: number): DerivedKeys => {\n  const buffer = new ArrayBuffer(4);\n  new DataView(buffer).setUint32(0, index);\n  const indexBytes = new Uint8Array(buffer);\n  const zero = new Uint8Array([0]);\n  const data = new Uint8Array([...zero, ...key, ...indexBytes]);\n  return deriveKey(chainCode, data);\n};\n\nconst removeApostrophes = (val: string): string => val.replace(\"'\", \"\");\n\n/**\n * Splits derive path into segments\n * @param path\n */\nexport const splitPath = (path: string): Array<string> => path.split(\"/\").slice(1).map(removeApostrophes);\n\n/**\n * Normalizes the mnemonic by removing extra whitespace and making it lowercase\n * @param mnemonic the mnemonic seed phrase\n */\nexport const mnemonicToSeed = (mnemonic: string): Uint8Array => {\n  const normalizedMnemonic = mnemonic\n    .trim()\n    .split(/\\s+/)\n    .map((part) => part.toLowerCase())\n    .join(\" \");\n  return bip39.mnemonicToSeedSync(normalizedMnemonic);\n};\n","import { Serializable } from \"../../bcs\";\nimport { HexInput } from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Hex } from \"../hex\";\nimport { Signature } from \"./signature\";\n\n/**\n * Arguments for verifying a signature\n */\nexport interface VerifySignatureArgs {\n  message: HexInput;\n  signature: Signature;\n}\n\n/**\n * An abstract representation of a public key.\n *\n * Provides a common interface for verifying any signature.\n */\nexport abstract class PublicKey extends Serializable {\n  /**\n   * Verifies that the private key associated with this public key signed the message with the given signature.\n   * @param args.message The message that was signed\n   * @param args.signature The signature to verify\n   */\n  abstract verifySignature(args: VerifySignatureArgs): boolean;\n\n  /**\n   * Get the raw public key bytes\n   */\n  abstract toUint8Array(): Uint8Array;\n\n  /**\n   * Get the public key as a hex string with a 0x prefix e.g. 0x123456...\n   */\n  toString(): string {\n    const bytes = this.toUint8Array();\n    return Hex.fromHexInput(bytes).toString();\n  }\n}\n\n/**\n * An abstract representation of an account public key.\n *\n * Provides a common interface for deriving an authentication key.\n */\nexport abstract class AccountPublicKey extends PublicKey {\n  /**\n   * Get the authentication key associated with this public key\n   */\n  abstract authKey(): AuthenticationKey;\n}\n","import { Serializable } from \"../../bcs\";\nimport { Hex } from \"../hex\";\n\n/**\n * An abstract representation of a crypto signature,\n * associated to a specific signature scheme e.g. Ed25519 or Secp256k1\n *\n * This is the product of signing a message directly from a PrivateKey\n * and can be verified against a CryptoPublicKey.\n */\nexport abstract class Signature extends Serializable {\n  /**\n   * Get the raw signature bytes\n   */\n  abstract toUint8Array(): Uint8Array;\n\n  /**\n   * Get the signature as a hex string with a 0x prefix e.g. 0x123456...\n   */\n  toString(): string {\n    const bytes = this.toUint8Array();\n    return Hex.fromHexInput(bytes).toString();\n  }\n}\n\n/**\n * An abstract representation of an account signature,\n * associated to a specific authentication scheme e.g. Ed25519 or SingleKey\n *\n * This is the product of signing a message through an account,\n * and can be verified against an AccountPublicKey.\n */\n// export abstract class AccountSignature extends Serializable {\n//   /**\n//    * Get the raw signature bytes\n//    */\n//   abstract toUint8Array(): Uint8Array;\n//\n//   /**\n//    * Get the signature as a hex string with a 0x prefix e.g. 0x123456...\n//    */\n//   toString(): string {\n//     const bytes = this.toUint8Array();\n//     return Hex.fromHexInput(bytes).toString();\n//   }\n// }\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from \"../../bcs\";\nimport { SigningScheme as AuthenticationKeyScheme } from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { AccountPublicKey, VerifySignatureArgs } from \"./publicKey\";\nimport { Signature } from \"./signature\";\n\n/**\n * Represents the public key of a K-of-N Ed25519 multi-sig transaction.\n */\nexport class MultiEd25519PublicKey extends AccountPublicKey {\n  /**\n   * Maximum number of public keys supported\n   */\n  static readonly MAX_KEYS = 32;\n\n  /**\n   * Minimum number of public keys needed\n   */\n  static readonly MIN_KEYS = 2;\n\n  /**\n   * Minimum threshold for the number of valid signatures required\n   */\n  static readonly MIN_THRESHOLD = 1;\n\n  /**\n   * List of Ed25519 public keys for this LegacyMultiEd25519PublicKey\n   */\n  public readonly publicKeys: Ed25519PublicKey[];\n\n  /**\n   * The minimum number of valid signatures required, for the number of public keys specified\n   */\n  public readonly threshold: number;\n\n  /**\n   * Public key for a K-of-N multi-sig transaction. A K-of-N multi-sig transaction means that for such a\n   * transaction to be executed, at least K out of the N authorized signers have signed the transaction\n   * and passed the check conducted by the chain.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   *\n   * @param args.publicKeys A list of public keys\n   * @param args.threshold At least \"threshold\" signatures must be valid\n   */\n  constructor(args: { publicKeys: Ed25519PublicKey[]; threshold: number }) {\n    super();\n    const { publicKeys, threshold } = args;\n\n    // Validate number of public keys\n    if (publicKeys.length > MultiEd25519PublicKey.MAX_KEYS || publicKeys.length < MultiEd25519PublicKey.MIN_KEYS) {\n      throw new Error(\n        `Must have between ${MultiEd25519PublicKey.MIN_KEYS} and ` +\n          `${MultiEd25519PublicKey.MAX_KEYS} public keys, inclusive`,\n      );\n    }\n\n    // Validate threshold: must be between 1 and the number of public keys, inclusive\n    if (threshold < MultiEd25519PublicKey.MIN_THRESHOLD || threshold > publicKeys.length) {\n      throw new Error(\n        `Threshold must be between ${MultiEd25519PublicKey.MIN_THRESHOLD} and ${publicKeys.length}, inclusive`,\n      );\n    }\n\n    this.publicKeys = publicKeys;\n    this.threshold = threshold;\n  }\n\n  // region AccountPublicKey\n\n  verifySignature(args: VerifySignatureArgs): boolean {\n    const { message, signature } = args;\n    if (!(signature instanceof MultiEd25519Signature)) {\n      return false;\n    }\n\n    const indices: number[] = [];\n    for (let i = 0; i < 4; i += 1) {\n      for (let j = 0; j < 8; j += 1) {\n        // eslint-disable-next-line no-bitwise\n        const bitIsSet = (signature.bitmap[i] & (1 << (7 - j))) !== 0;\n        if (bitIsSet) {\n          const index = i * 8 + j;\n          indices.push(index);\n        }\n      }\n    }\n\n    if (indices.length !== signature.signatures.length) {\n      throw new Error(\"Bitmap and signatures length mismatch\");\n    }\n\n    if (indices.length < this.threshold) {\n      throw new Error(\"Not enough signatures\");\n    }\n\n    for (let i = 0; i < indices.length; i += 1) {\n      const publicKey = this.publicKeys[indices[i]];\n      if (!publicKey.verifySignature({ message, signature: signature.signatures[i] })) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.MultiEd25519,\n      input: this.toUint8Array(),\n    });\n  }\n\n  /**\n   * Converts a PublicKeys into Uint8Array (bytes) with: bytes = p1_bytes | ... | pn_bytes | threshold\n   */\n  toUint8Array(): Uint8Array {\n    const bytes = new Uint8Array(this.publicKeys.length * Ed25519PublicKey.LENGTH + 1);\n    this.publicKeys.forEach((k: Ed25519PublicKey, i: number) => {\n      bytes.set(k.toUint8Array(), i * Ed25519PublicKey.LENGTH);\n    });\n\n    bytes[this.publicKeys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n\n    return bytes;\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    const threshold = bytes[bytes.length - 1];\n\n    const keys: Ed25519PublicKey[] = [];\n\n    for (let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH) {\n      const begin = i;\n      keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n    }\n    return new MultiEd25519PublicKey({ publicKeys: keys, threshold });\n  }\n\n  // endregion\n}\n\n/**\n * Represents the signature of a K-of-N Ed25519 multi-sig transaction.\n */\nexport class MultiEd25519Signature extends Signature {\n  /**\n   * Maximum number of Ed25519 signatures supported\n   */\n  static MAX_SIGNATURES_SUPPORTED = 32;\n\n  /**\n   * Number of bytes in the bitmap representing who signed the transaction (32-bits)\n   */\n  static BITMAP_LEN: number = 4;\n\n  /**\n   * The list of underlying Ed25519 signatures\n   */\n  public readonly signatures: Ed25519Signature[];\n\n  /**\n   * 32-bit Bitmap representing who signed the transaction\n   *\n   * This is represented where each public key can be masked to determine whether the message was signed by that key.\n   */\n  public readonly bitmap: Uint8Array;\n\n  /**\n   * Signature for a K-of-N multi-sig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param args.signatures A list of signatures\n   * @param args.bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right.\n   * Alternatively, you can specify an array of bitmap positions.\n   * Valid position should range between 0 and 31.\n   * @see MultiEd25519Signature.createBitmap\n   */\n  constructor(args: { signatures: Ed25519Signature[]; bitmap: Uint8Array | number[] }) {\n    super();\n    const { signatures, bitmap } = args;\n\n    if (signatures.length > MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(\n        `The number of signatures cannot be greater than ${MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED}`,\n      );\n    }\n    this.signatures = signatures;\n\n    if (!(bitmap instanceof Uint8Array)) {\n      this.bitmap = MultiEd25519Signature.createBitmap({ bits: bitmap });\n    } else if (bitmap.length !== MultiEd25519Signature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiEd25519Signature.BITMAP_LEN}`);\n    } else {\n      this.bitmap = bitmap;\n    }\n  }\n\n  // region AccountSignature\n\n  /**\n   * Converts a MultiSignature into Uint8Array (bytes) with `bytes = s1_bytes | ... | sn_bytes | bitmap`\n   */\n  toUint8Array(): Uint8Array {\n    const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + MultiEd25519Signature.BITMAP_LEN);\n    this.signatures.forEach((k: Ed25519Signature, i: number) => {\n      bytes.set(k.toUint8Array(), i * Ed25519Signature.LENGTH);\n    });\n\n    bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n\n    return bytes;\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    const bitmap = bytes.subarray(bytes.length - 4);\n\n    const signatures: Ed25519Signature[] = [];\n\n    for (let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH) {\n      const begin = i;\n      signatures.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n    }\n    return new MultiEd25519Signature({ signatures, bitmap });\n  }\n\n  // endregion\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions\n   * @param args.bits The bitmap positions that should be set. A position starts at index 0.\n   * Valid position should range between 0 and 31.\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32bit long\n   */\n  static createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number, index) => {\n      if (bit >= MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Cannot have a signature larger than ${MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED - 1}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicate bits detected.\");\n      }\n\n      if (index > 0 && bit <= bits[index - 1]) {\n        throw new Error(\"The bits need to be sorted in ascending order.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 } from \"@noble/hashes/sha3\";\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { HDKey } from \"@scure/bip32\";\nimport { Serializable, Deserializer, Serializer } from \"../../bcs\";\nimport { Hex } from \"../hex\";\nimport { HexInput } from \"../../types\";\nimport { isValidBIP44Path, mnemonicToSeed } from \"./hdKey\";\nimport { PrivateKey } from \"./privateKey\";\nimport { PublicKey, VerifySignatureArgs } from \"./publicKey\";\nimport { Signature } from \"./signature\";\n\n/**\n * Represents the Secp256k1 ecdsa public key\n *\n * Secp256k1 authentication key is represented in the SDK as `AnyPublicKey`.\n */\nexport class Secp256k1PublicKey extends PublicKey {\n  // Secp256k1 ecdsa public keys contain a prefix indicating compression and two 32-byte coordinates.\n  static readonly LENGTH: number = 65;\n\n  // Hex value of the public key\n  private readonly key: Hex;\n\n  /**\n   * Create a new PublicKey instance from a Uint8Array or String.\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const hex = Hex.fromHexInput(hexInput);\n    if (hex.toUint8Array().length !== Secp256k1PublicKey.LENGTH) {\n      throw new Error(`PublicKey length should be ${Secp256k1PublicKey.LENGTH}`);\n    }\n    this.key = hex;\n  }\n\n  // region PublicKey\n\n  verifySignature(args: VerifySignatureArgs): boolean {\n    const { message, signature } = args;\n    if (!(signature instanceof Secp256k1Signature)) {\n      return false;\n    }\n\n    const messageBytes = Hex.fromHexInput(message).toUint8Array();\n    const messageSha3Bytes = sha3_256(messageBytes);\n    const signatureBytes = signature.toUint8Array();\n    return secp256k1.verify(signatureBytes, messageSha3Bytes, this.key.toUint8Array());\n  }\n\n  toUint8Array(): Uint8Array {\n    return this.key.toUint8Array();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.key.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Secp256k1PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Secp256k1PublicKey(bytes);\n  }\n\n  // endregion\n\n  /**\n   * @deprecated use `instanceof Secp256k1PublicKey` instead\n   * @param publicKey\n   */\n  static isPublicKey(publicKey: PublicKey): publicKey is Secp256k1PublicKey {\n    return publicKey instanceof Secp256k1PublicKey;\n  }\n}\n\n/**\n * A Secp256k1 ecdsa private key\n */\nexport class Secp256k1PrivateKey extends Serializable implements PrivateKey {\n  /**\n   * Length of Secp256k1 ecdsa private key\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The private key bytes\n   * @private\n   */\n  private readonly key: Hex;\n\n  // region Constructors\n\n  /**\n   * Create a new PrivateKey instance from a Uint8Array or String.\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const privateKeyHex = Hex.fromHexInput(hexInput);\n    if (privateKeyHex.toUint8Array().length !== Secp256k1PrivateKey.LENGTH) {\n      throw new Error(`PrivateKey length should be ${Secp256k1PrivateKey.LENGTH}`);\n    }\n\n    this.key = privateKeyHex;\n  }\n\n  /**\n   * Generate a new random private key.\n   *\n   * @returns Secp256k1PrivateKey\n   */\n  static generate(): Secp256k1PrivateKey {\n    const hexInput = secp256k1.utils.randomPrivateKey();\n    return new Secp256k1PrivateKey(hexInput);\n  }\n\n  /**\n   * Derives a private key from a mnemonic seed phrase.\n   *\n   * @param path the BIP44 path\n   * @param mnemonics the mnemonic seed phrase\n   *\n   * @returns The generated key\n   */\n  static fromDerivationPath(path: string, mnemonics: string): Secp256k1PrivateKey {\n    if (!isValidBIP44Path(path)) {\n      throw new Error(`Invalid derivation path ${path}`);\n    }\n    return Secp256k1PrivateKey.fromDerivationPathInner(path, mnemonicToSeed(mnemonics));\n  }\n\n  /**\n   * A private inner function so we can separate from the main fromDerivationPath() method\n   * to add tests to verify we create the keys correctly.\n   *\n   * @param path the BIP44 path\n   * @param seed the seed phrase created by the mnemonics\n   *\n   * @returns The generated key\n   */\n  private static fromDerivationPathInner(path: string, seed: Uint8Array): Secp256k1PrivateKey {\n    const { privateKey } = HDKey.fromMasterSeed(seed).derive(path);\n    // library returns privateKey as Uint8Array | null\n    if (privateKey === null) {\n      throw new Error(\"Invalid key\");\n    }\n\n    return new Secp256k1PrivateKey(privateKey);\n  }\n\n  // endregion\n\n  // region PrivateKey\n\n  /**\n   * Sign the given message with the private key.\n   *\n   * @param message in HexInput format\n   * @returns Signature\n   */\n  sign(message: HexInput): Secp256k1Signature {\n    const messageBytes = Hex.fromHexInput(message);\n    const messageHashBytes = sha3_256(messageBytes.toUint8Array());\n    const signature = secp256k1.sign(messageHashBytes, this.key.toUint8Array());\n    return new Secp256k1Signature(signature.toCompactRawBytes());\n  }\n\n  /**\n   * Derive the Secp256k1PublicKey from this private key.\n   *\n   * @returns Secp256k1PublicKey\n   */\n  publicKey(): Secp256k1PublicKey {\n    const bytes = secp256k1.getPublicKey(this.key.toUint8Array(), false);\n    return new Secp256k1PublicKey(bytes);\n  }\n\n  /**\n   * Get the private key in bytes (Uint8Array).\n   *\n   * @returns\n   */\n  toUint8Array(): Uint8Array {\n    return this.key.toUint8Array();\n  }\n\n  /**\n   * Get the private key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the private key\n   */\n  toString(): string {\n    return this.key.toString();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Secp256k1PrivateKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Secp256k1PrivateKey(bytes);\n  }\n\n  // endregion\n\n  /**\n   * @deprecated use `instanceof Secp256k1PrivateKey` instead\n   */\n  static isPrivateKey(privateKey: PrivateKey): privateKey is Secp256k1PrivateKey {\n    return privateKey instanceof Secp256k1PrivateKey;\n  }\n}\n\n/**\n * A signature of a message signed using a Secp256k1 ecdsa private key\n */\nexport class Secp256k1Signature extends Signature {\n  /**\n   * Secp256k1 ecdsa signatures are 256-bit.\n   */\n  static readonly LENGTH = 64;\n\n  /**\n   * The signature bytes\n   * @private\n   */\n  private readonly data: Hex;\n\n  // region Constructors\n\n  /**\n   * Create a new Signature instance from a Uint8Array or String.\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n    const data = Hex.fromHexInput(hexInput);\n    if (data.toUint8Array().length !== Secp256k1Signature.LENGTH) {\n      throw new Error(\n        `Signature length should be ${Secp256k1Signature.LENGTH}, received ${data.toUint8Array().length}`,\n      );\n    }\n    this.data = data;\n  }\n\n  // endregion\n\n  // region Signature\n\n  toUint8Array(): Uint8Array {\n    return this.data.toUint8Array();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.data.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Secp256k1Signature {\n    const hex = deserializer.deserializeBytes();\n    return new Secp256k1Signature(hex);\n  }\n\n  // endregion\n}\n","import { Deserializer, Serializer } from \"../../bcs\";\nimport { AnyPublicKeyVariant, AnySignatureVariant, SigningScheme as AuthenticationKeyScheme } from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { AccountPublicKey, PublicKey, VerifySignatureArgs } from \"./publicKey\";\nimport { Secp256k1PublicKey, Secp256k1Signature } from \"./secp256k1\";\nimport { Signature } from \"./signature\";\n\n/**\n * Represents any public key supported by Aptos.\n *\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263) Aptos supports\n * `Legacy` and `Unified` authentication keys.\n *\n * Any unified authentication key is represented in the SDK as `AnyPublicKey`.\n */\nexport class AnyPublicKey extends AccountPublicKey {\n  /**\n   * Reference to the inner public key\n   */\n  public readonly publicKey: PublicKey;\n\n  /**\n   * Index of the underlying enum variant\n   */\n  public readonly variant: AnyPublicKeyVariant;\n\n  // region Constructors\n\n  constructor(publicKey: PublicKey) {\n    super();\n    this.publicKey = publicKey;\n    if (publicKey instanceof Ed25519PublicKey) {\n      this.variant = AnyPublicKeyVariant.Ed25519;\n    } else if (publicKey instanceof Secp256k1PublicKey) {\n      this.variant = AnyPublicKeyVariant.Secp256k1;\n    } else {\n      throw new Error(\"Unsupported public key type\");\n    }\n  }\n\n  // endregion\n\n  // region AccountPublicKey\n\n  verifySignature(args: VerifySignatureArgs): boolean {\n    const { message, signature } = args;\n    if (!(signature instanceof AnySignature)) {\n      return false;\n    }\n\n    return this.publicKey.verifySignature({\n      message,\n      signature: signature.signature,\n    });\n  }\n\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.SingleKey,\n      input: this.toUint8Array(),\n    });\n  }\n\n  toUint8Array() {\n    return this.bcsToBytes();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.publicKey.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): AnyPublicKey {\n    const variantIndex = deserializer.deserializeUleb128AsU32();\n    let publicKey: PublicKey;\n    switch (variantIndex) {\n      case AnyPublicKeyVariant.Ed25519:\n        publicKey = Ed25519PublicKey.deserialize(deserializer);\n        break;\n      case AnyPublicKeyVariant.Secp256k1:\n        publicKey = Secp256k1PublicKey.deserialize(deserializer);\n        break;\n      default:\n        throw new Error(`Unknown variant index for AnyPublicKey: ${variantIndex}`);\n    }\n    return new AnyPublicKey(publicKey);\n  }\n\n  // endregion\n\n  /**\n   * @deprecated use `instanceof AnyPublicKey` instead.\n   */\n  static isPublicKey(publicKey: AccountPublicKey): publicKey is AnyPublicKey {\n    return publicKey instanceof AnyPublicKey;\n  }\n\n  /**\n   * @deprecated use `publicKey instanceof Ed25519PublicKey` instead.\n   */\n  isEd25519(): boolean {\n    return this.publicKey instanceof Ed25519PublicKey;\n  }\n\n  /**\n   * @deprecated use `publicKey instanceof Secp256k1PublicKey` instead.\n   */\n  isSecp256k1PublicKey(): boolean {\n    return this.publicKey instanceof Secp256k1PublicKey;\n  }\n}\n\n/**\n * Instance of signature that uses the SingleKey authentication scheme.\n * This signature can only be generated by a `SingleKeySigner`, since it uses the\n * same authentication scheme.\n */\nexport class AnySignature extends Signature {\n  public readonly signature: Signature;\n\n  /**\n   * Index of the underlying enum variant\n   */\n  private readonly variant: AnySignatureVariant;\n\n  // region Constructors\n\n  constructor(signature: Signature) {\n    super();\n    this.signature = signature;\n\n    if (signature instanceof Ed25519Signature) {\n      this.variant = AnySignatureVariant.Ed25519;\n    } else if (signature instanceof Secp256k1Signature) {\n      this.variant = AnySignatureVariant.Secp256k1;\n    } else {\n      throw new Error(\"Unsupported signature type\");\n    }\n  }\n\n  // endregion\n\n  // region AccountSignature\n\n  toUint8Array() {\n    return this.bcsToBytes();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.signature.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): AnySignature {\n    const variantIndex = deserializer.deserializeUleb128AsU32();\n    let signature: Signature;\n    switch (variantIndex) {\n      case AnySignatureVariant.Ed25519:\n        signature = Ed25519Signature.deserialize(deserializer);\n        break;\n      case AnySignatureVariant.Secp256k1:\n        signature = Secp256k1Signature.deserialize(deserializer);\n        break;\n      default:\n        throw new Error(`Unknown variant index for AnySignature: ${variantIndex}`);\n    }\n    return new AnySignature(signature);\n  }\n\n  // endregion\n}\n","import { SigningScheme as AuthenticationKeyScheme } from \"../../types\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializer } from \"../../bcs/serializer\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { AccountPublicKey, PublicKey, VerifySignatureArgs } from \"./publicKey\";\nimport { Signature } from \"./signature\";\nimport { AnyPublicKey, AnySignature } from \"./singleKey\";\n\n/* eslint-disable no-bitwise */\n\nfunction bitCount(byte: number) {\n  let n = byte;\n  n -= (n >> 1) & 0x55555555;\n  n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n  return (((n + (n >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;\n}\n\n/* eslint-enable no-bitwise */\n\n/**\n * Represents the public key of a multi-agent account.\n *\n * The public keys of each individual agent can be any type of public key supported by Aptos.\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263) Aptos supports\n * `Legacy` and `Unified` authentication keys.\n */\nexport class MultiKey extends AccountPublicKey {\n  /**\n   * List of any public keys\n   */\n  public readonly publicKeys: AnyPublicKey[];\n\n  /**\n   * The minimum number of valid signatures required, for the number of public keys specified\n   */\n  public readonly signaturesRequired: number;\n\n  // region Constructors\n\n  constructor(args: { publicKeys: Array<PublicKey>; signaturesRequired: number }) {\n    super();\n    const { publicKeys, signaturesRequired } = args;\n\n    // Validate number of public keys is greater than signature required\n    if (signaturesRequired < 1) {\n      throw new Error(\"The number of required signatures needs to be greater than 0\");\n    }\n\n    // Validate number of public keys is greater than signature required\n    if (publicKeys.length < signaturesRequired) {\n      throw new Error(\n        `Provided ${publicKeys.length} public keys is smaller than the ${signaturesRequired} required signatures`,\n      );\n    }\n\n    // Make sure that all keys are normalized to the SingleKey authentication scheme\n    this.publicKeys = publicKeys.map((publicKey) =>\n      publicKey instanceof AnyPublicKey ? publicKey : new AnyPublicKey(publicKey),\n    );\n\n    this.signaturesRequired = signaturesRequired;\n  }\n\n  // endregion\n\n  // region AccountPublicKey\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  verifySignature(args: VerifySignatureArgs): boolean {\n    throw new Error(\"not implemented\");\n  }\n\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.MultiKey,\n      input: this.toUint8Array(),\n    });\n  }\n\n  toUint8Array(): Uint8Array {\n    return this.bcsToBytes();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeVector(this.publicKeys);\n    serializer.serializeU8(this.signaturesRequired);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiKey {\n    const keys = deserializer.deserializeVector(AnyPublicKey);\n    const signaturesRequired = deserializer.deserializeU8();\n\n    return new MultiKey({ publicKeys: keys, signaturesRequired });\n  }\n\n  // endregion\n\n  /**\n   * Create a bitmap that holds the mapping from the original public keys\n   * to the signatures passed in\n   *\n   * @param args.bits array of the index mapping to the matching public keys\n   * @returns Uint8array bit map\n   */\n  createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number, idx: number) => {\n      if (idx + 1 > this.publicKeys.length) {\n        throw new Error(`Signature index ${idx + 1} is out of public keys range, ${this.publicKeys.length}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(`Duplicate bit ${bit} detected.`);\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n}\n\nexport class MultiKeySignature extends Signature {\n  /**\n   * Number of bytes in the bitmap representing who signed the transaction (32-bits)\n   */\n  static BITMAP_LEN: number = 4;\n\n  /**\n   * Maximum number of Ed25519 signatures supported\n   */\n  static MAX_SIGNATURES_SUPPORTED = MultiKeySignature.BITMAP_LEN * 8;\n\n  /**\n   * The list of underlying Ed25519 signatures\n   */\n  public readonly signatures: AnySignature[];\n\n  /**\n   * 32-bit Bitmap representing who signed the transaction\n   *\n   * This is represented where each public key can be masked to determine whether the message was signed by that key.\n   */\n  public readonly bitmap: Uint8Array;\n\n  /**\n   * Signature for a K-of-N multi-sig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param args.signatures A list of signatures\n   * @param args.bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right\n   */\n  constructor(args: { signatures: Array<Signature | AnySignature>; bitmap: Uint8Array | number[] }) {\n    super();\n    const { signatures, bitmap } = args;\n\n    if (signatures.length > MultiKeySignature.MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(`The number of signatures cannot be greater than ${MultiKeySignature.MAX_SIGNATURES_SUPPORTED}`);\n    }\n\n    // Make sure that all signatures are normalized to the SingleKey authentication scheme\n    this.signatures = signatures.map((signature) =>\n      signature instanceof AnySignature ? signature : new AnySignature(signature),\n    );\n\n    if (!(bitmap instanceof Uint8Array)) {\n      this.bitmap = MultiKeySignature.createBitmap({ bits: bitmap });\n    } else if (bitmap.length !== MultiKeySignature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiKeySignature.BITMAP_LEN}`);\n    } else {\n      this.bitmap = bitmap;\n    }\n\n    const nSignatures = this.bitmap.reduce((acc, byte) => acc + bitCount(byte), 0);\n    if (nSignatures !== this.signatures.length) {\n      throw new Error(`Expecting ${nSignatures} signatures from the bitmap, but got ${this.signatures.length}`);\n    }\n  }\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions\n   * @param args.bits The bitmap positions that should be set. A position starts at index 0.\n   * Valid position should range between 0 and 31.\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32bit long\n   */\n  static createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number) => {\n      if (bit >= MultiKeySignature.MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Cannot have a signature larger than ${MultiKeySignature.MAX_SIGNATURES_SUPPORTED - 1}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicate bits detected.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  // region Signature\n\n  toUint8Array(): Uint8Array {\n    return this.bcsToBytes();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    // Note: we should not need to serialize the vector length, as it can be derived from the bitmap\n    serializer.serializeVector(this.signatures);\n    serializer.serializeBytes(this.bitmap);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiKeySignature {\n    const bitmap = deserializer.deserializeBytes();\n    const nSignatures = bitmap.reduce((acc, byte) => acc + bitCount(byte), 0);\n    const signatures: AnySignature[] = [];\n    for (let i = 0; i < nSignatures; i += 1) {\n      const signature = AnySignature.deserialize(deserializer);\n      signatures.push(signature);\n    }\n    return new MultiKeySignature({ signatures, bitmap });\n  }\n\n  // endregion\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Serializer, Deserializer, Serializable } from \"../../bcs\";\nimport { AnyPublicKey, AnySignature } from \"../../core/crypto\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../../core/crypto/multiEd25519\";\nimport { MultiKey } from \"../../core/crypto/multiKey\";\nimport { AccountAuthenticatorVariant } from \"../../types\";\n\nexport abstract class AccountAuthenticator extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): AccountAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case AccountAuthenticatorVariant.Ed25519:\n        return AccountAuthenticatorEd25519.load(deserializer);\n      case AccountAuthenticatorVariant.MultiEd25519:\n        return AccountAuthenticatorMultiEd25519.load(deserializer);\n      case AccountAuthenticatorVariant.SingleKey:\n        return AccountAuthenticatorSingleKey.load(deserializer);\n      case AccountAuthenticatorVariant.MultiKey:\n        return AccountAuthenticatorMultiKey.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n    }\n  }\n\n  isEd25519(): this is AccountAuthenticatorEd25519 {\n    return this instanceof AccountAuthenticatorEd25519;\n  }\n\n  isMultiEd25519(): this is AccountAuthenticatorMultiEd25519 {\n    return this instanceof AccountAuthenticatorMultiEd25519;\n  }\n\n  isSingleKey(): this is AccountAuthenticatorSingleKey {\n    return this instanceof AccountAuthenticatorSingleKey;\n  }\n\n  isMultiKey(): this is AccountAuthenticatorMultiKey {\n    return this instanceof AccountAuthenticatorMultiKey;\n  }\n}\n\n/**\n * Transaction authenticator Ed25519 for a multi signer transaction\n *\n * @param public_key Account's Ed25519 public key.\n * @param signature Account's Ed25519 signature\n *\n */\nexport class AccountAuthenticatorEd25519 extends AccountAuthenticator {\n  public readonly public_key: Ed25519PublicKey;\n\n  public readonly signature: Ed25519Signature;\n\n  constructor(public_key: Ed25519PublicKey, signature: Ed25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.Ed25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorEd25519(public_key, signature);\n  }\n}\n\n/**\n * Transaction authenticator Multi Ed25519 for a multi signers transaction\n *\n * @param public_key Account's MultiEd25519 public key.\n * @param signature Account's MultiEd25519 signature\n *\n */\nexport class AccountAuthenticatorMultiEd25519 extends AccountAuthenticator {\n  public readonly public_key: MultiEd25519PublicKey;\n\n  public readonly signature: MultiEd25519Signature;\n\n  constructor(public_key: MultiEd25519PublicKey, signature: MultiEd25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.MultiEd25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\n/**\n * AccountAuthenticatorSingleKey for a single signer\n *\n * @param public_key AnyPublicKey\n * @param signature AnySignature\n *\n */\nexport class AccountAuthenticatorSingleKey extends AccountAuthenticator {\n  public readonly public_key: AnyPublicKey;\n\n  public readonly signature: AnySignature;\n\n  constructor(public_key: AnyPublicKey, signature: AnySignature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.SingleKey);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorSingleKey {\n    const public_key = AnyPublicKey.deserialize(deserializer);\n    const signature = AnySignature.deserialize(deserializer);\n    return new AccountAuthenticatorSingleKey(public_key, signature);\n  }\n}\n\n/**\n * AccountAuthenticatorMultiKey for a multi signer\n *\n * @param public_keys MultiKey\n * @param signatures Signature\n *\n */\nexport class AccountAuthenticatorMultiKey extends AccountAuthenticator {\n  public readonly public_keys: MultiKey;\n\n  public readonly signatures: Array<AnySignature>;\n\n  public readonly signatures_bitmap: Uint8Array;\n\n  constructor(public_keys: MultiKey, signatures: Array<AnySignature>, signatures_bitmap: Uint8Array) {\n    super();\n    this.public_keys = public_keys;\n    this.signatures = signatures;\n    this.signatures_bitmap = signatures_bitmap;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.MultiKey);\n    this.public_keys.serialize(serializer);\n    serializer.serializeVector<AnySignature>(this.signatures);\n    serializer.serializeBytes(this.signatures_bitmap);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiKey {\n    const public_keys = MultiKey.deserialize(deserializer);\n    const signatures = deserializer.deserializeVector(AnySignature);\n    const signatures_bitmap = deserializer.deserializeBytes();\n    return new AccountAuthenticatorMultiKey(public_keys, signatures, signatures_bitmap);\n  }\n}\n","import { AccountAuthenticatorEd25519 } from \"../../transactions/authenticator/account\";\nimport { HexInput, SigningScheme } from \"../../types\";\nimport { AccountAddress, AccountAddressInput } from \"../accountAddress\";\nimport { Ed25519PrivateKey, Ed25519PublicKey, Ed25519Signature } from \"../crypto\";\nimport type { Account } from \"./Account\";\n\nexport interface Ed25519SignerConstructorArgs {\n  privateKey: Ed25519PrivateKey;\n  address?: AccountAddressInput;\n}\n\nexport interface Ed25519SignerFromDerivationPathArgs {\n  path: string;\n  mnemonic: string;\n}\n\nexport interface VerifyEd25519SignatureArgs {\n  message: HexInput;\n  signature: Ed25519Signature;\n}\n\n/**\n * Signer implementation for the Ed25519 authentication scheme.\n * This extends an {@link Ed25519Account} by adding signing capabilities through an {@link Ed25519PrivateKey}.\n *\n * Note: Generating a signer instance does not create the account on-chain.\n */\nexport class Ed25519Account implements Account {\n  /**\n   * Private key associated with the account\n   */\n  readonly privateKey: Ed25519PrivateKey;\n\n  readonly publicKey: Ed25519PublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly signingScheme = SigningScheme.Ed25519;\n\n  // region Constructors\n\n  constructor(args: Ed25519SignerConstructorArgs) {\n    const { privateKey, address } = args;\n    this.privateKey = privateKey;\n    this.publicKey = privateKey.publicKey();\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n  }\n\n  /**\n   * Derives a signer from a randomly generated private key\n   */\n  static generate() {\n    const privateKey = Ed25519PrivateKey.generate();\n    return new Ed25519Account({ privateKey });\n  }\n\n  /**\n   * Derives an account with bip44 path and mnemonics\n   *\n   * @param args.path the BIP44 derive hardened path e.g. m/44'/637'/0'/0'/0'\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param args.mnemonic the mnemonic seed phrase of the account\n   */\n  static fromDerivationPath(args: Ed25519SignerFromDerivationPathArgs) {\n    const { path, mnemonic } = args;\n    const privateKey = Ed25519PrivateKey.fromDerivationPath(path, mnemonic);\n    return new Ed25519Account({ privateKey });\n  }\n\n  // endregion\n\n  // region Account\n\n  verifySignature(args: VerifyEd25519SignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  signWithAuthenticator(message: HexInput) {\n    const signature = this.privateKey.sign(message);\n    return new AccountAuthenticatorEd25519(this.publicKey, signature);\n  }\n\n  sign(message: HexInput) {\n    return this.signWithAuthenticator(message).signature;\n  }\n\n  // endregion\n}\n","import { AccountAuthenticatorSingleKey } from \"../../transactions/authenticator/account\";\nimport { type HexInput, SigningScheme, SigningSchemeInput } from \"../../types\";\nimport { AccountAddress, AccountAddressInput } from \"../accountAddress\";\nimport { AnyPublicKey, AnySignature, Ed25519PrivateKey, PrivateKey, Secp256k1PrivateKey } from \"../crypto\";\nimport type { Account } from \"./Account\";\n\nexport interface SingleKeySignerConstructorArgs {\n  privateKey: PrivateKey;\n  address?: AccountAddressInput;\n}\n\nexport interface SingleKeySignerGenerateArgs {\n  scheme?: SigningSchemeInput;\n}\n\nexport type SingleKeySignerFromDerivationPathArgs = SingleKeySignerGenerateArgs & {\n  path: string;\n  mnemonic: string;\n};\n\nexport interface VerifySingleKeySignatureArgs {\n  message: HexInput;\n  signature: AnySignature;\n}\n\n/**\n * Signer implementation for the SingleKey authentication scheme.\n * This extends a SingleKeyAccount by adding signing capabilities through a valid private key.\n * Currently, the only supported signature schemes are Ed25519 and Secp256k1.\n *\n * Note: Generating a signer instance does not create the account on-chain.\n */\nexport class SingleKeyAccount implements Account {\n  /**\n   * Private key associated with the account\n   */\n  readonly privateKey: PrivateKey;\n\n  readonly publicKey: AnyPublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly signingScheme = SigningScheme.SingleKey;\n\n  // region Constructors\n\n  constructor(args: SingleKeySignerConstructorArgs) {\n    const { privateKey, address } = args;\n    this.privateKey = privateKey;\n    this.publicKey = new AnyPublicKey(privateKey.publicKey());\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n  }\n\n  /**\n   * Derives an account from a randomly generated private key.\n   * Default generation is using an Ed25519 key\n   * @returns Account with the given signature scheme\n   */\n  static generate(args: SingleKeySignerGenerateArgs = {}) {\n    const { scheme = SigningSchemeInput.Ed25519 } = args;\n    let privateKey: PrivateKey;\n    switch (scheme) {\n      case SigningSchemeInput.Ed25519:\n        privateKey = Ed25519PrivateKey.generate();\n        break;\n      case SigningSchemeInput.Secp256k1Ecdsa:\n        privateKey = Secp256k1PrivateKey.generate();\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${scheme}`);\n    }\n    return new SingleKeyAccount({ privateKey });\n  }\n\n  /**\n   * Derives an account with bip44 path and mnemonics,\n   * Default to using an Ed25519 signature scheme.\n   *\n   * @param args.scheme The signature scheme to derive the private key with\n   * @param args.path the BIP44 derive hardened path (e.g. m/44'/637'/0'/0'/0') for Ed25519,\n   * or non-hardened path (e.g. m/44'/637'/0'/0/0) for secp256k1\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param args.mnemonic the mnemonic seed phrase of the account\n   */\n  static fromDerivationPath(args: SingleKeySignerFromDerivationPathArgs) {\n    const { scheme = SigningSchemeInput.Ed25519, path, mnemonic } = args;\n    let privateKey: PrivateKey;\n    switch (scheme) {\n      case SigningSchemeInput.Ed25519:\n        privateKey = Ed25519PrivateKey.fromDerivationPath(path, mnemonic);\n        break;\n      case SigningSchemeInput.Secp256k1Ecdsa:\n        privateKey = Secp256k1PrivateKey.fromDerivationPath(path, mnemonic);\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${scheme}`);\n    }\n    return new SingleKeyAccount({ privateKey });\n  }\n\n  // endregion\n\n  // region Account\n\n  verifySignature(args: VerifySingleKeySignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  signWithAuthenticator(message: HexInput) {\n    const innerSignature = this.privateKey.sign(message);\n    const signature = new AnySignature(innerSignature);\n    return new AccountAuthenticatorSingleKey(this.publicKey, signature);\n  }\n\n  sign(message: HexInput) {\n    return this.signWithAuthenticator(message).signature;\n  }\n\n  // endregion\n}\n","import type { AccountAuthenticator } from \"../../transactions/authenticator/account\";\nimport { HexInput, SigningScheme, SigningSchemeInput } from \"../../types\";\nimport type { AccountAddress, AccountAddressInput } from \"../accountAddress\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { AccountPublicKey, Ed25519PrivateKey, PrivateKey, Signature, VerifySignatureArgs } from \"../crypto\";\nimport { Ed25519Account } from \"./Ed25519Account\";\nimport { SingleKeyAccount } from \"./SingleKeyAccount\";\n\n/**\n * Arguments for creating an `Ed25519Account` from an `Ed25519PrivateKey`.\n * This is the default input type when passing an `Ed25519PrivateKey`.\n * In order to use the SingleKey authentication scheme, `legacy` needs to be explicitly set to false.\n */\nexport interface CreateEd25519AccountFromPrivateKeyArgs {\n  privateKey: Ed25519PrivateKey;\n  address?: AccountAddressInput;\n  legacy?: true;\n}\n\n/**\n * Arguments for creating an `SingleKeyAccount` from an `Ed25519PrivateKey`.\n * The `legacy` argument needs to be explicitly set to false in order to\n * use the `SingleKey` authentication scheme.\n */\nexport interface CreateEd25519SingleKeyAccountFromPrivateKeyArgs {\n  privateKey: Ed25519PrivateKey;\n  address?: AccountAddressInput;\n  legacy: false;\n}\n\n/**\n * Arguments for creating an `SingleKeyAccount` from any supported private key\n * that is not an `Ed25519PrivateKey`.\n * The `legacy` argument defaults to false and cannot be explicitly set to true.\n */\nexport interface CreateSingleKeyAccountFromPrivateKeyArgs {\n  privateKey: Exclude<PrivateKey, Ed25519PrivateKey>;\n  address?: AccountAddressInput;\n  legacy?: false;\n}\n\n/**\n * Arguments for creating an opaque `Account` from any supported private key.\n * This is used when the private key type is not known at compilation time.\n */\nexport interface CreateAccountFromPrivateKeyArgs {\n  privateKey: PrivateKey;\n  address?: AccountAddressInput;\n  legacy?: boolean;\n}\n\n/**\n * Arguments for generating an `Ed25519Account`.\n * This is the input type used by default.\n */\nexport interface GenerateEd25519AccountArgs {\n  scheme?: SigningSchemeInput.Ed25519;\n  legacy?: true;\n}\n\n/**\n * Arguments for generating an `SingleKeyAccount` with ah underlying `Ed25519PrivateKey`.\n * The `legacy` argument needs to be explicitly set to false,\n * otherwise an `Ed25519Account` will be returned instead.\n */\nexport interface GenerateEd25519SingleKeyAccountArgs {\n  scheme?: SigningSchemeInput.Ed25519;\n  legacy: false;\n}\n\n/**\n * Arguments for generating an `SingleKeyAccount` with any supported private key\n * that is not an `Ed25519PrivateKey`.\n * The `legacy` argument defaults to false and cannot be explicitly set to true.\n */\nexport interface GenerateSingleKeyAccountArgs {\n  scheme: Exclude<SigningSchemeInput, SigningSchemeInput.Ed25519>;\n  legacy?: false;\n}\n\n/**\n * Arguments for generating an opaque `Account`.\n * This is used when the input signature scheme is not known at compilation time.\n */\nexport interface GenerateAccountArgs {\n  scheme?: SigningSchemeInput;\n  legacy?: boolean;\n}\n\n/**\n * Arguments for deriving a private key from a mnemonic phrase and a BIP44 path.\n */\nexport interface PrivateKeyFromDerivationPathArgs {\n  path: string;\n  mnemonic: string;\n}\n\n/**\n * Interface for a generic Aptos account.\n *\n * The interface is defined as abstract class to provide a single entrypoint for account generation,\n * either through `Account.generate()` or `Account.fromDerivationPath`.\n * Despite this being an abstract class, it should be treated as an interface and enforced using\n * the `implements` keyword.\n *\n * Note: Generating an account instance does not create the account on-chain.\n */\nexport abstract class Account {\n  /**\n   * Private key associated with the account.\n   * Note: this will be removed in the next major release,\n   *  as not all accounts have a private key.\n   */\n  abstract readonly privateKey: PrivateKey;\n\n  /**\n   * Public key associated with the account\n   */\n  abstract readonly publicKey: AccountPublicKey;\n\n  /**\n   * Account address associated with the account\n   */\n  abstract readonly accountAddress: AccountAddress;\n\n  /**\n   * Signing scheme used to sign transactions\n   */\n  abstract signingScheme: SigningScheme;\n\n  /**\n   * Derives an account from a randomly generated private key.\n   * @param args.scheme The signature scheme to use, to generate the private key\n   * @param args.legacy Whether to use a legacy authentication scheme, when applicable\n   * @returns An account compatible with the provided signature scheme\n   */\n  static generate(args?: GenerateEd25519AccountArgs): Ed25519Account;\n  static generate(args: GenerateEd25519SingleKeyAccountArgs): SingleKeyAccount;\n  static generate(args: GenerateSingleKeyAccountArgs): SingleKeyAccount;\n  static generate(args: GenerateAccountArgs): Account;\n  static generate(args: GenerateAccountArgs = {}) {\n    const { scheme = SigningSchemeInput.Ed25519, legacy = true } = args;\n    if (scheme === SigningSchemeInput.Ed25519 && legacy) {\n      return Ed25519Account.generate();\n    }\n    return SingleKeyAccount.generate({ scheme });\n  }\n\n  /**\n   * Creates an account from the provided private key.\n   *\n   * @param args.privateKey a valid private key\n   * @param args.address the account's address. If not provided, it will be derived from the public key.\n   * @param args.legacy Whether to use a legacy authentication scheme, when applicable\n   */\n  static fromPrivateKey(args: CreateEd25519AccountFromPrivateKeyArgs): Ed25519Account;\n  static fromPrivateKey(args: CreateEd25519SingleKeyAccountFromPrivateKeyArgs): SingleKeyAccount;\n  static fromPrivateKey(args: CreateSingleKeyAccountFromPrivateKeyArgs): SingleKeyAccount;\n  static fromPrivateKey(args: CreateAccountFromPrivateKeyArgs): Account;\n  static fromPrivateKey(args: CreateAccountFromPrivateKeyArgs) {\n    const { privateKey, address, legacy = true } = args;\n    if (privateKey instanceof Ed25519PrivateKey && legacy) {\n      return new Ed25519Account({\n        privateKey,\n        address,\n      });\n    }\n    return new SingleKeyAccount({ privateKey, address });\n  }\n\n  /**\n   * @deprecated use `fromPrivateKey` instead.\n   * Instantiates an account given a private key and a specified account address.\n   * This is primarily used to instantiate an `Account` that has had its authentication key rotated.\n   *\n   * @param args.privateKey PrivateKey - the underlying private key for the account\n   * @param args.address AccountAddress - The account address the `Account` will sign for\n   * @param args.legacy optional. If set to false, the keypair generated is a Unified keypair. Defaults\n   * to generating a Legacy Ed25519 keypair\n   *\n   * @returns Account\n   */\n  static fromPrivateKeyAndAddress(args: CreateAccountFromPrivateKeyArgs) {\n    return this.fromPrivateKey(args);\n  }\n\n  /**\n   * Derives an account with bip44 path and mnemonics\n   *\n   * @param args.scheme The signature scheme to derive the private key with\n   * @param args.path the BIP44 derive hardened path (e.g. m/44'/637'/0'/0'/0') for Ed25519,\n   * or non-hardened path (e.g. m/44'/637'/0'/0/0) for secp256k1\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param args.mnemonic the mnemonic seed phrase of the account\n   */\n  static fromDerivationPath(args: GenerateEd25519AccountArgs & PrivateKeyFromDerivationPathArgs): Ed25519Account;\n  static fromDerivationPath(\n    args: GenerateEd25519SingleKeyAccountArgs & PrivateKeyFromDerivationPathArgs,\n  ): SingleKeyAccount;\n  static fromDerivationPath(args: GenerateSingleKeyAccountArgs & PrivateKeyFromDerivationPathArgs): SingleKeyAccount;\n  static fromDerivationPath(args: GenerateAccountArgs & PrivateKeyFromDerivationPathArgs): Account;\n  static fromDerivationPath(args: GenerateAccountArgs & PrivateKeyFromDerivationPathArgs) {\n    const { scheme = SigningSchemeInput.Ed25519, mnemonic, path, legacy = true } = args;\n    if (scheme === SigningSchemeInput.Ed25519 && legacy) {\n      return Ed25519Account.fromDerivationPath({ mnemonic, path });\n    }\n    return SingleKeyAccount.fromDerivationPath({ scheme, mnemonic, path });\n  }\n\n  /**\n   * @deprecated use `publicKey.authKey()` instead.\n   * This key enables account owners to rotate their private key(s)\n   * associated with the account without changing the address that hosts their account.\n   * See here for more info: {@link https://aptos.dev/concepts/accounts#single-signer-authentication}\n   *\n   * @param args.publicKey PublicKey - public key of the account\n   * @returns The authentication key for the associated account\n   */\n  static authKey(args: { publicKey: AccountPublicKey }): AuthenticationKey {\n    const { publicKey } = args;\n    return publicKey.authKey();\n  }\n\n  /**\n   * Sign a message using the available signing capabilities.\n   * @param message the signing message, as binary input\n   * @return the AccountAuthenticator containing the signature, together with the account's public key\n   */\n  abstract signWithAuthenticator(message: HexInput): AccountAuthenticator;\n\n  /**\n   * Sign the given message with the private key.\n   * @param message in HexInput format\n   * @returns AccountSignature\n   */\n  abstract sign(message: HexInput): Signature;\n\n  /**\n   * @param args.message raw message data in HexInput format\n   * @param args.signature signed message signature\n   */\n  verifySignature(args: VerifySignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n}\n","import * as Types from \"./operations\";\n\nimport { GraphQLClient } from \"graphql-request\";\nimport { GraphQLClientRequestHeaders } from \"graphql-request/build/cjs/types\";\nexport const TokenActivitiesFieldsFragmentDoc = `\n    fragment TokenActivitiesFields on token_activities_v2 {\n  after_value\n  before_value\n  entry_function_id_str\n  event_account_address\n  event_index\n  from_address\n  is_fungible_v2\n  property_version_v1\n  to_address\n  token_amount\n  token_data_id\n  token_standard\n  transaction_timestamp\n  transaction_version\n  type\n}\n    `;\nexport const AnsTokenFragmentFragmentDoc = `\n    fragment AnsTokenFragment on current_aptos_names {\n  domain\n  expiration_timestamp\n  registered_address\n  subdomain\n  token_standard\n  is_primary\n  owner_address\n}\n    `;\nexport const CurrentTokenOwnershipFieldsFragmentDoc = `\n    fragment CurrentTokenOwnershipFields on current_token_ownerships_v2 {\n  token_standard\n  token_properties_mutated_v1\n  token_data_id\n  table_type_v1\n  storage_id\n  property_version_v1\n  owner_address\n  last_transaction_version\n  last_transaction_timestamp\n  is_soulbound_v2\n  is_fungible_v2\n  amount\n  current_token_data {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    decimals\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\nexport const GetAccountCoinsCount = `\n    query getAccountCoinsCount($address: String) {\n  current_fungible_asset_balances_aggregate(\n    where: {owner_address: {_eq: $address}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountCoinsData = `\n    query getAccountCoinsData($where_condition: current_fungible_asset_balances_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_fungible_asset_balances_order_by!]) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n    metadata {\n      token_standard\n      symbol\n      supply_aggregator_table_key_v1\n      supply_aggregator_table_handle_v1\n      project_uri\n      name\n      last_transaction_version\n      last_transaction_timestamp\n      icon_uri\n      decimals\n      creator_address\n      asset_type\n    }\n  }\n}\n    `;\nexport const GetAccountCollectionsWithOwnedTokens = `\n    query getAccountCollectionsWithOwnedTokens($where_condition: current_collection_ownership_v2_view_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collection_ownership_v2_view_order_by!]) {\n  current_collection_ownership_v2_view(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      mutable_description\n      max_supply\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n    collection_id\n    collection_name\n    collection_uri\n    creator_address\n    distinct_tokens\n    last_transaction_version\n    owner_address\n    single_token_uri\n  }\n}\n    `;\nexport const GetAccountOwnedObjects = `\n    query getAccountOwnedObjects($where_condition: current_objects_bool_exp, $offset: Int, $limit: Int, $order_by: [current_objects_order_by!]) {\n  current_objects(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    allow_ungated_transfer\n    state_key_hash\n    owner_address\n    object_address\n    last_transaction_version\n    last_guid_creation_num\n    is_deleted\n  }\n}\n    `;\nexport const GetAccountOwnedTokens = `\n    query getAccountOwnedTokens($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountOwnedTokensByTokenData = `\n    query getAccountOwnedTokensByTokenData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountOwnedTokensFromCollection = `\n    query getAccountOwnedTokensFromCollection($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountTokensCount = `\n    query getAccountTokensCount($where_condition: current_token_ownerships_v2_bool_exp, $offset: Int, $limit: Int) {\n  current_token_ownerships_v2_aggregate(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountTransactionsCount = `\n    query getAccountTransactionsCount($address: String) {\n  account_transactions_aggregate(where: {account_address: {_eq: $address}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetChainTopUserTransactions = `\n    query getChainTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    `;\nexport const GetCollectionData = `\n    query getCollectionData($where_condition: current_collections_v2_bool_exp!) {\n  current_collections_v2(where: $where_condition) {\n    collection_id\n    collection_name\n    creator_address\n    current_supply\n    description\n    last_transaction_timestamp\n    last_transaction_version\n    max_supply\n    mutable_description\n    mutable_uri\n    table_handle_v1\n    token_standard\n    total_minted_v2\n    uri\n  }\n}\n    `;\nexport const GetCurrentFungibleAssetBalances = `\n    query getCurrentFungibleAssetBalances($where_condition: current_fungible_asset_balances_bool_exp, $offset: Int, $limit: Int) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n  }\n}\n    `;\nexport const GetDelegatedStakingActivities = `\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    `;\nexport const GetEvents = `\n    query getEvents($where_condition: events_bool_exp, $offset: Int, $limit: Int, $order_by: [events_order_by!]) {\n  events(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    account_address\n    creation_number\n    data\n    event_index\n    sequence_number\n    transaction_block_height\n    transaction_version\n    type\n    indexed_type\n  }\n}\n    `;\nexport const GetFungibleAssetActivities = `\n    query getFungibleAssetActivities($where_condition: fungible_asset_activities_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_activities(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    block_height\n    entry_function_id_str\n    event_index\n    gas_fee_payer_address\n    is_frozen\n    is_gas_fee\n    is_transaction_success\n    owner_address\n    storage_id\n    storage_refund_amount\n    token_standard\n    transaction_timestamp\n    transaction_version\n    type\n  }\n}\n    `;\nexport const GetFungibleAssetMetadata = `\n    query getFungibleAssetMetadata($where_condition: fungible_asset_metadata_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_metadata(where: $where_condition, offset: $offset, limit: $limit) {\n    icon_uri\n    project_uri\n    supply_aggregator_table_handle_v1\n    supply_aggregator_table_key_v1\n    creator_address\n    asset_type\n    decimals\n    last_transaction_timestamp\n    last_transaction_version\n    name\n    symbol\n    token_standard\n  }\n}\n    `;\nexport const GetNames = `\n    query getNames($offset: Int, $limit: Int, $where_condition: current_aptos_names_bool_exp, $order_by: [current_aptos_names_order_by!]) {\n  current_aptos_names(\n    limit: $limit\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n  ) {\n    ...AnsTokenFragment\n  }\n}\n    ${AnsTokenFragmentFragmentDoc}`;\nexport const GetNumberOfDelegators = `\n    query getNumberOfDelegators($where_condition: num_active_delegator_per_pool_bool_exp, $order_by: [num_active_delegator_per_pool_order_by!]) {\n  num_active_delegator_per_pool(where: $where_condition, order_by: $order_by) {\n    num_active_delegator\n    pool_address\n  }\n}\n    `;\nexport const GetProcessorStatus = `\n    query getProcessorStatus($where_condition: processor_status_bool_exp) {\n  processor_status(where: $where_condition) {\n    last_success_version\n    processor\n    last_updated\n  }\n}\n    `;\nexport const GetTokenActivity = `\n    query getTokenActivity($where_condition: token_activities_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [token_activities_v2_order_by!]) {\n  token_activities_v2(\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n    limit: $limit\n  ) {\n    ...TokenActivitiesFields\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`;\nexport const GetCurrentTokenOwnership = `\n    query getCurrentTokenOwnership($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetTokenData = `\n    query getTokenData($where_condition: current_token_datas_v2_bool_exp, $offset: Int, $limit: Int, $order_by: [current_token_datas_v2_order_by!]) {\n  current_token_datas_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    decimals\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(\n  action: (requestHeaders?: Record<string, string>) => Promise<T>,\n  operationName: string,\n  operationType?: string,\n) => Promise<T>;\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getAccountCoinsCount(\n      variables?: Types.GetAccountCoinsCountQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountCoinsCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCoinsCountQuery>(GetAccountCoinsCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountCoinsCount\",\n        \"query\",\n      );\n    },\n    getAccountCoinsData(\n      variables: Types.GetAccountCoinsDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountCoinsDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCoinsDataQuery>(GetAccountCoinsData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountCoinsData\",\n        \"query\",\n      );\n    },\n    getAccountCollectionsWithOwnedTokens(\n      variables: Types.GetAccountCollectionsWithOwnedTokensQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountCollectionsWithOwnedTokensQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCollectionsWithOwnedTokensQuery>(\n            GetAccountCollectionsWithOwnedTokens,\n            variables,\n            { ...requestHeaders, ...wrappedRequestHeaders },\n          ),\n        \"getAccountCollectionsWithOwnedTokens\",\n        \"query\",\n      );\n    },\n    getAccountOwnedObjects(\n      variables?: Types.GetAccountOwnedObjectsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedObjectsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedObjectsQuery>(GetAccountOwnedObjects, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedObjects\",\n        \"query\",\n      );\n    },\n    getAccountOwnedTokens(\n      variables: Types.GetAccountOwnedTokensQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedTokensQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensQuery>(GetAccountOwnedTokens, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedTokens\",\n        \"query\",\n      );\n    },\n    getAccountOwnedTokensByTokenData(\n      variables: Types.GetAccountOwnedTokensByTokenDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedTokensByTokenDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensByTokenDataQuery>(GetAccountOwnedTokensByTokenData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedTokensByTokenData\",\n        \"query\",\n      );\n    },\n    getAccountOwnedTokensFromCollection(\n      variables: Types.GetAccountOwnedTokensFromCollectionQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedTokensFromCollectionQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensFromCollectionQuery>(\n            GetAccountOwnedTokensFromCollection,\n            variables,\n            { ...requestHeaders, ...wrappedRequestHeaders },\n          ),\n        \"getAccountOwnedTokensFromCollection\",\n        \"query\",\n      );\n    },\n    getAccountTokensCount(\n      variables?: Types.GetAccountTokensCountQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountTokensCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountTokensCountQuery>(GetAccountTokensCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountTokensCount\",\n        \"query\",\n      );\n    },\n    getAccountTransactionsCount(\n      variables?: Types.GetAccountTransactionsCountQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountTransactionsCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountTransactionsCountQuery>(GetAccountTransactionsCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountTransactionsCount\",\n        \"query\",\n      );\n    },\n    getChainTopUserTransactions(\n      variables?: Types.GetChainTopUserTransactionsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetChainTopUserTransactionsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetChainTopUserTransactionsQuery>(GetChainTopUserTransactions, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getChainTopUserTransactions\",\n        \"query\",\n      );\n    },\n    getCollectionData(\n      variables: Types.GetCollectionDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetCollectionDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCollectionDataQuery>(GetCollectionData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCollectionData\",\n        \"query\",\n      );\n    },\n    getCurrentFungibleAssetBalances(\n      variables?: Types.GetCurrentFungibleAssetBalancesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetCurrentFungibleAssetBalancesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCurrentFungibleAssetBalancesQuery>(GetCurrentFungibleAssetBalances, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCurrentFungibleAssetBalances\",\n        \"query\",\n      );\n    },\n    getDelegatedStakingActivities(\n      variables?: Types.GetDelegatedStakingActivitiesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetDelegatedStakingActivitiesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetDelegatedStakingActivitiesQuery>(GetDelegatedStakingActivities, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getDelegatedStakingActivities\",\n        \"query\",\n      );\n    },\n    getEvents(\n      variables?: Types.GetEventsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetEventsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetEventsQuery>(GetEvents, variables, { ...requestHeaders, ...wrappedRequestHeaders }),\n        \"getEvents\",\n        \"query\",\n      );\n    },\n    getFungibleAssetActivities(\n      variables?: Types.GetFungibleAssetActivitiesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetFungibleAssetActivitiesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetFungibleAssetActivitiesQuery>(GetFungibleAssetActivities, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getFungibleAssetActivities\",\n        \"query\",\n      );\n    },\n    getFungibleAssetMetadata(\n      variables?: Types.GetFungibleAssetMetadataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetFungibleAssetMetadataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetFungibleAssetMetadataQuery>(GetFungibleAssetMetadata, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getFungibleAssetMetadata\",\n        \"query\",\n      );\n    },\n    getNames(\n      variables?: Types.GetNamesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetNamesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetNamesQuery>(GetNames, variables, { ...requestHeaders, ...wrappedRequestHeaders }),\n        \"getNames\",\n        \"query\",\n      );\n    },\n    getNumberOfDelegators(\n      variables?: Types.GetNumberOfDelegatorsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetNumberOfDelegatorsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetNumberOfDelegatorsQuery>(GetNumberOfDelegators, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getNumberOfDelegators\",\n        \"query\",\n      );\n    },\n    getProcessorStatus(\n      variables?: Types.GetProcessorStatusQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetProcessorStatusQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetProcessorStatusQuery>(GetProcessorStatus, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getProcessorStatus\",\n        \"query\",\n      );\n    },\n    getTokenActivity(\n      variables: Types.GetTokenActivityQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTokenActivityQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTokenActivityQuery>(GetTokenActivity, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTokenActivity\",\n        \"query\",\n      );\n    },\n    getCurrentTokenOwnership(\n      variables: Types.GetCurrentTokenOwnershipQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetCurrentTokenOwnershipQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCurrentTokenOwnershipQuery>(GetCurrentTokenOwnership, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCurrentTokenOwnership\",\n        \"query\",\n      );\n    },\n    getTokenData(\n      variables?: Types.GetTokenDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTokenDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTokenDataQuery>(GetTokenData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTokenData\",\n        \"query\",\n      );\n    },\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/general}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * general namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { getAptosFullNode, postAptosFullNode, postAptosIndexer } from \"../client\";\nimport {\n  AnyNumber,\n  Block,\n  GetChainTopUserTransactionsResponse,\n  GetProcessorStatusResponse,\n  GraphqlQuery,\n  LedgerInfo,\n  LedgerVersionArg,\n  MoveValue,\n  TableItemRequest,\n  ViewRequest,\n  InputViewRequestData,\n} from \"../types\";\nimport { GetChainTopUserTransactionsQuery, GetProcessorStatusQuery } from \"../types/generated/operations\";\nimport { GetChainTopUserTransactions, GetProcessorStatus } from \"../types/generated/queries\";\nimport { ProcessorType } from \"../utils/const\";\n\nexport async function getLedgerInfo(args: { aptosConfig: AptosConfig }): Promise<LedgerInfo> {\n  const { aptosConfig } = args;\n  const { data } = await getAptosFullNode<{}, LedgerInfo>({\n    aptosConfig,\n    originMethod: \"getLedgerInfo\",\n    path: \"\",\n  });\n  return data;\n}\n\nexport async function getBlockByVersion(args: {\n  aptosConfig: AptosConfig;\n  ledgerVersion: AnyNumber;\n  options?: { withTransactions?: boolean };\n}): Promise<Block> {\n  const { aptosConfig, ledgerVersion, options } = args;\n  const { data } = await getAptosFullNode<{}, Block>({\n    aptosConfig,\n    originMethod: \"getBlockByVersion\",\n    path: `blocks/by_version/${ledgerVersion}`,\n    params: { with_transactions: options?.withTransactions },\n  });\n  return data;\n}\n\nexport async function getBlockByHeight(args: {\n  aptosConfig: AptosConfig;\n  blockHeight: AnyNumber;\n  options?: { withTransactions?: boolean };\n}): Promise<Block> {\n  const { aptosConfig, blockHeight, options } = args;\n  const { data } = await getAptosFullNode<{}, Block>({\n    aptosConfig,\n    originMethod: \"getBlockByHeight\",\n    path: `blocks/by_height/${blockHeight}`,\n    params: { with_transactions: options?.withTransactions },\n  });\n  return data;\n}\n\nexport async function getTableItem<T>(args: {\n  aptosConfig: AptosConfig;\n  handle: string;\n  data: TableItemRequest;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, handle, data, options } = args;\n  const response = await postAptosFullNode<TableItemRequest, any>({\n    aptosConfig,\n    originMethod: \"getTableItem\",\n    path: `tables/${handle}/item`,\n    params: { ledger_version: options?.ledgerVersion },\n    body: data,\n  });\n  return response.data as T;\n}\n\nexport async function view<T extends Array<MoveValue> = Array<MoveValue>>(args: {\n  aptosConfig: AptosConfig;\n  payload: InputViewRequestData;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, payload, options } = args;\n  const { data } = await postAptosFullNode<ViewRequest, MoveValue[]>({\n    aptosConfig,\n    originMethod: \"view\",\n    path: \"view\",\n    params: { ledger_version: options?.ledgerVersion },\n    body: {\n      function: payload.function,\n      type_arguments: payload.typeArguments ?? [],\n      arguments: payload.functionArguments ?? [],\n    },\n  });\n\n  return data as T;\n}\n\nexport async function getChainTopUserTransactions(args: {\n  aptosConfig: AptosConfig;\n  limit: number;\n}): Promise<GetChainTopUserTransactionsResponse> {\n  const { aptosConfig, limit } = args;\n  const graphqlQuery = {\n    query: GetChainTopUserTransactions,\n    variables: { limit },\n  };\n\n  const data = await queryIndexer<GetChainTopUserTransactionsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getChainTopUserTransactions\",\n  });\n\n  return data.user_transactions;\n}\n\nexport async function queryIndexer<T extends {}>(args: {\n  aptosConfig: AptosConfig;\n  query: GraphqlQuery;\n  originMethod?: string;\n}): Promise<T> {\n  const { aptosConfig, query, originMethod } = args;\n  const { data } = await postAptosIndexer<GraphqlQuery, T>({\n    aptosConfig,\n    originMethod: originMethod ?? \"queryIndexer\",\n    path: \"\",\n    body: query,\n    overrides: { WITH_CREDENTIALS: false },\n  });\n  return data;\n}\n\nexport async function getProcessorStatuses(args: { aptosConfig: AptosConfig }): Promise<GetProcessorStatusResponse> {\n  const { aptosConfig } = args;\n\n  const graphqlQuery = {\n    query: GetProcessorStatus,\n  };\n\n  const data = await queryIndexer<GetProcessorStatusQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getProcessorStatuses\",\n  });\n\n  return data.processor_status;\n}\n\nexport async function getIndexerLastSuccessVersion(args: { aptosConfig: AptosConfig }): Promise<bigint> {\n  const response = await getProcessorStatuses({ aptosConfig: args.aptosConfig });\n  return BigInt(response[0].last_success_version);\n}\n\nexport async function getProcessorStatus(args: {\n  aptosConfig: AptosConfig;\n  processorType: ProcessorType;\n}): Promise<GetProcessorStatusResponse[0]> {\n  const { aptosConfig, processorType } = args;\n\n  const whereCondition: { processor: { _eq: string } } = {\n    processor: { _eq: processorType.valueOf() },\n  };\n\n  const graphqlQuery = {\n    query: GetProcessorStatus,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetProcessorStatusQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getProcessorStatus\",\n  });\n\n  return data.processor_status[0];\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * The global cache Map shared across all functions.  Must keep care to ensure that the\n * cache keys are unique across all functions.\n */\nconst cache = new Map<string, { value: any; timestamp: number }>();\n\n/**\n * A memoize high order function to cache async function response\n *\n * @param func An async function to cache the result of\n * @param key The provided cache key\n * @param ttlMs time-to-live in milliseconds for cached data\n * @returns the cached or latest result\n */\nexport function memoizeAsync<T>(\n  func: (...args: any[]) => Promise<T>,\n  key: string,\n  ttlMs?: number,\n): (...args: any[]) => Promise<T> {\n  return async (...args: any[]) => {\n    // Check if the cached result exists and is within TTL\n    if (cache.has(key)) {\n      const { value, timestamp } = cache.get(key)!;\n      if (ttlMs === undefined || Date.now() - timestamp <= ttlMs) {\n        return value;\n      }\n    }\n\n    // If not cached or TTL expired, compute the result\n    const result = await func(...args);\n\n    // Cache the result with a timestamp\n    cache.set(key, { value: result, timestamp: Date.now() });\n\n    return result;\n  };\n}\n\n/**\n * A memoize high order function to cache function response\n *\n * @param func A function to cache the result of\n * @param key The provided cache key\n * @param ttlMs time-to-live in milliseconds for cached data\n * @returns the cached or latest result\n */\nexport function memoize<T>(func: (...args: any[]) => T, key: string, ttlMs?: number): (...args: any[]) => T {\n  return (...args: any[]) => {\n    // Check if the cached result exists and is within TTL\n    if (cache.has(key)) {\n      const { value, timestamp } = cache.get(key)!;\n      if (ttlMs === undefined || Date.now() - timestamp <= ttlMs) {\n        return value;\n      }\n    }\n\n    // If not cached or TTL expired, compute the result\n    const result = func(...args);\n\n    // Cache the result with a timestamp\n    cache.set(key, { value: result, timestamp: Date.now() });\n\n    return result;\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/account}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * account namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AptosApiError, getAptosFullNode, paginateWithCursor } from \"../client\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { Account } from \"../core/account\";\nimport { AnyPublicKey, Ed25519PublicKey, PrivateKey } from \"../core/crypto\";\nimport { getTableItem, queryIndexer } from \"./general\";\nimport {\n  AccountData,\n  GetAccountCoinsDataResponse,\n  GetAccountCollectionsWithOwnedTokenResponse,\n  GetAccountOwnedObjectsResponse,\n  GetAccountOwnedTokensFromCollectionResponse,\n  GetAccountOwnedTokensQueryResponse,\n  LedgerVersionArg,\n  MoveModuleBytecode,\n  MoveResource,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  SigningScheme,\n  TokenStandardArg,\n  TransactionResponse,\n  WhereArg,\n} from \"../types\";\nimport {\n  GetAccountCoinsCountQuery,\n  GetAccountCoinsDataQuery,\n  GetAccountCollectionsWithOwnedTokensQuery,\n  GetAccountOwnedObjectsQuery,\n  GetAccountOwnedTokensFromCollectionQuery,\n  GetAccountOwnedTokensQuery,\n  GetAccountTokensCountQuery,\n  GetAccountTransactionsCountQuery,\n} from \"../types/generated/operations\";\nimport {\n  GetAccountCoinsCount,\n  GetAccountCoinsData,\n  GetAccountCollectionsWithOwnedTokens,\n  GetAccountOwnedObjects,\n  GetAccountOwnedTokens,\n  GetAccountOwnedTokensFromCollection,\n  GetAccountTokensCount,\n  GetAccountTransactionsCount,\n} from \"../types/generated/queries\";\nimport { memoizeAsync } from \"../utils/memoize\";\nimport { Secp256k1PrivateKey, AuthenticationKey, Ed25519PrivateKey } from \"../core\";\nimport { CurrentFungibleAssetBalancesBoolExp } from \"../types/generated/types\";\n\nexport async function getInfo(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<AccountData> {\n  const { aptosConfig, accountAddress } = args;\n  const { data } = await getAptosFullNode<{}, AccountData>({\n    aptosConfig,\n    originMethod: \"getInfo\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}`,\n  });\n  return data;\n}\n\nexport async function getModules(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs & LedgerVersionArg;\n}): Promise<MoveModuleBytecode[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithCursor<{}, MoveModuleBytecode[]>({\n    aptosConfig,\n    originMethod: \"getModules\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/modules`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      start: options?.offset,\n      limit: options?.limit ?? 1000,\n    },\n  });\n}\n\n/**\n * Queries for a move module given account address and module name\n *\n * @param args.accountAddress Hex-encoded 32 byte Aptos account address\n * @param args.moduleName The name of the module\n * @param args.query.ledgerVersion Specifies ledger version of transactions. By default, latest version will be used\n * @returns The move module.\n */\nexport async function getModule(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  moduleName: string;\n  options?: LedgerVersionArg;\n}): Promise<MoveModuleBytecode> {\n  // We don't memoize the account module by ledger version, as it's not a common use case, this would be handled\n  // by the developer directly\n  if (args.options?.ledgerVersion !== undefined) {\n    return getModuleInner(args);\n  }\n\n  return memoizeAsync(\n    async () => getModuleInner(args),\n    `module-${args.accountAddress}-${args.moduleName}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n}\n\nasync function getModuleInner(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  moduleName: string;\n  options?: LedgerVersionArg;\n}): Promise<MoveModuleBytecode> {\n  const { aptosConfig, accountAddress, moduleName, options } = args;\n\n  const { data } = await getAptosFullNode<{}, MoveModuleBytecode>({\n    aptosConfig,\n    originMethod: \"getModule\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/module/${moduleName}`,\n    params: { ledger_version: options?.ledgerVersion },\n  });\n  return data;\n}\n\nexport async function getTransactions(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs;\n}): Promise<TransactionResponse[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithCursor<{}, TransactionResponse[]>({\n    aptosConfig,\n    originMethod: \"getTransactions\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/transactions`,\n    params: { start: options?.offset, limit: options?.limit },\n  });\n}\n\nexport async function getResources(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs & LedgerVersionArg;\n}): Promise<MoveResource[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithCursor<{}, MoveResource[]>({\n    aptosConfig,\n    originMethod: \"getResources\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/resources`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      start: options?.offset,\n      limit: options?.limit ?? 999,\n    },\n  });\n}\n\nexport async function getResource<T extends {}>(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  resourceType: MoveStructId;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, accountAddress, resourceType, options } = args;\n  const { data } = await getAptosFullNode<{}, MoveResource>({\n    aptosConfig,\n    originMethod: \"getResource\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/resource/${resourceType}`,\n    params: { ledger_version: options?.ledgerVersion },\n  });\n  return data.data as T;\n}\n\nexport async function lookupOriginalAccountAddress(args: {\n  aptosConfig: AptosConfig;\n  authenticationKey: AccountAddressInput;\n  options?: LedgerVersionArg;\n}): Promise<AccountAddress> {\n  const { aptosConfig, authenticationKey, options } = args;\n  type OriginatingAddress = {\n    address_map: { handle: string };\n  };\n  const resource = await getResource<OriginatingAddress>({\n    aptosConfig,\n    accountAddress: \"0x1\",\n    resourceType: \"0x1::account::OriginatingAddress\",\n    options,\n  });\n\n  const {\n    address_map: { handle },\n  } = resource;\n\n  const authKeyAddress = AccountAddress.from(authenticationKey);\n\n  // If the address is not found in the address map, which means its not rotated\n  // then return the address as is\n  try {\n    const originalAddress = await getTableItem<string>({\n      aptosConfig,\n      handle,\n      data: {\n        key: authKeyAddress.toString(),\n        key_type: \"address\",\n        value_type: \"address\",\n      },\n      options,\n    });\n\n    return AccountAddress.from(originalAddress);\n  } catch (err) {\n    if (err instanceof AptosApiError && err.data.error_code === \"table_item_not_found\") {\n      return authKeyAddress;\n    }\n\n    throw err;\n  }\n}\n\nexport async function getAccountTokensCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string }; amount: { _gt: number } } = {\n    owner_address: { _eq: address },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetAccountTokensCount,\n    variables: { where_condition: whereCondition },\n  };\n\n  const data = await queryIndexer<GetAccountTokensCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountTokensCount\",\n  });\n\n  // commonjs (aka cjs) doesnt handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data.current_token_ownerships_v2_aggregate.aggregate\n    ? data.current_token_ownerships_v2_aggregate.aggregate.count\n    : 0;\n}\n\nexport async function getAccountOwnedTokens(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensQueryResponse[0]>;\n}): Promise<GetAccountOwnedTokensQueryResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string }; amount: { _gt: number }; token_standard?: { _eq: string } } =\n    {\n      owner_address: { _eq: address },\n      amount: { _gt: 0 },\n    };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountOwnedTokens,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountOwnedTokensQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedTokens\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\nexport async function getAccountOwnedTokensFromCollectionAddress(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  collectionAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensFromCollectionResponse[0]>;\n}): Promise<GetAccountOwnedTokensFromCollectionResponse> {\n  const { aptosConfig, accountAddress, collectionAddress, options } = args;\n  const ownerAddress = AccountAddress.from(accountAddress).toStringLong();\n  const collAddress = AccountAddress.from(collectionAddress).toStringLong();\n\n  const whereCondition: {\n    owner_address: { _eq: string };\n    current_token_data: { collection_id: { _eq: string } };\n    amount: { _gt: number };\n    token_standard?: { _eq: string };\n  } = {\n    owner_address: { _eq: ownerAddress },\n    current_token_data: { collection_id: { _eq: collAddress } },\n    amount: { _gt: 0 },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountOwnedTokensFromCollection,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountOwnedTokensFromCollectionQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedTokensFromCollectionAddress\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\nexport async function getAccountCollectionsWithOwnedTokens(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountCollectionsWithOwnedTokenResponse[0]>;\n}): Promise<GetAccountCollectionsWithOwnedTokenResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: {\n    owner_address: { _eq: string };\n    amount: { _gt: number };\n    current_collection?: { token_standard: { _eq: string } };\n  } = {\n    owner_address: { _eq: address },\n    amount: { _gt: 0 },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.current_collection = {\n      token_standard: { _eq: options?.tokenStandard },\n    };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountCollectionsWithOwnedTokens,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountCollectionsWithOwnedTokensQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCollectionsWithOwnedTokens\",\n  });\n\n  return data.current_collection_ownership_v2_view;\n}\n\nexport async function getAccountTransactionsCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const graphqlQuery = {\n    query: GetAccountTransactionsCount,\n    variables: { address },\n  };\n\n  const data = await queryIndexer<GetAccountTransactionsCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountTransactionsCount\",\n  });\n\n  // commonjs (aka cjs) doesnt handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data.account_transactions_aggregate.aggregate ? data.account_transactions_aggregate.aggregate.count : 0;\n}\n\nexport async function getAccountCoinAmount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  coinType: MoveStructId;\n}): Promise<number> {\n  const { aptosConfig, accountAddress, coinType } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const data = await getAccountCoinsData({\n    aptosConfig,\n    accountAddress: address,\n    options: {\n      where: { asset_type: { _eq: coinType } },\n    },\n  });\n\n  // commonjs (aka cjs) doesnt handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data[0] ? data[0].amount : 0;\n}\n\nexport async function getAccountCoinsData(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetAccountCoinsDataResponse[0]> & WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n}): Promise<GetAccountCoinsDataResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string } } = {\n    ...options?.where,\n    owner_address: { _eq: address },\n  };\n\n  const graphqlQuery = {\n    query: GetAccountCoinsData,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountCoinsDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCoinsData\",\n  });\n\n  return data.current_fungible_asset_balances;\n}\n\nexport async function getAccountCoinsCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const graphqlQuery = {\n    query: GetAccountCoinsCount,\n    variables: { address },\n  };\n\n  const data = await queryIndexer<GetAccountCoinsCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCoinsCount\",\n  });\n\n  if (!data.current_fungible_asset_balances_aggregate.aggregate) {\n    throw Error(\"Failed to get the count of account coins\");\n  }\n\n  return data.current_fungible_asset_balances_aggregate.aggregate.count;\n}\n\nexport async function getAccountOwnedObjects(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetAccountOwnedObjectsResponse[0]>;\n}): Promise<GetAccountOwnedObjectsResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string } } = {\n    owner_address: { _eq: address },\n  };\n  const graphqlQuery = {\n    query: GetAccountOwnedObjects,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n  const data = await queryIndexer<GetAccountOwnedObjectsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedObjects\",\n  });\n\n  return data.current_objects;\n}\n\n/**\n * NOTE: There is a potential issue once unified single signer scheme will be adopted\n * by the community.\n *\n * Becuase on could create 2 accounts with the same private key with this new authenticator type,\n * we’ll need to determine the order in which we lookup the accounts. First unified\n * scheme and then legacy scheme vs first legacy scheme and then unified scheme.\n *\n */\nexport async function deriveAccountFromPrivateKey(args: {\n  aptosConfig: AptosConfig;\n  privateKey: PrivateKey;\n}): Promise<Account> {\n  const { aptosConfig, privateKey } = args;\n  const publicKey = new AnyPublicKey(privateKey.publicKey());\n\n  if (privateKey instanceof Secp256k1PrivateKey) {\n    // private key is secp256k1, therefore we know it for sure uses a single signer key\n    const authKey = AuthenticationKey.fromPublicKeyAndScheme({ publicKey, scheme: SigningScheme.SingleKey });\n    const address = authKey.derivedAddress();\n    return Account.fromPrivateKeyAndAddress({ privateKey, address });\n  }\n\n  if (privateKey instanceof Ed25519PrivateKey) {\n    // lookup single sender ed25519\n    const singleSenderTransactionAuthenticatorAuthKey = AuthenticationKey.fromPublicKeyAndScheme({\n      publicKey,\n      scheme: SigningScheme.SingleKey,\n    });\n    const isSingleSenderTransactionAuthenticator = await isAccountExist({\n      authKey: singleSenderTransactionAuthenticatorAuthKey,\n      aptosConfig,\n    });\n    if (isSingleSenderTransactionAuthenticator) {\n      const address = singleSenderTransactionAuthenticatorAuthKey.derivedAddress();\n      return Account.fromPrivateKeyAndAddress({ privateKey, address, legacy: false });\n    }\n    // lookup legacy ed25519\n    const legacyAuthKey = AuthenticationKey.fromPublicKeyAndScheme({\n      publicKey: publicKey.publicKey as Ed25519PublicKey,\n      scheme: SigningScheme.Ed25519,\n    });\n    const isLegacyEd25519 = await isAccountExist({ authKey: legacyAuthKey, aptosConfig });\n    if (isLegacyEd25519) {\n      const address = legacyAuthKey.derivedAddress();\n      return Account.fromPrivateKeyAndAddress({ privateKey, address, legacy: true });\n    }\n  }\n  // if we are here, it means we couldn't find an address with an\n  // auth key that matches the provided private key\n  throw new Error(`Can't derive account from private key ${privateKey}`);\n}\n\nexport async function isAccountExist(args: { aptosConfig: AptosConfig; authKey: AuthenticationKey }): Promise<boolean> {\n  const { aptosConfig, authKey } = args;\n  const accountAddress = await lookupOriginalAccountAddress({\n    aptosConfig,\n    authenticationKey: authKey.derivedAddress(),\n  });\n\n  try {\n    await getInfo({\n      aptosConfig,\n      accountAddress,\n    });\n    return true;\n  } catch (error: any) {\n    // account not found\n    if (error.status === 404) {\n      return false;\n    }\n    throw new Error(`Error while looking for an account info ${accountAddress.toString()}`);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Sleep the current thread for the given amount of time\n * @param timeMs time in milliseconds to sleep\n */\nexport async function sleep(timeMs: number): Promise<null> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeMs);\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/transaction}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * transaction namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AptosApiError, getAptosFullNode, paginateWithCursor } from \"../client\";\nimport {\n  TransactionResponseType,\n  type AnyNumber,\n  type GasEstimation,\n  type HexInput,\n  type PaginationArgs,\n  type TransactionResponse,\n  WaitForTransactionOptions,\n  CommittedTransactionResponse,\n} from \"../types\";\nimport { DEFAULT_TXN_TIMEOUT_SEC, ProcessorType } from \"../utils/const\";\nimport { sleep } from \"../utils/helpers\";\nimport { memoizeAsync } from \"../utils/memoize\";\nimport { getIndexerLastSuccessVersion, getProcessorStatus } from \"./general\";\n\nexport async function getTransactions(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs;\n}): Promise<TransactionResponse[]> {\n  const { aptosConfig, options } = args;\n  return paginateWithCursor<{}, TransactionResponse[]>({\n    aptosConfig,\n    originMethod: \"getTransactions\",\n    path: \"transactions\",\n    params: { start: options?.offset, limit: options?.limit },\n  });\n}\n\nexport async function getGasPriceEstimation(args: { aptosConfig: AptosConfig }) {\n  const { aptosConfig } = args;\n\n  return memoizeAsync(\n    async () => {\n      const { data } = await getAptosFullNode<{}, GasEstimation>({\n        aptosConfig,\n        originMethod: \"getGasPriceEstimation\",\n        path: \"estimate_gas_price\",\n      });\n      return data;\n    },\n    `gas-price-${aptosConfig.network}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n}\n\nexport async function getTransactionByVersion(args: {\n  aptosConfig: AptosConfig;\n  ledgerVersion: AnyNumber;\n}): Promise<TransactionResponse> {\n  const { aptosConfig, ledgerVersion } = args;\n  const { data } = await getAptosFullNode<{}, TransactionResponse>({\n    aptosConfig,\n    originMethod: \"getTransactionByVersion\",\n    path: `transactions/by_version/${ledgerVersion}`,\n  });\n  return data;\n}\n\nexport async function getTransactionByHash(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n}): Promise<TransactionResponse> {\n  const { aptosConfig, transactionHash } = args;\n  const { data } = await getAptosFullNode<{}, TransactionResponse>({\n    aptosConfig,\n    path: `transactions/by_hash/${transactionHash}`,\n    originMethod: \"getTransactionByHash\",\n  });\n  return data;\n}\n\nexport async function isTransactionPending(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n}): Promise<boolean> {\n  const { aptosConfig, transactionHash } = args;\n  try {\n    const transaction = await getTransactionByHash({ aptosConfig, transactionHash });\n    return transaction.type === TransactionResponseType.Pending;\n  } catch (e: any) {\n    if (e?.status === 404) {\n      return true;\n    }\n    throw e;\n  }\n}\n\nexport async function waitForTransaction(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n  options?: WaitForTransactionOptions;\n}): Promise<CommittedTransactionResponse> {\n  const { aptosConfig, transactionHash, options } = args;\n  const timeoutSecs = options?.timeoutSecs ?? DEFAULT_TXN_TIMEOUT_SEC;\n  const checkSuccess = options?.checkSuccess ?? true;\n\n  let isPending = true;\n  let timeElapsed = 0;\n  let lastTxn: TransactionResponse | undefined;\n  let lastError: AptosApiError | undefined;\n  let backoffIntervalMs = 200;\n  const backoffMultiplier = 1.5;\n\n  while (isPending) {\n    if (timeElapsed >= timeoutSecs) {\n      break;\n    }\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      lastTxn = await getTransactionByHash({ aptosConfig, transactionHash });\n\n      isPending = lastTxn.type === TransactionResponseType.Pending;\n\n      if (!isPending) {\n        break;\n      }\n    } catch (e) {\n      // In short, this means we will retry if it was an AptosApiError and the code was 404 or 5xx.\n      const isAptosApiError = e instanceof AptosApiError;\n      if (!isAptosApiError) {\n        throw e; // This would be unexpected\n      }\n      lastError = e;\n      const isRequestError = e.status !== 404 && e.status >= 400 && e.status < 500;\n      if (isRequestError) {\n        throw e;\n      }\n    }\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(backoffIntervalMs);\n    timeElapsed += backoffIntervalMs / 1000; // Convert to seconds\n    backoffIntervalMs *= backoffMultiplier;\n  }\n\n  // There is a chance that lastTxn is still undefined. Let's throw the last error otherwise a WaitForTransactionError\n  if (lastTxn === undefined) {\n    if (lastError) {\n      throw lastError;\n    } else {\n      throw new WaitForTransactionError(\n        `Fetching transaction ${transactionHash} failed and timed out after ${timeoutSecs} seconds`,\n        lastTxn,\n      );\n    }\n  }\n\n  if (lastTxn.type === TransactionResponseType.Pending) {\n    throw new WaitForTransactionError(\n      `Transaction ${transactionHash} timed out in pending state after ${timeoutSecs} seconds`,\n      lastTxn,\n    );\n  }\n  if (!checkSuccess) {\n    return lastTxn;\n  }\n  if (!lastTxn.success) {\n    throw new FailedTransactionError(\n      `Transaction ${transactionHash} failed with an error: ${lastTxn.vm_status}`,\n      lastTxn,\n    );\n  }\n\n  return lastTxn;\n}\n\n/**\n * Waits for the indexer to sync up to the ledgerVersion. Timeout is 3 seconds.\n */\nexport async function waitForIndexer(args: {\n  aptosConfig: AptosConfig;\n  minimumLedgerVersion: AnyNumber;\n  processorType?: ProcessorType;\n}): Promise<void> {\n  const { aptosConfig, processorType } = args;\n  const minimumLedgerVersion = BigInt(args.minimumLedgerVersion);\n  const timeoutMilliseconds = 3000; // 3 seconds\n  const startTime = new Date().getTime();\n  let indexerVersion = BigInt(-1);\n\n  while (indexerVersion < minimumLedgerVersion) {\n    // check for timeout\n    if (new Date().getTime() - startTime > timeoutMilliseconds) {\n      throw new Error(\"waitForLastSuccessIndexerVersionSync timeout\");\n    }\n\n    if (processorType === undefined) {\n      // Get the last success version from all processor\n      // eslint-disable-next-line no-await-in-loop\n      indexerVersion = await getIndexerLastSuccessVersion({ aptosConfig });\n    } else {\n      // Get the last success version from the specific processor\n      // eslint-disable-next-line no-await-in-loop\n      const processor = await getProcessorStatus({ aptosConfig, processorType });\n      indexerVersion = processor.last_success_version;\n    }\n\n    if (indexerVersion >= minimumLedgerVersion) {\n      // break out immediately if we are synced\n      break;\n    }\n\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(200);\n  }\n}\n\n/**\n * This error is used by `waitForTransaction` when waiting for a\n * transaction to time out or when the transaction response is undefined\n */\nexport class WaitForTransactionError extends Error {\n  public readonly lastSubmittedTransaction: TransactionResponse | undefined;\n\n  constructor(message: string, lastSubmittedTransaction: TransactionResponse | undefined) {\n    super(message);\n    this.lastSubmittedTransaction = lastSubmittedTransaction;\n  }\n}\n\n/**\n * This error is used by `waitForTransaction` if `checkSuccess` is true.\n * See that function for more information.\n */\nexport class FailedTransactionError extends Error {\n  public readonly transaction: TransactionResponse;\n\n  constructor(message: string, transaction: TransactionResponse) {\n    super(message);\n    this.transaction = transaction;\n  }\n}\n","import { waitForIndexer } from \"../internal/transaction\";\nimport { ProcessorType } from \"../utils\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { AnyNumber } from \"../types\";\n\n/**\n * Utility function to handle optional waiting on indexer for APIs\n *\n * This is purposely placed here to not expose this internal function.\n * @param args\n */\nexport async function waitForIndexerOnVersion(args: {\n  config: AptosConfig;\n  minimumLedgerVersion?: AnyNumber;\n  processorType: ProcessorType;\n}) {\n  if (args.minimumLedgerVersion !== undefined) {\n    await waitForIndexer({\n      aptosConfig: args.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: args.processorType,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, PrivateKey, Account as AccountModule, AccountAddressInput } from \"../core\";\nimport {\n  AccountData,\n  AnyNumber,\n  GetAccountCoinsDataResponse,\n  GetAccountCollectionsWithOwnedTokenResponse,\n  GetAccountOwnedObjectsResponse,\n  GetAccountOwnedTokensFromCollectionResponse,\n  GetAccountOwnedTokensQueryResponse,\n  LedgerVersionArg,\n  MoveModuleBytecode,\n  MoveResource,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n  TransactionResponse,\n  WhereArg,\n} from \"../types\";\nimport {\n  deriveAccountFromPrivateKey,\n  getAccountCoinAmount,\n  getAccountCoinsCount,\n  getAccountCoinsData,\n  getAccountCollectionsWithOwnedTokens,\n  getAccountOwnedObjects,\n  getAccountOwnedTokens,\n  getAccountOwnedTokensFromCollectionAddress,\n  getAccountTokensCount,\n  getAccountTransactionsCount,\n  getInfo,\n  getModule,\n  getModules,\n  getResource,\n  getResources,\n  getTransactions,\n  lookupOriginalAccountAddress,\n} from \"../internal/account\";\nimport { APTOS_COIN, ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { CurrentFungibleAssetBalancesBoolExp } from \"../types/generated/types\";\n\n/**\n * A class to query all `Account` related queries on Aptos.\n */\nexport class Account {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries the current state for an Aptos account given its account address\n   *\n   * @param args.accountAddress Aptos account address\n   *\n   * @returns The account data\n   *\n   * @example An example of the returned account\n   * ```\n   * {\n   *    sequence_number: \"1\",\n   *    authentication_key: \"0x5307b5f4bc67829097a8ba9b43dba3b88261eeccd1f709d9bde240fc100fbb69\"\n   * }\n   * ```\n   */\n  async getAccountInfo(args: { accountAddress: AccountAddressInput }): Promise<AccountData> {\n    return getInfo({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for all modules in an account given an account address\n   *\n   * Note: In order to get all account modules, this function may call the API\n   * multiple times as it auto paginates.\n   *\n   * @param args.accountAddress Aptos account address\n   * @param args.options.offset The number module to start returning results from\n   * @param args.options.limit The number of results to return\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @returns Account modules\n   */\n\n  async getAccountModules(args: {\n    accountAddress: AccountAddressInput;\n    options?: PaginationArgs & LedgerVersionArg;\n  }): Promise<MoveModuleBytecode[]> {\n    return getModules({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a specific account module given account address and module name\n   *\n   * @param args.accountAddress Aptos account address\n   * @param args.moduleName The name of the module\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @returns Account module\n   *\n   * @example An example of an account module\n   * ```\n   * {\n   *    bytecode: \"0xa11ceb0b0600000006010002030206050807070f0d081c200\",\n   *    abi: { address: \"0x1\" }\n   * }\n   * ```\n   */\n  async getAccountModule(args: {\n    accountAddress: AccountAddressInput;\n    moduleName: string;\n    options?: LedgerVersionArg;\n  }): Promise<MoveModuleBytecode> {\n    return getModule({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries account transactions given an account address\n   *\n   * Note: In order to get all account transactions, this function may call the API\n   * multiple times as it auto paginates.\n   *\n   * @param args.accountAddress Aptos account address\n   * @param args.options.offset The number transaction to start returning results from\n   * @param args.options.limit The number of results to return\n   *\n   * @returns The account transactions\n   */\n  async getAccountTransactions(args: {\n    accountAddress: AccountAddressInput;\n    options?: PaginationArgs;\n  }): Promise<TransactionResponse[]> {\n    return getTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries all account resources given an account address\n   *\n   * Note: In order to get all account resources, this function may call the API\n   * multiple times as it auto paginates.\n   *\n   * @param args.accountAddress Aptos account address\n   * @param args.options.offset The number resource to start returning results from\n   * @param args.options.limit The number of results to return\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   * @returns Account resources\n   */\n  async getAccountResources(args: {\n    accountAddress: AccountAddressInput;\n    options?: PaginationArgs & LedgerVersionArg;\n  }): Promise<MoveResource[]> {\n    return getResources({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a specific account resource given account address and resource type. Note that the default is `any` in order\n   * to allow for ease of accessing properties of the object.\n   *\n   * @type The typed output of the resource\n   * @param args.accountAddress Aptos account address\n   * @param args.resourceType String representation of an on-chain Move struct type, i.e \"0x1::aptos_coin::AptosCoin\"\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @returns Account resource\n   *\n   * @example An example of an account resource\n   * ```\n   * {\n   *    value: 6\n   * }\n   * ```\n   */\n  async getAccountResource<T extends {} = any>(args: {\n    accountAddress: AccountAddressInput;\n    resourceType: MoveStructId;\n    options?: LedgerVersionArg;\n  }): Promise<T> {\n    return getResource<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Looks up the account address for a given authentication key\n   *\n   * This handles both if the account's authentication key has been rotated or not.\n   *\n   * @param args.authenticationKey The authentication key\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   * @returns Promise<AccountAddress> The accountAddress associated with the authentication key\n   */\n  async lookupOriginalAccountAddress(args: {\n    authenticationKey: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: LedgerVersionArg;\n  }): Promise<AccountAddress> {\n    return lookupOriginalAccountAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the current count of tokens owned by an account\n   *\n   * @param args.accountAddress The account address\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns Current count of tokens owned by the account\n   */\n  async getAccountTokensCount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.ACCOUNT_TRANSACTION_PROCESSOR,\n    });\n    return getAccountTokensCount({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the account's current owned tokens.\n   *\n   * This query returns all tokens (v1 and v2 standards) an account owns, including NFTs, fungible, soulbound, etc.\n   * If you want to get only the token from a specific standard, you can pass an optional tokenStandard param\n   *\n   * @param args.accountAddress The account address we want to get the tokens for\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.tokenStandard The NFT standard to query for\n   * @param args.options.offset The number token to start returning results from\n   * @param args.options.limit The number of results to return\n   * @param args.options.orderBy The order to sort the tokens by\n   * @returns Tokens array with the token data\n   */\n  async getAccountOwnedTokens(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensQueryResponse[0]>;\n  }): Promise<GetAccountOwnedTokensQueryResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getAccountOwnedTokens({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries all current tokens of a specific collection that an account owns by the collection address\n   *\n   * This query returns all tokens (v1 and v2 standards) an account owns, including NFTs, fungible, soulbound, etc.\n   * If you want to get only the token from a specific standard, you can pass an optional tokenStandard param\n   *\n   * @param args.accountAddress The account address we want to get the tokens for\n   * @param args.collectionAddress The address of the collection being queried\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.tokenStandard The NFT standard to query for\n   * @param args.options.offset The number token to start returning results from\n   * @param args.options.limit The number of results to return\n   * @param args.options.orderBy The order to sort the tokens by\n   * @returns Tokens array with the token data\n   */\n  async getAccountOwnedTokensFromCollectionAddress(args: {\n    accountAddress: AccountAddressInput;\n    collectionAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensFromCollectionResponse[0]>;\n  }): Promise<GetAccountOwnedTokensFromCollectionResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getAccountOwnedTokensFromCollectionAddress({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries for all collections that an account currently has tokens for.\n   *\n   * This query returns all tokens (v1 and v2 standards) an account owns, including NFTs, fungible, soulbound, etc.\n   * If you want to get only the token from a specific standard, you can pass an optional tokenStandard param\n   *\n   * @param args.accountAddress The account address we want to get the collections for\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.tokenStandard The NFT standard to query for\n   * @param args.options.offset The number collection to start returning results from\n   * @param args.options.limit The number of results to return\n   * @param args.options.orderBy The order to sort the tokens by\n   * @returns Collections array with the collections data\n   */\n  async getAccountCollectionsWithOwnedTokens(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountCollectionsWithOwnedTokenResponse[0]>;\n  }): Promise<GetAccountCollectionsWithOwnedTokenResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getAccountCollectionsWithOwnedTokens({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the current count of transactions submitted by an account\n   *\n   * @param args.accountAddress The account address we want to get the total count for\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns Current count of transactions made by an account\n   */\n  async getAccountTransactionsCount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.ACCOUNT_TRANSACTION_PROCESSOR,\n    });\n    return getAccountTransactionsCount({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries an account's coins data\n   *\n   * @param args.accountAddress The account address we want to get the coins data for\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.offset optional. The number coin to start returning results from\n   * @param args.options.limit optional. The number of results to return\n   * @param args.options.orderBy optional. The order to sort the coins by\n   * @param args.options.where optional. Filter the results by\n   * @returns Array with the coins data\n   */\n  async getAccountCoinsData(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs &\n      OrderByArg<GetAccountCoinsDataResponse[0]> &\n      WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n  }): Promise<GetAccountCoinsDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getAccountCoinsData({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the current count of an account's coins aggregated\n   *\n   * @param args.accountAddress The account address we want to get the total count for\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns Current count of the aggregated count of all account's coins\n   */\n  async getAccountCoinsCount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getAccountCoinsCount({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the account's APT amount\n   *\n   * @param args.accountAddress The account address we want to get the total count for\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns Current amount of account's APT\n   */\n  async getAccountAPTAmount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    return this.getAccountCoinAmount({ coinType: APTOS_COIN, ...args });\n  }\n\n  /**\n   * Queries the account's coin amount by the coin type\n   *\n   * @param args.accountAddress The account address we want to get the total count for\n   * @param args.coinType The coin type to query\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns Current amount of account's coin\n   */\n  async getAccountCoinAmount(args: {\n    accountAddress: AccountAddressInput;\n    coinType: MoveStructId;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getAccountCoinAmount({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries an account's owned objects\n   *\n   * @param args.accountAddress The account address we want to get the objects for\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.offset The starting position to start returning results from\n   * @param args.options.limit The number of results to return\n   * @param args.options.orderBy The order to sort the objects by\n   * @returns Objects array with the object data\n   */\n  async getAccountOwnedObjects(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetAccountOwnedObjectsResponse[0]>;\n  }): Promise<GetAccountOwnedObjectsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.DEFAULT,\n    });\n    return getAccountOwnedObjects({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Derives an account by providing a private key.\n   * This functions resolves the provided private key type and derives the public key from it.\n   *\n   * If the privateKey is a Secp256k1 type, it derives the account using the derived public key and\n   * auth key using the SingleKey scheme locally.\n   *\n   * If the privateKey is a ED25519 type, it looks up the authentication key on chain, and uses it to resolve\n   * whether it is a Legacy ED25519 key or a Unified ED25519 key. It then derives the account based\n   * on that.\n   *\n   * @param args.privateKey An account private key\n   * @returns Account type\n   */\n  async deriveAccountFromPrivateKey(args: { privateKey: PrivateKey }): Promise<AccountModule> {\n    return deriveAccountFromPrivateKey({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport aptosClient from \"@aptos-labs/aptos-client\";\nimport { AptosSettings, ClientConfig, Client } from \"../types\";\nimport { NetworkToNodeAPI, NetworkToFaucetAPI, NetworkToIndexerAPI, Network } from \"../utils/apiEndpoints\";\nimport { AptosApiType } from \"../utils/const\";\n\n/**\n * This class holds the config information for the SDK client instance.\n */\nexport class AptosConfig {\n  /** The Network that this SDK is associated with. Defaults to DEVNET */\n  readonly network: Network;\n\n  /**\n   * The client instance the SDK uses. Defaults to `@aptos-labs/aptos-client\n   */\n  readonly client: Client;\n\n  /**\n   * The optional hardcoded fullnode URL to send requests to instead of using the network\n   */\n  readonly fullnode?: string;\n\n  /**\n   * The optional hardcoded faucet URL to send requests to instead of using the network\n   */\n  readonly faucet?: string;\n\n  /**\n   * The optional hardcoded indexer URL to send requests to instead of using the network\n   */\n  readonly indexer?: string;\n\n  readonly clientConfig?: ClientConfig;\n\n  constructor(settings?: AptosSettings) {\n    this.network = settings?.network ?? Network.DEVNET;\n    this.fullnode = settings?.fullnode;\n    this.faucet = settings?.faucet;\n    this.indexer = settings?.indexer;\n    this.client = settings?.client ?? { provider: aptosClient };\n    this.clientConfig = settings?.clientConfig ?? {};\n  }\n\n  /**\n   * Returns the URL endpoint to send the request to.\n   * If a custom URL was provided in the config, that URL is returned.\n   * If a custom URL was provided but not URL endpoints, an error is thrown.\n   * Otherwise, the URL endpoint is derived from the network.\n   *\n   * @param apiType - The type of Aptos API to get the URL for.\n   *\n   * @internal\n   */\n  getRequestUrl(apiType: AptosApiType): string {\n    switch (apiType) {\n      case AptosApiType.FULLNODE:\n        if (this.fullnode !== undefined) return this.fullnode;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom full node url\");\n        return NetworkToNodeAPI[this.network];\n      case AptosApiType.FAUCET:\n        if (this.faucet !== undefined) return this.faucet;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom faucet url\");\n        return NetworkToFaucetAPI[this.network];\n      case AptosApiType.INDEXER:\n        if (this.indexer !== undefined) return this.indexer;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom indexer url\");\n        return NetworkToIndexerAPI[this.network];\n      default:\n        throw Error(`apiType ${apiType} is not supported`);\n    }\n  }\n\n  /**\n   * Checks if the URL is a known indexer endpoint\n   *\n   * @internal\n   * */\n  isIndexerRequest(url: string): boolean {\n    return NetworkToIndexerAPI[this.network] === url;\n  }\n\n  /**\n   * Checks if the URL is a known fullnode endpoint\n   *\n   * @internal\n   * */\n  isFullnodeRequest(url: string): boolean {\n    return NetworkToNodeAPI[this.network] === url;\n  }\n\n  /**\n   * Checks if the URL is a known faucet endpoint\n   *\n   * @internal\n   * */\n  isFaucetRequest(url: string): boolean {\n    return NetworkToFaucetAPI[this.network] === url;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport const NetworkToIndexerAPI: Record<string, string> = {\n  mainnet: \"https://indexer.mainnet.aptoslabs.com/v1/graphql\",\n  testnet: \"https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\",\n  devnet: \"https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql\",\n  randomnet: \"https://indexer-randomnet.hasura.app/v1/graphql\",\n  local: \"http://127.0.0.1:8090/v1/graphql\",\n};\n\nexport const NetworkToNodeAPI: Record<string, string> = {\n  mainnet: \"https://api.mainnet.aptoslabs.com/v1\",\n  testnet: \"https://api.testnet.aptoslabs.com/v1\",\n  devnet: \"https://api.devnet.aptoslabs.com/v1\",\n  randomnet: \"https://fullnode.random.aptoslabs.com/v1\",\n  local: \"http://127.0.0.1:8080/v1\",\n};\n\nexport const NetworkToFaucetAPI: Record<string, string> = {\n  mainnet: \"https://faucet.mainnet.aptoslabs.com\",\n  testnet: \"https://faucet.testnet.aptoslabs.com\",\n  devnet: \"https://faucet.devnet.aptoslabs.com\",\n  randomnet: \"https://faucet.random.aptoslabs.com\",\n  local: \"http://127.0.0.1:8081\",\n};\n\nexport enum Network {\n  MAINNET = \"mainnet\",\n  TESTNET = \"testnet\",\n  DEVNET = \"devnet\",\n  RANDOMNET = \"randomnet\",\n  LOCAL = \"local\",\n  CUSTOM = \"custom\",\n}\n\nexport const NetworkToChainId: Record<string, number> = {\n  mainnet: 1,\n  testnet: 2,\n  randomnet: 70,\n};\n\nexport const NetworkToNetworkName: Record<string, Network> = {\n  mainnet: Network.MAINNET,\n  testnet: Network.TESTNET,\n  devnet: Network.DEVNET,\n  randomnet: Network.RANDOMNET,\n  local: Network.LOCAL,\n  custom: Network.CUSTOM,\n};\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core/accountAddress\";\nimport { AnyNumber } from \"../../types\";\nimport { PublicKey } from \"../../core/crypto\";\nimport { MoveString, MoveVector, U64, U8 } from \"../../bcs\";\n\n/**\n * Representation of the challenge which is needed to sign by owner of the account\n * to rotate the authentication key.\n */\nexport class RotationProofChallenge extends Serializable {\n  // Resource account address\n  public readonly accountAddress: AccountAddress = AccountAddress.ONE;\n\n  // Module name, i.e: 0x1::account\n  public readonly moduleName: MoveString = new MoveString(\"account\");\n\n  // The rotation proof challenge struct name that live under the module\n  public readonly structName: MoveString = new MoveString(\"RotationProofChallenge\");\n\n  // Signer's address\n  public readonly originator: AccountAddress;\n\n  // Signer's current authentication key\n  public readonly currentAuthKey: AccountAddress;\n\n  // New public key to rotate to\n  public readonly newPublicKey: MoveVector<U8>;\n\n  // Sequence number of the account\n  public readonly sequenceNumber: U64;\n\n  constructor(args: {\n    sequenceNumber: AnyNumber;\n    originator: AccountAddress;\n    currentAuthKey: AccountAddress;\n    newPublicKey: PublicKey;\n  }) {\n    super();\n    this.sequenceNumber = new U64(args.sequenceNumber);\n    this.originator = args.originator;\n    this.currentAuthKey = args.currentAuthKey;\n    this.newPublicKey = MoveVector.U8(args.newPublicKey.toUint8Array());\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.accountAddress);\n    serializer.serialize(this.moduleName);\n    serializer.serialize(this.structName);\n    serializer.serialize(this.sequenceNumber);\n    serializer.serialize(this.originator);\n    serializer.serialize(this.currentAuthKey);\n    serializer.serialize(this.newPublicKey);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file handles the transaction creation lifecycle.\n * It holds different operations to generate a transaction payload, a raw transaction,\n * and a signed transaction that can be simulated, signed and submitted to chain.\n */\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput, Hex, PublicKey } from \"../../core\";\nimport { Account } from \"../../core/account\";\nimport { AnyPublicKey, AnySignature } from \"../../core/crypto\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { Secp256k1PublicKey, Secp256k1Signature } from \"../../core/crypto/secp256k1\";\nimport { getInfo } from \"../../internal/account\";\nimport { getLedgerInfo } from \"../../internal/general\";\nimport { getGasPriceEstimation } from \"../../internal/transaction\";\nimport { NetworkToChainId } from \"../../utils/apiEndpoints\";\nimport {\n  DEFAULT_MAX_GAS_AMOUNT,\n  DEFAULT_TXN_EXP_SEC_FROM_NOW,\n  RAW_TRANSACTION_SALT,\n  RAW_TRANSACTION_WITH_DATA_SALT,\n} from \"../../utils/const\";\nimport {\n  AccountAuthenticator,\n  AccountAuthenticatorEd25519,\n  AccountAuthenticatorMultiKey,\n  AccountAuthenticatorSingleKey,\n} from \"../authenticator/account\";\nimport {\n  TransactionAuthenticatorEd25519,\n  TransactionAuthenticatorFeePayer,\n  TransactionAuthenticatorMultiAgent,\n  TransactionAuthenticatorSingleSender,\n} from \"../authenticator/transaction\";\nimport {\n  ChainId,\n  EntryFunction,\n  FeePayerRawTransaction,\n  MultiAgentRawTransaction,\n  MultiSig,\n  MultiSigTransactionPayload,\n  RawTransaction,\n  Script,\n  TransactionPayloadEntryFunction,\n  TransactionPayloadMultiSig,\n  TransactionPayloadScript,\n} from \"../instances\";\nimport { SignedTransaction } from \"../instances/signedTransaction\";\nimport {\n  AnyRawTransaction,\n  AnyTransactionPayloadInstance,\n  AnyRawTransactionInstance,\n  EntryFunctionArgumentTypes,\n  InputGenerateMultiAgentRawTransactionArgs,\n  InputGenerateRawTransactionArgs,\n  InputGenerateSingleSignerRawTransactionArgs,\n  SimpleTransaction,\n  InputGenerateTransactionOptions,\n  MultiAgentTransaction,\n  InputScriptData,\n  InputSimulateTransactionData,\n  InputMultiSigDataWithRemoteABI,\n  InputEntryFunctionDataWithRemoteABI,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputSubmitTransactionData,\n  InputGenerateTransactionPayloadDataWithABI,\n  InputEntryFunctionDataWithABI,\n  InputMultiSigDataWithABI,\n} from \"../types\";\nimport { convertArgument, fetchEntryFunctionAbi, standardizeTypeTags } from \"./remoteAbi\";\nimport { memoizeAsync } from \"../../utils/memoize\";\nimport { AnyNumber } from \"../../types\";\nimport { getFunctionParts, isScriptDataInput } from \"./helpers\";\n\n/**\n * We are defining function signatures, each with its specific input and output.\n * These are the possible function signature for our `generateTransactionPayload` function.\n * When we call our `generateTransactionPayload` function with the relevant type properties,\n * Typescript can infer the return type based on the appropriate function overload.\n */\nexport async function generateTransactionPayload(args: InputScriptData): Promise<TransactionPayloadScript>;\nexport async function generateTransactionPayload(\n  args: InputEntryFunctionDataWithRemoteABI,\n): Promise<TransactionPayloadEntryFunction>;\nexport async function generateTransactionPayload(\n  args: InputMultiSigDataWithRemoteABI,\n): Promise<TransactionPayloadMultiSig>;\n\n/**\n * Builds a transaction payload based on the data argument and returns\n * a transaction payload - TransactionPayloadScript | TransactionPayloadMultiSig | TransactionPayloadEntryFunction\n *\n * This uses the RemoteABI by default, and the remote ABI can be skipped by using generateTransactionPayloadWithABI\n *\n * @param args.data GenerateTransactionPayloadData\n *\n * @return TransactionPayload\n */\nexport async function generateTransactionPayload(\n  args: InputGenerateTransactionPayloadDataWithRemoteABI,\n): Promise<AnyTransactionPayloadInstance> {\n  if (isScriptDataInput(args)) {\n    return generateTransactionPayloadScript(args);\n  }\n\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  // We fetch the entry function ABI, and then pretend that we already had the ABI\n  const functionAbi = await memoizeAsync(\n    async () => fetchEntryFunctionAbi(moduleAddress, moduleName, functionName, args.aptosConfig),\n    `entry-function-${args.aptosConfig.network}-${moduleAddress}-${moduleName}-${functionName}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n\n  // Fill in the ABI\n  return generateTransactionPayloadWithABI({ abi: functionAbi, ...args });\n}\n\nexport function generateTransactionPayloadWithABI(args: InputEntryFunctionDataWithABI): TransactionPayloadEntryFunction;\nexport function generateTransactionPayloadWithABI(args: InputMultiSigDataWithABI): TransactionPayloadMultiSig;\nexport function generateTransactionPayloadWithABI(\n  args: InputGenerateTransactionPayloadDataWithABI,\n): AnyTransactionPayloadInstance {\n  const functionAbi = args.abi;\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  // Ensure that all type arguments are typed properly\n  const typeArguments = standardizeTypeTags(args.typeArguments);\n\n  // Check the type argument count against the ABI\n  if (typeArguments.length !== functionAbi.typeParameters.length) {\n    throw new Error(\n      `Type argument count mismatch, expected ${functionAbi.typeParameters.length}, received ${typeArguments.length}`,\n    );\n  }\n\n  // Check all BCS types, and convert any non-BCS types\n  const functionArguments: Array<EntryFunctionArgumentTypes> = args.functionArguments.map((arg, i) =>\n    convertArgument(args.function, functionAbi, arg, i, typeArguments),\n  );\n\n  // Check that all arguments are accounted for\n  if (functionArguments.length !== functionAbi.parameters.length) {\n    throw new Error(\n      // eslint-disable-next-line max-len\n      `Too few arguments for '${moduleAddress}::${moduleName}::${functionName}', expected ${functionAbi.parameters.length} but got ${functionArguments.length}`,\n    );\n  }\n\n  // Generate entry function payload\n  const entryFunctionPayload = EntryFunction.build(\n    `${moduleAddress}::${moduleName}`,\n    functionName,\n    typeArguments,\n    functionArguments,\n  );\n\n  // Send it as multi sig if it's a multisig payload\n  if (\"multisigAddress\" in args) {\n    const multisigAddress = AccountAddress.from(args.multisigAddress);\n    return new TransactionPayloadMultiSig(\n      new MultiSig(multisigAddress, new MultiSigTransactionPayload(entryFunctionPayload)),\n    );\n  }\n\n  // Otherwise send as an entry function\n  return new TransactionPayloadEntryFunction(entryFunctionPayload);\n}\n\nfunction generateTransactionPayloadScript(args: InputScriptData) {\n  return new TransactionPayloadScript(\n    new Script(Hex.fromHexInput(args.bytecode).toUint8Array(), args.typeArguments ?? [], args.functionArguments),\n  );\n}\n\n/**\n * Generates a raw transaction\n *\n * @param args.aptosConfig AptosConfig\n * @param args.sender The transaction's sender account address as a hex input\n * @param args.payload The transaction payload - can create by using generateTransactionPayload()\n *\n * @returns RawTransaction\n */\nexport async function generateRawTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  payload: AnyTransactionPayloadInstance;\n  options?: InputGenerateTransactionOptions;\n  feePayerAddress?: AccountAddressInput;\n}): Promise<RawTransaction> {\n  const { aptosConfig, sender, payload, options, feePayerAddress } = args;\n\n  const getChainId = NetworkToChainId[aptosConfig.network]\n    ? Promise.resolve({ chain_id: NetworkToChainId[aptosConfig.network] })\n    : getLedgerInfo({ aptosConfig });\n\n  const getGasUnitPrice = options?.gasUnitPrice\n    ? Promise.resolve({ gas_estimate: options.gasUnitPrice })\n    : getGasPriceEstimation({ aptosConfig });\n\n  const [{ chain_id: chainId }, { gas_estimate: gasEstimate }] = await Promise.all([getChainId, getGasUnitPrice]);\n\n  const getSequenceNumber =\n    options?.accountSequenceNumber !== undefined\n      ? Promise.resolve({ sequence_number: options.accountSequenceNumber })\n      : getInfo({ aptosConfig, accountAddress: sender });\n\n  let sequenceNumber: string | AnyNumber;\n\n  /**\n   * Check if is sponsored transaction to honor AIP-52\n   * {@link https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-52.md}\n   */\n  if (feePayerAddress && AccountAddress.from(feePayerAddress).equals(AccountAddress.ZERO)) {\n    // Handle sponsored transaction generation with the option that\n    // the main signer has not been created on chain\n    try {\n      // Check if main signer has been created on chain, if not assign sequence number 0\n      const { sequence_number: seqNumber } = await getSequenceNumber;\n      sequenceNumber = seqNumber;\n    } catch (e: any) {\n      sequenceNumber = \"0\";\n    }\n  } else {\n    const { sequence_number: seqNumber } = await getSequenceNumber;\n    sequenceNumber = seqNumber;\n  }\n\n  const { maxGasAmount, gasUnitPrice, expireTimestamp } = {\n    maxGasAmount: options?.maxGasAmount ? BigInt(options.maxGasAmount) : BigInt(DEFAULT_MAX_GAS_AMOUNT),\n    gasUnitPrice: BigInt(gasEstimate),\n    expireTimestamp: BigInt(Math.floor(Date.now() / 1000) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n    ...options,\n  };\n\n  return new RawTransaction(\n    AccountAddress.from(sender),\n    BigInt(sequenceNumber),\n    payload,\n    BigInt(maxGasAmount),\n    BigInt(gasUnitPrice),\n    BigInt(expireTimestamp),\n    new ChainId(chainId),\n  );\n}\n\n/**\n * We are defining function signatures, each with its specific input and output.\n * These are the possible function signature for our `generateTransaction` function.\n * When we call our `generateTransaction` function with the relevant type properties,\n * Typescript can infer the return type based on the appropriate function overload.\n */\nexport async function buildTransaction(args: InputGenerateSingleSignerRawTransactionArgs): Promise<SimpleTransaction>;\nexport async function buildTransaction(args: InputGenerateMultiAgentRawTransactionArgs): Promise<MultiAgentTransaction>;\n\n/**\n * Generates a transaction based on the provided arguments\n *\n * Note: we can start with one function to support all different payload/transaction types,\n * and if to complex to use, we could have function for each type\n *\n * @param args.aptosConfig AptosConfig\n * @param args.sender The transaction's sender account address as a hex input\n * @param args.payload The transaction payload - can create by using generateTransactionPayload()\n * @param args.options optional. Transaction options object\n * @param args.secondarySignerAddresses optional. For when want to create a multi signers transaction\n * @param args.feePayerAddress optional. For when want to create a fee payer (aka sponsored) transaction\n *\n * @return An instance of a RawTransaction, plus optional secondary/fee payer addresses\n * ```\n * {\n *  rawTransaction: RawTransaction,\n *  secondarySignerAddresses? : Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n */\nexport async function buildTransaction(args: InputGenerateRawTransactionArgs): Promise<AnyRawTransaction> {\n  const { aptosConfig, sender, payload, options, feePayerAddress } = args;\n  // generate raw transaction\n  const rawTxn = await generateRawTransaction({\n    aptosConfig,\n    sender,\n    payload,\n    options,\n    feePayerAddress,\n  });\n\n  // if multi agent transaction\n  if (\"secondarySignerAddresses\" in args) {\n    const signers: Array<AccountAddress> =\n      args.secondarySignerAddresses?.map((signer) => AccountAddress.from(signer)) ?? [];\n\n    return {\n      rawTransaction: rawTxn,\n      secondarySignerAddresses: signers,\n      feePayerAddress: args.feePayerAddress ? AccountAddress.from(args.feePayerAddress) : undefined,\n    };\n  }\n  // return the raw transaction\n  return {\n    rawTransaction: rawTxn,\n    feePayerAddress: args.feePayerAddress ? AccountAddress.from(args.feePayerAddress) : undefined,\n  };\n}\n\n/**\n * Simulate a transaction before signing and submit to chain\n *\n * @param args.transaction A aptos transaction type to sign\n * @param args.signerPublicKey The signer public key\n * @param args.secondarySignersPublicKeys optional. The secondary signers public keys if multi signers transaction\n * @param args.feePayerPublicKey optional. The fee payer public key is a fee payer (aka sponsored) transaction\n * @param args.options optional. SimulateTransactionOptions\n *\n * @returns A signed serialized transaction that can be simulated\n */\nexport function generateSignedTransactionForSimulation(args: InputSimulateTransactionData): Uint8Array {\n  const { signerPublicKey, transaction, secondarySignersPublicKeys, feePayerPublicKey } = args;\n\n  const accountAuthenticator = getAuthenticatorForSimulation(signerPublicKey);\n\n  // fee payer transaction\n  if (transaction.feePayerAddress) {\n    const transactionToSign = new FeePayerRawTransaction(\n      transaction.rawTransaction,\n      transaction.secondarySignerAddresses ?? [],\n      transaction.feePayerAddress,\n    );\n    let secondaryAccountAuthenticators: Array<AccountAuthenticator> = [];\n    if (secondarySignersPublicKeys) {\n      secondaryAccountAuthenticators = secondarySignersPublicKeys.map((publicKey) =>\n        getAuthenticatorForSimulation(publicKey),\n      );\n    }\n    const feePayerAuthenticator = getAuthenticatorForSimulation(feePayerPublicKey!);\n\n    const transactionAuthenticator = new TransactionAuthenticatorFeePayer(\n      accountAuthenticator,\n      transaction.secondarySignerAddresses ?? [],\n      secondaryAccountAuthenticators,\n      {\n        address: transaction.feePayerAddress,\n        authenticator: feePayerAuthenticator,\n      },\n    );\n    return new SignedTransaction(transactionToSign.raw_txn, transactionAuthenticator).bcsToBytes();\n  }\n\n  // multi agent transaction\n  if (transaction.secondarySignerAddresses) {\n    const transactionToSign = new MultiAgentRawTransaction(\n      transaction.rawTransaction,\n      transaction.secondarySignerAddresses,\n    );\n\n    let secondaryAccountAuthenticators: Array<AccountAuthenticator> = [];\n\n    secondaryAccountAuthenticators = secondarySignersPublicKeys!.map((publicKey) =>\n      getAuthenticatorForSimulation(publicKey),\n    );\n\n    const transactionAuthenticator = new TransactionAuthenticatorMultiAgent(\n      accountAuthenticator,\n      transaction.secondarySignerAddresses,\n      secondaryAccountAuthenticators,\n    );\n\n    return new SignedTransaction(transactionToSign.raw_txn, transactionAuthenticator).bcsToBytes();\n  }\n\n  // single signer raw transaction\n  let transactionAuthenticator;\n  if (accountAuthenticator instanceof AccountAuthenticatorEd25519) {\n    transactionAuthenticator = new TransactionAuthenticatorEd25519(\n      accountAuthenticator.public_key,\n      accountAuthenticator.signature,\n    );\n  } else if (accountAuthenticator instanceof AccountAuthenticatorSingleKey) {\n    transactionAuthenticator = new TransactionAuthenticatorSingleSender(accountAuthenticator);\n  } else {\n    throw new Error(\"Invalid public key\");\n  }\n  return new SignedTransaction(transaction.rawTransaction, transactionAuthenticator).bcsToBytes();\n}\n\nexport function getAuthenticatorForSimulation(publicKey: PublicKey) {\n  // TODO add support for AnyMultiKey\n  if (publicKey instanceof AnyPublicKey) {\n    if (publicKey.publicKey instanceof Ed25519PublicKey) {\n      return new AccountAuthenticatorSingleKey(publicKey, new AnySignature(new Ed25519Signature(new Uint8Array(64))));\n    }\n    if (publicKey.publicKey instanceof Secp256k1PublicKey) {\n      return new AccountAuthenticatorSingleKey(publicKey, new AnySignature(new Secp256k1Signature(new Uint8Array(64))));\n    }\n  }\n\n  // legacy code\n  return new AccountAuthenticatorEd25519(\n    new Ed25519PublicKey(publicKey.toUint8Array()),\n    new Ed25519Signature(new Uint8Array(64)),\n  );\n}\n\n/**\n * Sign a transaction that can later be submitted to chain\n *\n * @param args.signer The signer account to sign the transaction\n * @param args.transaction A aptos transaction type to sign\n *\n * @return The signer AccountAuthenticator\n */\nexport function sign(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n  const { signer, transaction } = args;\n\n  // get the signing message\n  const message = generateSigningMessage(transaction);\n\n  // account.signMessage\n  return signer.signWithAuthenticator(message);\n}\n\n/**\n * Prepare a transaction to be submitted to chain\n *\n * @param args.transaction A aptos transaction type\n * @param args.senderAuthenticator The account authenticator of the transaction sender\n * @param args.secondarySignerAuthenticators optional. For when the transaction is a multi signers transaction\n *\n * @returns A SignedTransaction\n */\nexport function generateSignedTransaction(args: InputSubmitTransactionData): Uint8Array {\n  const { transaction, senderAuthenticator, feePayerAuthenticator, additionalSignersAuthenticators } = args;\n\n  const transactionToSubmit = deriveTransactionType(transaction);\n\n  if (\n    (feePayerAuthenticator || additionalSignersAuthenticators) &&\n    (transactionToSubmit instanceof MultiAgentRawTransaction || transactionToSubmit instanceof FeePayerRawTransaction)\n  ) {\n    return generateMultiSignersSignedTransaction(\n      transactionToSubmit,\n      senderAuthenticator,\n      feePayerAuthenticator,\n      additionalSignersAuthenticators,\n    );\n  }\n\n  // submit single signer transaction\n\n  // check what instance is accountAuthenticator\n  if (senderAuthenticator instanceof AccountAuthenticatorEd25519 && transactionToSubmit instanceof RawTransaction) {\n    const transactionAuthenticator = new TransactionAuthenticatorEd25519(\n      senderAuthenticator.public_key,\n      senderAuthenticator.signature,\n    );\n    return new SignedTransaction(transactionToSubmit, transactionAuthenticator).bcsToBytes();\n  }\n\n  if (\n    (senderAuthenticator instanceof AccountAuthenticatorSingleKey ||\n      senderAuthenticator instanceof AccountAuthenticatorMultiKey) &&\n    transactionToSubmit instanceof RawTransaction\n  ) {\n    const transactionAuthenticator = new TransactionAuthenticatorSingleSender(senderAuthenticator);\n    return new SignedTransaction(transactionToSubmit, transactionAuthenticator).bcsToBytes();\n  }\n\n  throw new Error(\n    `Cannot generate a signed transaction, ${senderAuthenticator} is not a supported account authentication scheme`,\n  );\n}\n\n/**\n * Derive the raw transaction type - FeePayerRawTransaction or MultiAgentRawTransaction or RawTransaction\n *\n * @param transaction A aptos transaction type\n *\n * @returns FeePayerRawTransaction | MultiAgentRawTransaction | RawTransaction\n */\nexport function deriveTransactionType(transaction: AnyRawTransaction): AnyRawTransactionInstance {\n  if (transaction.feePayerAddress) {\n    return new FeePayerRawTransaction(\n      transaction.rawTransaction,\n      transaction.secondarySignerAddresses ?? [],\n      transaction.feePayerAddress,\n    );\n  }\n  if (transaction.secondarySignerAddresses) {\n    return new MultiAgentRawTransaction(transaction.rawTransaction, transaction.secondarySignerAddresses);\n  }\n\n  return transaction.rawTransaction;\n}\n\n/**\n * Generate a multi signers signed transaction that can be submitted to chain\n *\n * @param transaction MultiAgentRawTransaction | FeePayerRawTransaction\n * @param senderAuthenticator The account authenticator of the transaction sender\n * @param secondarySignerAuthenticators The extra signers account Authenticators\n *\n * @returns A SignedTransaction\n */\nexport function generateMultiSignersSignedTransaction(\n  transaction: MultiAgentRawTransaction | FeePayerRawTransaction,\n  senderAuthenticator: AccountAuthenticator,\n  feePayerAuthenticator?: AccountAuthenticator,\n  additionalSignersAuthenticators?: Array<AccountAuthenticator>,\n) {\n  if (transaction instanceof FeePayerRawTransaction) {\n    if (!feePayerAuthenticator) {\n      throw new Error(\"Must provide a feePayerAuthenticator argument to generate a signed fee payer transaction\");\n    }\n    const txAuthenticatorFeePayer = new TransactionAuthenticatorFeePayer(\n      senderAuthenticator,\n      transaction.secondary_signer_addresses,\n      additionalSignersAuthenticators ?? [],\n      {\n        address: transaction.fee_payer_address,\n        authenticator: feePayerAuthenticator,\n      },\n    );\n    return new SignedTransaction(transaction.raw_txn, txAuthenticatorFeePayer).bcsToBytes();\n  }\n  if (transaction instanceof MultiAgentRawTransaction) {\n    if (!additionalSignersAuthenticators) {\n      throw new Error(\n        \"Must provide a additionalSignersAuthenticators argument to generate a signed multi agent transaction\",\n      );\n    }\n    const multiAgentAuthenticator = new TransactionAuthenticatorMultiAgent(\n      senderAuthenticator,\n      transaction.secondary_signer_addresses,\n      additionalSignersAuthenticators ?? [],\n    );\n    return new SignedTransaction(transaction.raw_txn, multiAgentAuthenticator).bcsToBytes();\n  }\n\n  throw new Error(\n    `Cannot prepare multi signers transaction to submission, ${typeof transaction} transaction is not supported`,\n  );\n}\n\nexport function generateSigningMessage(transaction: AnyRawTransaction): Uint8Array {\n  const rawTxn = deriveTransactionType(transaction);\n  const hash = sha3Hash.create();\n\n  if (rawTxn instanceof RawTransaction) {\n    hash.update(RAW_TRANSACTION_SALT);\n  } else if (rawTxn instanceof MultiAgentRawTransaction) {\n    hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n  } else if (rawTxn instanceof FeePayerRawTransaction) {\n    hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n  } else {\n    throw new Error(`Unknown transaction type to sign on: ${rawTxn}`);\n  }\n\n  const prefix = hash.digest();\n\n  const body = rawTxn.bcsToBytes();\n\n  const mergedArray = new Uint8Array(prefix.length + body.length);\n  mergedArray.set(prefix);\n  mergedArray.set(body, prefix.length);\n\n  return mergedArray;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { AccountAuthenticator } from \"./account\";\nimport { Deserializer, Serializable, Serializer } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../../core/crypto/multiEd25519\";\nimport { TransactionAuthenticatorVariant } from \"../../types\";\n\nexport abstract class TransactionAuthenticator extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionAuthenticatorVariant.Ed25519:\n        return TransactionAuthenticatorEd25519.load(deserializer);\n      case TransactionAuthenticatorVariant.MultiEd25519:\n        return TransactionAuthenticatorMultiEd25519.load(deserializer);\n      case TransactionAuthenticatorVariant.MultiAgent:\n        return TransactionAuthenticatorMultiAgent.load(deserializer);\n      case TransactionAuthenticatorVariant.FeePayer:\n        return TransactionAuthenticatorFeePayer.load(deserializer);\n      case TransactionAuthenticatorVariant.SingleSender:\n        return TransactionAuthenticatorSingleSender.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n    }\n  }\n}\n\n/**\n * Transaction authenticator Ed25519 for a single signer transaction\n *\n * @param public_key Client's public key.\n * @param signature Ed25519 signature of a raw transaction.\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n * for details about generating a signature.\n */\nexport class TransactionAuthenticatorEd25519 extends TransactionAuthenticator {\n  public readonly public_key: Ed25519PublicKey;\n\n  public readonly signature: Ed25519Signature;\n\n  constructor(public_key: Ed25519PublicKey, signature: Ed25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.Ed25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorEd25519(public_key, signature);\n  }\n}\n\n/**\n * Transaction authenticator Ed25519 for a multi signers transaction\n *\n * @param public_key Client's public key.\n * @param signature Multi Ed25519 signature of a raw transaction.\n *\n */\nexport class TransactionAuthenticatorMultiEd25519 extends TransactionAuthenticator {\n  public readonly public_key: MultiEd25519PublicKey;\n\n  public readonly signature: MultiEd25519Signature;\n\n  constructor(public_key: MultiEd25519PublicKey, signature: MultiEd25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.MultiEd25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\n/**\n * Transaction authenticator for a multi-agent transaction\n *\n * @param sender Sender account authenticator\n * @param secondary_signer_addresses Secondary signers address\n * @param secondary_signers Secondary signers account authenticators\n *\n */\nexport class TransactionAuthenticatorMultiAgent extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  public readonly secondary_signers: Array<AccountAuthenticator>;\n\n  constructor(\n    sender: AccountAuthenticator,\n    secondary_signer_addresses: Array<AccountAddress>,\n    secondary_signers: Array<AccountAuthenticator>,\n  ) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.MultiAgent);\n    this.sender.serialize(serializer);\n    serializer.serializeVector<AccountAddress>(this.secondary_signer_addresses);\n    serializer.serializeVector<AccountAuthenticator>(this.secondary_signers);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializer.deserializeVector(AccountAddress);\n    const secondary_signers = deserializer.deserializeVector(AccountAuthenticator);\n    return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n  }\n}\n\n/**\n * Transaction authenticator for a fee payer transaction\n *\n * @param sender Sender account authenticator\n * @param secondary_signer_addresses Secondary signers address\n * @param secondary_signers Secondary signers account authenticators\n * @param fee_payer Object of the fee payer account address and the fee payer authentication\n *\n */\nexport class TransactionAuthenticatorFeePayer extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  public readonly secondary_signers: Array<AccountAuthenticator>;\n\n  public readonly fee_payer: {\n    address: AccountAddress;\n    authenticator: AccountAuthenticator;\n  };\n\n  constructor(\n    sender: AccountAuthenticator,\n    secondary_signer_addresses: Array<AccountAddress>,\n    secondary_signers: Array<AccountAuthenticator>,\n    fee_payer: { address: AccountAddress; authenticator: AccountAuthenticator },\n  ) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n    this.fee_payer = fee_payer;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.FeePayer);\n    this.sender.serialize(serializer);\n    serializer.serializeVector<AccountAddress>(this.secondary_signer_addresses);\n    serializer.serializeVector<AccountAuthenticator>(this.secondary_signers);\n    this.fee_payer.address.serialize(serializer);\n    this.fee_payer.authenticator.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializer.deserializeVector(AccountAddress);\n    const secondary_signers = deserializer.deserializeVector(AccountAuthenticator);\n    const address = AccountAddress.deserialize(deserializer);\n    const authenticator = AccountAuthenticator.deserialize(deserializer);\n    const fee_payer = { address, authenticator };\n    return new TransactionAuthenticatorFeePayer(sender, secondary_signer_addresses, secondary_signers, fee_payer);\n  }\n}\n\n/**\n * Single Sender authenticator for a single signer transaction\n *\n * @param sender AccountAuthenticator\n */\nexport class TransactionAuthenticatorSingleSender extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  constructor(sender: AccountAuthenticator) {\n    super();\n    this.sender = sender;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.SingleSender);\n    this.sender.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorSingleSender {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    return new TransactionAuthenticatorSingleSender(sender);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../../bcs/serializer\";\nimport { Deserializer } from \"../../bcs/deserializer\";\n\n/**\n * Representation of a ChainId that can serialized and deserialized\n */\nexport class ChainId extends Serializable {\n  public readonly chainId: number;\n\n  constructor(chainId: number) {\n    super();\n    this.chainId = chainId;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.chainId);\n  }\n\n  static deserialize(deserializer: Deserializer): ChainId {\n    const chainId = deserializer.deserializeU8();\n    return new ChainId(chainId);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\n\n/**\n * Representation of an Identifier that can serialized and deserialized.\n * We use Identifier to represent the module \"name\" in \"ModuleId\" and\n * the \"function name\" in \"EntryFunction\"\n */\nexport class Identifier extends Serializable {\n  public identifier: string;\n\n  constructor(identifier: string) {\n    super();\n    this.identifier = identifier;\n  }\n\n  public serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.identifier);\n  }\n\n  static deserialize(deserializer: Deserializer): Identifier {\n    const identifier = deserializer.deserializeStr();\n    return new Identifier(identifier);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"./identifier\";\nimport { MoveModuleId } from \"../../types\";\n\n/**\n * Representation of a ModuleId that can serialized and deserialized\n * ModuleId means the module address (e.g \"0x1\") and the module name (e.g \"coin\")\n */\nexport class ModuleId extends Serializable {\n  public readonly address: AccountAddress;\n\n  public readonly name: Identifier;\n\n  /**\n   * Full name of a module.\n   * @param address The account address. e.g \"0x1\"\n   * @param name The module name under the \"address\". e.g \"coin\"\n   */\n  constructor(address: AccountAddress, name: Identifier) {\n    super();\n    this.address = address;\n    this.name = name;\n  }\n\n  /**\n   * Converts a string literal to a ModuleId\n   * @param moduleId String literal in format \"account_address::module_name\", e.g. \"0x1::coin\"\n   * @returns ModuleId\n   */\n  static fromStr(moduleId: MoveModuleId): ModuleId {\n    const parts = moduleId.split(\"::\");\n    if (parts.length !== 2) {\n      throw new Error(\"Invalid module id.\");\n    }\n    return new ModuleId(AccountAddress.fromString(parts[0]), new Identifier(parts[1]));\n  }\n\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.name.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ModuleId {\n    const address = AccountAddress.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    return new ModuleId(address, name);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"../instances/identifier\";\nimport { TypeTagVariants } from \"../../types\";\n\nexport abstract class TypeTag extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TypeTag {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TypeTagVariants.Bool:\n        return TypeTagBool.load(deserializer);\n      case TypeTagVariants.U8:\n        return TypeTagU8.load(deserializer);\n      case TypeTagVariants.U64:\n        return TypeTagU64.load(deserializer);\n      case TypeTagVariants.U128:\n        return TypeTagU128.load(deserializer);\n      case TypeTagVariants.Address:\n        return TypeTagAddress.load(deserializer);\n      case TypeTagVariants.Signer:\n        return TypeTagSigner.load(deserializer);\n      case TypeTagVariants.Vector:\n        return TypeTagVector.load(deserializer);\n      case TypeTagVariants.Struct:\n        return TypeTagStruct.load(deserializer);\n      case TypeTagVariants.U16:\n        return TypeTagU16.load(deserializer);\n      case TypeTagVariants.U32:\n        return TypeTagU32.load(deserializer);\n      case TypeTagVariants.U256:\n        return TypeTagU256.load(deserializer);\n      case TypeTagVariants.Generic:\n        // This is only used for ABI representation, and cannot actually be used as a type.\n        return TypeTagGeneric.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TypeTag: ${index}`);\n    }\n  }\n\n  abstract toString(): string;\n\n  isBool(): this is TypeTagBool {\n    return this instanceof TypeTagBool;\n  }\n\n  isAddress(): this is TypeTagAddress {\n    return this instanceof TypeTagAddress;\n  }\n\n  isGeneric(): this is TypeTagGeneric {\n    return this instanceof TypeTagGeneric;\n  }\n\n  isSigner(): this is TypeTagSigner {\n    return this instanceof TypeTagSigner;\n  }\n\n  isVector(): this is TypeTagVector {\n    return this instanceof TypeTagVector;\n  }\n\n  isStruct(): this is TypeTagStruct {\n    return this instanceof TypeTagStruct;\n  }\n\n  isU8(): this is TypeTagU8 {\n    return this instanceof TypeTagU8;\n  }\n\n  isU16(): this is TypeTagU16 {\n    return this instanceof TypeTagU16;\n  }\n\n  isU32(): this is TypeTagU32 {\n    return this instanceof TypeTagU32;\n  }\n\n  isU64(): this is TypeTagU64 {\n    return this instanceof TypeTagU64;\n  }\n\n  isU128(): this is TypeTagU128 {\n    return this instanceof TypeTagU128;\n  }\n\n  isU256(): this is TypeTagU256 {\n    return this instanceof TypeTagU256;\n  }\n}\n\nexport class TypeTagBool extends TypeTag {\n  toString(): string {\n    return \"bool\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Bool);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagBool {\n    return new TypeTagBool();\n  }\n}\n\nexport class TypeTagU8 extends TypeTag {\n  toString(): string {\n    return \"u8\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U8);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU8 {\n    return new TypeTagU8();\n  }\n}\n\nexport class TypeTagU16 extends TypeTag {\n  toString(): string {\n    return \"u16\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U16);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU16 {\n    return new TypeTagU16();\n  }\n}\n\nexport class TypeTagU32 extends TypeTag {\n  toString(): string {\n    return \"u32\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U32);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU32 {\n    return new TypeTagU32();\n  }\n}\n\nexport class TypeTagU64 extends TypeTag {\n  toString(): string {\n    return \"u64\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U64);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU64 {\n    return new TypeTagU64();\n  }\n}\n\nexport class TypeTagU128 extends TypeTag {\n  toString(): string {\n    return \"u128\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U128);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU128 {\n    return new TypeTagU128();\n  }\n}\n\nexport class TypeTagU256 extends TypeTag {\n  toString(): string {\n    return \"u256\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U256);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU256 {\n    return new TypeTagU256();\n  }\n}\n\nexport class TypeTagAddress extends TypeTag {\n  toString(): string {\n    return \"address\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Address);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagAddress {\n    return new TypeTagAddress();\n  }\n}\n\nexport class TypeTagSigner extends TypeTag {\n  toString(): string {\n    return \"signer\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Signer);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagSigner {\n    return new TypeTagSigner();\n  }\n}\n\nexport class TypeTagReference extends TypeTag {\n  toString(): `&${string}` {\n    return `&${this.value.toString()}`;\n  }\n\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Reference);\n  }\n\n  static load(deserializer: Deserializer): TypeTagReference {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagReference(value);\n  }\n}\n\n/**\n * Generics are used for type parameters in entry functions.  However,\n * they are not actually serialized into a real type, so they cannot be\n * used as a type directly.\n */\nexport class TypeTagGeneric extends TypeTag {\n  toString(): `T${number}` {\n    return `T${this.value}`;\n  }\n\n  constructor(public readonly value: number) {\n    super();\n    if (value < 0) throw new Error(\"Generic type parameter index cannot be negative\");\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Generic);\n    serializer.serializeU32(this.value);\n  }\n\n  static load(deserializer: Deserializer): TypeTagGeneric {\n    const value = deserializer.deserializeU32();\n    return new TypeTagGeneric(value);\n  }\n}\n\nexport class TypeTagVector extends TypeTag {\n  toString(): `vector<${string}>` {\n    return `vector<${this.value.toString()}>`;\n  }\n\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  static u8(): TypeTagVector {\n    return new TypeTagVector(new TypeTagU8());\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Vector);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagVector {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagVector(value);\n  }\n}\n\nexport class TypeTagStruct extends TypeTag {\n  toString(): `0x${string}::${string}::${string}` {\n    // Collect type args and add it if there are any\n    let typePredicate = \"\";\n    if (this.value.typeArgs.length > 0) {\n      typePredicate = `<${this.value.typeArgs.map((typeArg) => typeArg.toString()).join(\", \")}>`;\n    }\n\n    return `${this.value.address.toString()}::${this.value.moduleName.identifier}::${\n      this.value.name.identifier\n    }${typePredicate}`;\n  }\n\n  constructor(public readonly value: StructTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Struct);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagStruct {\n    const value = StructTag.deserialize(deserializer);\n    return new TypeTagStruct(value);\n  }\n\n  isTypeTag(address: AccountAddress, moduleName: string, structName: string): boolean {\n    return (\n      this.value.moduleName.identifier === moduleName &&\n      this.value.name.identifier === structName &&\n      this.value.address.equals(address)\n    );\n  }\n\n  isString(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"string\", \"String\");\n  }\n\n  isOption(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"option\", \"Option\");\n  }\n\n  isObject(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"object\", \"Object\");\n  }\n}\n\nexport class StructTag extends Serializable {\n  public readonly address: AccountAddress;\n\n  public readonly moduleName: Identifier;\n\n  public readonly name: Identifier;\n\n  public readonly typeArgs: Array<TypeTag>;\n\n  constructor(address: AccountAddress, module_name: Identifier, name: Identifier, type_args: Array<TypeTag>) {\n    super();\n    this.address = address;\n    this.moduleName = module_name;\n    this.name = name;\n    this.typeArgs = type_args;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.address);\n    serializer.serialize(this.moduleName);\n    serializer.serialize(this.name);\n    serializer.serializeVector(this.typeArgs);\n  }\n\n  static deserialize(deserializer: Deserializer): StructTag {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializer.deserializeVector(TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n}\n\nexport function aptosCoinStructTag(): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"aptos_coin\"), new Identifier(\"AptosCoin\"), []);\n}\n\nexport function stringStructTag(): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"string\"), new Identifier(\"String\"), []);\n}\n\nexport function optionStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"option\"), new Identifier(\"Option\"), [typeArg]);\n}\n\nexport function objectStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"object\"), new Identifier(\"Object\"), [typeArg]);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { EntryFunctionBytes } from \"../../bcs/serializable/entryFunctionBytes\";\nimport { Bool, U128, U16, U256, U32, U64, U8 } from \"../../bcs/serializable/movePrimitives\";\nimport { MoveVector } from \"../../bcs/serializable/moveStructs\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"./identifier\";\nimport { ModuleId } from \"./moduleId\";\nimport type { EntryFunctionArgument, ScriptFunctionArgument, TransactionArgument } from \"./transactionArgument\";\nimport { MoveModuleId, ScriptTransactionArgumentVariants, TransactionPayloadVariants } from \"../../types\";\nimport { TypeTag } from \"../typeTag\";\n\n/**\n * Deserialize a Script Transaction Argument\n */\nexport function deserializeFromScriptArgument(deserializer: Deserializer): TransactionArgument {\n  // index enum variant\n  const index = deserializer.deserializeUleb128AsU32();\n  switch (index) {\n    case ScriptTransactionArgumentVariants.U8:\n      return U8.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U64:\n      return U64.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U128:\n      return U128.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.Address:\n      return AccountAddress.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U8Vector:\n      return MoveVector.deserialize(deserializer, U8);\n    case ScriptTransactionArgumentVariants.Bool:\n      return Bool.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U16:\n      return U16.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U32:\n      return U32.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U256:\n      return U256.deserialize(deserializer);\n    default:\n      throw new Error(`Unknown variant index for ScriptTransactionArgument: ${index}`);\n  }\n}\n\n/**\n * Representation of the supported Transaction Payload\n * that can serialized and deserialized\n */\nexport abstract class TransactionPayload extends Serializable {\n  /**\n   * Serialize a Transaction Payload\n   */\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserialize a Transaction Payload\n   */\n  static deserialize(deserializer: Deserializer): TransactionPayload {\n    // index enum variant\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionPayloadVariants.Script:\n        return TransactionPayloadScript.load(deserializer);\n      case TransactionPayloadVariants.EntryFunction:\n        return TransactionPayloadEntryFunction.load(deserializer);\n      case TransactionPayloadVariants.Multisig:\n        return TransactionPayloadMultiSig.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\n/**\n * Representation of a Transaction Payload Script that can serialized and deserialized\n */\nexport class TransactionPayloadScript extends TransactionPayload {\n  public readonly script: Script;\n\n  constructor(script: Script) {\n    super();\n    this.script = script;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.Script);\n    this.script.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadScript {\n    const script = Script.deserialize(deserializer);\n    return new TransactionPayloadScript(script);\n  }\n}\n\n/**\n * Representation of a Transaction Payload Entry Function that can serialized and deserialized\n */\nexport class TransactionPayloadEntryFunction extends TransactionPayload {\n  public readonly entryFunction: EntryFunction;\n\n  constructor(entryFunction: EntryFunction) {\n    super();\n    this.entryFunction = entryFunction;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.EntryFunction);\n    this.entryFunction.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadEntryFunction {\n    const entryFunction = EntryFunction.deserialize(deserializer);\n    return new TransactionPayloadEntryFunction(entryFunction);\n  }\n}\n\n/**\n * Representation of a Transaction Payload Multi-sig that can serialized and deserialized\n */\nexport class TransactionPayloadMultiSig extends TransactionPayload {\n  public readonly multiSig: MultiSig;\n\n  constructor(multiSig: MultiSig) {\n    super();\n    this.multiSig = multiSig;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.Multisig);\n    this.multiSig.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadMultiSig {\n    const value = MultiSig.deserialize(deserializer);\n    return new TransactionPayloadMultiSig(value);\n  }\n}\n\n/**\n * Representation of a EntryFunction that can serialized and deserialized\n */\nexport class EntryFunction {\n  public readonly module_name: ModuleId;\n\n  public readonly function_name: Identifier;\n\n  public readonly type_args: Array<TypeTag>;\n\n  public readonly args: Array<EntryFunctionArgument>;\n\n  /**\n   * Contains the payload to run a function within a module.\n   * @param module_name Fully qualified module name in format \"account_address::module_name\" e.g. \"0x1::coin\"\n   * @param function_name The function name. e.g \"transfer\"\n   * @param type_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public entry fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @param args arguments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public entry fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   */\n  constructor(\n    module_name: ModuleId,\n    function_name: Identifier,\n    type_args: Array<TypeTag>,\n    args: Array<EntryFunctionArgument>,\n  ) {\n    this.module_name = module_name;\n    this.function_name = function_name;\n    this.type_args = type_args;\n    this.args = args;\n  }\n\n  /**\n   * A helper function to build a EntryFunction payload from raw primitive values\n   *\n   * @param module_id Fully qualified module name in format \"AccountAddress::module_id\" e.g. \"0x1::coin\"\n   * @param function_name Function name\n   * @param type_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arguments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @returns EntryFunction\n   */\n  static build(\n    module_id: MoveModuleId,\n    function_name: string,\n    type_args: Array<TypeTag>,\n    args: Array<EntryFunctionArgument>,\n  ): EntryFunction {\n    return new EntryFunction(ModuleId.fromStr(module_id), new Identifier(function_name), type_args, args);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.module_name.serialize(serializer);\n    this.function_name.serialize(serializer);\n    serializer.serializeVector<TypeTag>(this.type_args);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: EntryFunctionArgument) => {\n      item.serializeForEntryFunction(serializer);\n    });\n  }\n\n  /**\n   * Deserializes an entry function payload with the arguments represented as EntryFunctionBytes instances.\n   * @see EntryFunctionBytes\n   *\n   * NOTE: When you deserialize an EntryFunction payload with this method, the entry function\n   * arguments are populated into the deserialized instance as type-agnostic, raw fixed bytes\n   * in the form of the EntryFunctionBytes class.\n   *\n   * In order to correctly deserialize these arguments as their actual type representations, you\n   * must know the types of the arguments beforehand and deserialize them yourself individually.\n   *\n   * One way you could achieve this is by using the ABIs for an entry function and deserializing each\n   * argument as its given, corresponding type.\n   *\n   * @param deserializer\n   * @returns A deserialized EntryFunction payload for a transaction.\n   *\n   */\n  static deserialize(deserializer: Deserializer): EntryFunction {\n    const module_name = ModuleId.deserialize(deserializer);\n    const function_name = Identifier.deserialize(deserializer);\n    const type_args = deserializer.deserializeVector(TypeTag);\n\n    const length = deserializer.deserializeUleb128AsU32();\n    const args: Array<EntryFunctionArgument> = new Array<EntryFunctionBytes>();\n\n    for (let i = 0; i < length; i += 1) {\n      const fixedBytesLength = deserializer.deserializeUleb128AsU32();\n      const fixedBytes = EntryFunctionBytes.deserialize(deserializer, fixedBytesLength);\n      args.push(fixedBytes);\n    }\n\n    return new EntryFunction(module_name, function_name, type_args, args);\n  }\n}\n\n/**\n * Representation of a Script that can serialized and deserialized\n */\nexport class Script {\n  /**\n   * The move module bytecode\n   */\n  public readonly bytecode: Uint8Array;\n\n  /**\n   * The type arguments that the bytecode function requires.\n   */\n  public readonly type_args: Array<TypeTag>;\n\n  /**\n   * The arguments that the bytecode function requires.\n   */\n  public readonly args: Array<ScriptFunctionArgument>;\n\n  /**\n   * Scripts contain the Move bytecodes payload that can be submitted to Aptos chain for execution.\n   *\n   * @param bytecode The move module bytecode\n   * @param type_args The type arguments that the bytecode function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args The arguments that the bytecode function requires.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   */\n  constructor(bytecode: Uint8Array, type_args: Array<TypeTag>, args: Array<ScriptFunctionArgument>) {\n    this.bytecode = bytecode;\n    this.type_args = type_args;\n    this.args = args;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.bytecode);\n    serializer.serializeVector<TypeTag>(this.type_args);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: ScriptFunctionArgument) => {\n      item.serializeForScriptFunction(serializer);\n    });\n  }\n\n  static deserialize(deserializer: Deserializer): Script {\n    const bytecode = deserializer.deserializeBytes();\n    const type_args = deserializer.deserializeVector(TypeTag);\n    const length = deserializer.deserializeUleb128AsU32();\n    const args = new Array<ScriptFunctionArgument>();\n    for (let i = 0; i < length; i += 1) {\n      // Note that we deserialize directly to the Move value, not its Script argument representation.\n      // We are abstracting away the Script argument representation because knowing about it is\n      // functionally useless.\n      const scriptArgument = deserializeFromScriptArgument(deserializer);\n      args.push(scriptArgument);\n    }\n    return new Script(bytecode, type_args, args);\n  }\n}\n\n/**\n * Representation of a MultiSig that can serialized and deserialized\n */\nexport class MultiSig {\n  public readonly multisig_address: AccountAddress;\n\n  public readonly transaction_payload?: MultiSigTransactionPayload;\n\n  /**\n   * Contains the payload to run a multi-sig account transaction.\n   *\n   * @param multisig_address The multi-sig account address the transaction will be executed as.\n   *\n   * @param transaction_payload The payload of the multi-sig transaction. This is optional when executing a multi-sig\n   *  transaction whose payload is already stored on chain.\n   */\n  constructor(multisig_address: AccountAddress, transaction_payload?: MultiSigTransactionPayload) {\n    this.multisig_address = multisig_address;\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.multisig_address.serialize(serializer);\n    // Options are encoded with an extra u8 field before the value - 0x0 is none and 0x1 is present.\n    // We use serializeBool below to create this prefix value.\n    if (this.transaction_payload === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.transaction_payload.serialize(serializer);\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSig {\n    const multisig_address = AccountAddress.deserialize(deserializer);\n    const payloadPresent = deserializer.deserializeBool();\n    let transaction_payload;\n    if (payloadPresent) {\n      transaction_payload = MultiSigTransactionPayload.deserialize(deserializer);\n    }\n    return new MultiSig(multisig_address, transaction_payload);\n  }\n}\n\n/**\n * Representation of a MultiSig Transaction Payload from `multisig_account.move`\n * that can be serialized and deserialized\n\n * This class exists right now to represent an extensible transaction payload class for\n * transactions used in `multisig_account.move`. Eventually, this class will be able to\n * support script payloads when the `multisig_account.move` module supports them.\n */\nexport class MultiSigTransactionPayload extends Serializable {\n  public readonly transaction_payload: EntryFunction;\n\n  /**\n   * Contains the payload to run a multi-sig account transaction.\n   *\n   * @param transaction_payload The payload of the multi-sig transaction.\n   * This can only be EntryFunction for now but,\n   * Script might be supported in the future.\n   */\n  constructor(transaction_payload: EntryFunction) {\n    super();\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer: Serializer): void {\n    /**\n     * We can support multiple types of inner transaction payload in the future.\n     * For now, it's only EntryFunction but if we support more types,\n     * we need to serialize with the right enum values here\n     */\n    serializer.serializeU32AsUleb128(0);\n    this.transaction_payload.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSigTransactionPayload {\n    // TODO: Support other types of payload beside EntryFunction.\n    // This is the enum value indicating which type of payload the multisig tx contains.\n    deserializer.deserializeUleb128AsU32();\n    return new MultiSigTransactionPayload(EntryFunction.deserialize(deserializer));\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { ChainId } from \"./chainId\";\nimport { AccountAddress } from \"../../core\";\nimport { TransactionPayload } from \"./transactionPayload\";\nimport { TransactionVariants } from \"../../types\";\n\n/**\n * Representation of a Raw Transaction that can serialized and deserialized\n */\nexport class RawTransaction extends Serializable {\n  public readonly sender: AccountAddress;\n\n  public readonly sequence_number: bigint;\n\n  public readonly payload: TransactionPayload;\n\n  public readonly max_gas_amount: bigint;\n\n  public readonly gas_unit_price: bigint;\n\n  public readonly expiration_timestamp_secs: bigint;\n\n  public readonly chain_id: ChainId;\n\n  /**\n   * RawTransactions contain the metadata and payloads that can be submitted to Aptos chain for execution.\n   * RawTransactions must be signed before Aptos chain can execute them.\n   *\n   * @param sender The sender Account Address\n   * @param sequence_number Sequence number of this transaction. This must match the sequence number stored in\n   *   the sender's account at the time the transaction executes.\n   * @param payload Instructions for the Aptos Blockchain, including publishing a module,\n   *   execute an entry function or execute a script payload.\n   * @param max_gas_amount Maximum total gas to spend for this transaction. The account must have more\n   *   than this gas or the transaction will be discarded during validation.\n   * @param gas_unit_price Price to be paid per gas unit.\n   * @param expiration_timestamp_secs The blockchain timestamp at which the blockchain would discard this transaction.\n   * @param chain_id The chain ID of the blockchain that this transaction is intended to be run on.\n   */\n  constructor(\n    sender: AccountAddress,\n    sequence_number: bigint,\n    payload: TransactionPayload,\n    max_gas_amount: bigint,\n    gas_unit_price: bigint,\n    expiration_timestamp_secs: bigint,\n    chain_id: ChainId,\n  ) {\n    super();\n    this.sender = sender;\n    this.sequence_number = sequence_number;\n    this.payload = payload;\n    this.max_gas_amount = max_gas_amount;\n    this.gas_unit_price = gas_unit_price;\n    this.expiration_timestamp_secs = expiration_timestamp_secs;\n    this.chain_id = chain_id;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.sender.serialize(serializer);\n    serializer.serializeU64(this.sequence_number);\n    this.payload.serialize(serializer);\n    serializer.serializeU64(this.max_gas_amount);\n    serializer.serializeU64(this.gas_unit_price);\n    serializer.serializeU64(this.expiration_timestamp_secs);\n    this.chain_id.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): RawTransaction {\n    const sender = AccountAddress.deserialize(deserializer);\n    const sequence_number = deserializer.deserializeU64();\n    const payload = TransactionPayload.deserialize(deserializer);\n    const max_gas_amount = deserializer.deserializeU64();\n    const gas_unit_price = deserializer.deserializeU64();\n    const expiration_timestamp_secs = deserializer.deserializeU64();\n    const chain_id = ChainId.deserialize(deserializer);\n    return new RawTransaction(\n      sender,\n      sequence_number,\n      payload,\n      max_gas_amount,\n      gas_unit_price,\n      expiration_timestamp_secs,\n      chain_id,\n    );\n  }\n}\n\n/**\n * Representation of a Raw Transaction With Data that can serialized and deserialized\n */\nexport abstract class RawTransactionWithData extends Serializable {\n  /**\n   * Serialize a Raw Transaction With Data\n   */\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserialize a Raw Transaction With Data\n   */\n  static deserialize(deserializer: Deserializer): RawTransactionWithData {\n    // index enum variant\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionVariants.MultiAgentTransaction:\n        return MultiAgentRawTransaction.load(deserializer);\n      case TransactionVariants.FeePayerTransaction:\n        return FeePayerRawTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n    }\n  }\n}\n\n/**\n * Representation of a Multi Agent Transaction that can serialized and deserialized\n */\nexport class MultiAgentRawTransaction extends RawTransactionWithData {\n  /**\n   * The raw transaction\n   */\n  public readonly raw_txn: RawTransaction;\n\n  /**\n   * The secondary signers on this transaction\n   */\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  constructor(raw_txn: RawTransaction, secondary_signer_addresses: Array<AccountAddress>) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionVariants.MultiAgentTransaction);\n    this.raw_txn.serialize(serializer);\n    serializer.serializeVector(this.secondary_signer_addresses);\n  }\n\n  static load(deserializer: Deserializer): MultiAgentRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n\n    return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n  }\n}\n\n/**\n * Representation of a Fee Payer Transaction that can serialized and deserialized\n */\nexport class FeePayerRawTransaction extends RawTransactionWithData {\n  /**\n   * The raw transaction\n   */\n  public readonly raw_txn: RawTransaction;\n\n  /**\n   * The secondary signers on this transaction - optional and can be empty\n   */\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  /**\n   * The fee payer account address\n   */\n  public readonly fee_payer_address: AccountAddress;\n\n  constructor(\n    raw_txn: RawTransaction,\n    secondary_signer_addresses: Array<AccountAddress>,\n    fee_payer_address: AccountAddress,\n  ) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.fee_payer_address = fee_payer_address;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionVariants.FeePayerTransaction);\n    this.raw_txn.serialize(serializer);\n    serializer.serializeVector(this.secondary_signer_addresses);\n    this.fee_payer_address.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): FeePayerRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n    const feePayerAddress = AccountAddress.deserialize(deserializer);\n\n    return new FeePayerRawTransaction(rawTxn, secondarySignerAddresses, feePayerAddress);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { TransactionAuthenticator } from \"../authenticator/transaction\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { RawTransaction } from \"./rawTransaction\";\n\nexport class SignedTransaction extends Serializable {\n  public readonly raw_txn: RawTransaction;\n\n  public readonly authenticator: TransactionAuthenticator;\n\n  /**\n   * A SignedTransaction consists of a raw transaction and an authenticator. The authenticator\n   * contains a client's public key and the signature of the raw transaction.\n   *\n   * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n   *\n   * @param raw_txn\n   * @param authenticator Contains a client's public key and the signature of the raw transaction.\n   * Authenticator has 3 flavors: single signature, multi-signature and multi-agent.\n   * @see {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs} for details.\n   */\n  constructor(raw_txn: RawTransaction, authenticator: TransactionAuthenticator) {\n    super();\n    this.raw_txn = raw_txn;\n    this.authenticator = authenticator;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.raw_txn.serialize(serializer);\n    this.authenticator.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): SignedTransaction {\n    const raw_txn = RawTransaction.deserialize(deserializer);\n    const authenticator = TransactionAuthenticator.deserialize(deserializer);\n    return new SignedTransaction(raw_txn, authenticator);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  StructTag,\n  TypeTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagGeneric,\n  TypeTagReference,\n  TypeTagSigner,\n  TypeTagStruct,\n  TypeTagU128,\n  TypeTagU16,\n  TypeTagU256,\n  TypeTagU32,\n  TypeTagU64,\n  TypeTagU8,\n  TypeTagVector,\n} from \".\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"../instances/identifier\";\n\nfunction isValidIdentifier(str: string) {\n  return !!str.match(/^[_a-zA-Z0-9]+$/);\n}\n\nfunction isValidWhitespaceCharacter(char: string) {\n  return !!char.match(/\\s/);\n}\n\nfunction isGeneric(str: string) {\n  return !!str.match(/^T[0-9]+$/);\n}\n\nfunction consumeWhitespace(tagStr: string, pos: number) {\n  let i = pos;\n  for (; i < tagStr.length; i += 1) {\n    const innerChar = tagStr[i];\n\n    if (!isValidWhitespaceCharacter(innerChar)) {\n      // If it's not colons, and it's an invalid character, we will stop here\n      break;\n    }\n  }\n  return i;\n}\n\ntype TypeTagState = {\n  savedExpectedTypes: number;\n  savedStr: string;\n  savedTypes: Array<TypeTag>;\n};\n\nexport enum TypeTagParserErrorType {\n  InvalidTypeTag = \"unknown type\",\n  UnexpectedGenericType = \"unexpected generic type\",\n  UnexpectedTypeArgumentClose = \"unexpected '>'\",\n  UnexpectedWhitespaceCharacter = \"unexpected whitespace character\",\n  UnexpectedComma = \"unexpected ','\",\n  TypeArgumentCountMismatch = \"type argument count doesn't match expected amount\",\n  MissingTypeArgumentClose = \"no matching '>' for '<'\",\n  UnexpectedPrimitiveTypeArguments = \"primitive types not expected to have type arguments\",\n  UnexpectedVectorTypeArgumentCount = \"vector type expected to have exactly one type argument\",\n  UnexpectedStructFormat = \"unexpected struct format, must be of the form 0xaddress::module_name::struct_name\",\n  InvalidModuleNameCharacter = \"module name must only contain alphanumeric or '_' characters\",\n  InvalidStructNameCharacter = \"struct name must only contain alphanumeric or '_' characters\",\n}\n\nexport class TypeTagParserError extends Error {\n  constructor(typeTagStr: string, invalidReason: TypeTagParserErrorType) {\n    super(`Failed to parse typeTag '${typeTagStr}', ${invalidReason}`);\n  }\n}\n\n/**\n * All types are made of a few parts they're either:\n * 1. A simple type e.g. u8\n * 2. A standalone struct e.g. 0x1::account::Account\n * 3. A nested struct e.g. 0x1::coin::Coin<0x1234::coin::MyCoin>\n *\n * There are a few more special cases that need to be handled, however.\n * 1. Multiple generics e.g 0x1::pair::Pair<u8, u16>\n * 2. Spacing in the generics e.g. 0x1::pair::Pair< u8 , u16>\n * 3. Nested generics of different depths e.g. 0x1::pair::Pair<0x1::coin::Coin<0x1234::coin::MyCoin>, u8>\n * 4. Generics for types in ABIs are filled in with placeholders e.g T1, T2, T3\n */\nexport function parseTypeTag(typeStr: string, options?: { allowGenerics?: boolean }) {\n  const allowGenerics = options?.allowGenerics ?? false;\n\n  const saved: Array<TypeTagState> = [];\n  // This represents the internal types for a type tag e.g. '0x1::coin::Coin<innerTypes>'\n  let innerTypes: Array<TypeTag> = [];\n  // This represents the current parsed types in a comma list e.g. 'u8, u8'\n  let curTypes: Array<TypeTag> = [];\n  // This represents the current character index\n  let cur: number = 0;\n  // This represents the current working string as a type or struct name\n  let currentStr: string = \"\";\n  let expectedTypes: number = 1;\n\n  // Iterate through each character, and handle the border conditions\n  while (cur < typeStr.length) {\n    const char = typeStr[cur];\n\n    if (char === \"<\") {\n      // Start of a type argument, push current state onto a stack\n      saved.push({\n        savedExpectedTypes: expectedTypes,\n        savedStr: currentStr,\n        savedTypes: curTypes,\n      });\n\n      // Clear current state\n      currentStr = \"\";\n      curTypes = [];\n      expectedTypes = 1;\n    } else if (char === \">\") {\n      // Process last type, if there is no type string, then don't parse it\n      if (currentStr !== \"\") {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n        curTypes.push(newType);\n      }\n\n      // Pop off stack outer type, if there's nothing left, there were too many '>'\n      const savedPop = saved.pop();\n      if (savedPop === undefined) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedTypeArgumentClose);\n      }\n\n      // If the expected types don't match the number of commas, then we also fail\n      if (expectedTypes !== curTypes.length) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.TypeArgumentCountMismatch);\n      }\n\n      // Add in the new created type, shifting the current types to the inner types\n      const { savedStr, savedTypes, savedExpectedTypes } = savedPop;\n      innerTypes = curTypes;\n      curTypes = savedTypes;\n      currentStr = savedStr;\n      expectedTypes = savedExpectedTypes;\n    } else if (char === \",\") {\n      // Comma means we need to start parsing a new tag, push the previous one to the curTypes\n      // Process last type, if there is no type string, then don't parse it\n      if (currentStr.length !== 0) {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n\n        // parse type tag and push it on the types\n        innerTypes = [];\n        curTypes.push(newType);\n        currentStr = \"\";\n        expectedTypes += 1;\n      }\n    } else if (isValidWhitespaceCharacter(char)) {\n      // This means we should save what we have and everything else should skip until the next\n      let parsedTypeTag = false;\n      if (currentStr.length !== 0) {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n\n        // parse type tag and push it on the types\n        innerTypes = [];\n        curTypes.push(newType);\n        currentStr = \"\";\n        parsedTypeTag = true;\n      }\n\n      // Skip ahead on any more whitespace\n      cur = consumeWhitespace(typeStr, cur);\n\n      // The next space MUST be a comma, or a closing > if there was something parsed before\n      // e.g. `u8 u8` is invalid but `u8, u8` is valid\n      const nextChar = typeStr[cur];\n      if (cur < typeStr.length && parsedTypeTag && nextChar !== \",\" && nextChar !== \">\") {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedWhitespaceCharacter);\n      }\n\n      // eslint-disable-next-line no-continue\n      continue;\n    } else {\n      // Any other characters just append to the current string\n      currentStr += char;\n    }\n\n    cur += 1;\n  }\n\n  // This prevents a missing '>' on type arguments\n  if (saved.length > 0) {\n    throw new TypeTagParserError(typeStr, TypeTagParserErrorType.MissingTypeArgumentClose);\n  }\n\n  // This prevents 'u8, u8' as an input\n  switch (curTypes.length) {\n    case 0:\n      return parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n    case 1:\n      if (currentStr === \"\") {\n        return curTypes[0];\n      }\n      throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedComma);\n    default:\n      throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedWhitespaceCharacter);\n  }\n}\n\n/**\n * Parses a type tag with internal types associated\n * @param str\n * @param types\n */\nfunction parseTypeTagInner(str: string, types: Array<TypeTag>, allowGenerics: boolean): TypeTag {\n  // TODO: Parse references to any item not just signer\n  switch (str) {\n    case \"&signer\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagReference(new TypeTagSigner());\n    case \"signer\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagSigner();\n    case \"bool\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagBool();\n    case \"address\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagAddress();\n    case \"u8\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU8();\n    case \"u16\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU16();\n    case \"u32\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU32();\n    case \"u64\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU64();\n    case \"u128\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU128();\n    case \"u256\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU256();\n    case \"vector\":\n      if (types.length !== 1) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedVectorTypeArgumentCount);\n      }\n      return new TypeTagVector(types[0]);\n    default:\n      if (isGeneric(str)) {\n        if (allowGenerics) {\n          return new TypeTagGeneric(Number(str.split(\"T\")[1]));\n        }\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedGenericType);\n      }\n\n      // If the value doesn't contain a colon, then we'll assume it isn't trying to be a struct\n      if (!str.match(/:/)) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidTypeTag);\n      }\n\n      // Parse for a struct tag\n      // eslint-disable-next-line no-case-declarations\n      const structParts = str.split(\"::\");\n      if (structParts.length !== 3) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedStructFormat);\n      }\n\n      // Validate identifier characters\n      if (!isValidIdentifier(structParts[1])) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidModuleNameCharacter);\n      }\n      if (!isValidIdentifier(structParts[2])) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidStructNameCharacter);\n      }\n\n      return new TypeTagStruct(\n        new StructTag(\n          AccountAddress.fromString(structParts[0]),\n          new Identifier(structParts[1]),\n          new Identifier(structParts[2]),\n          types,\n        ),\n      );\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  EntryFunctionArgumentTypes,\n  InputGenerateTransactionPayloadData,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputScriptData,\n  SimpleEntryFunctionArgumentTypes,\n} from \"../types\";\nimport { Bool, FixedBytes, MoveOption, MoveString, MoveVector, U128, U16, U256, U32, U64, U8 } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { MoveFunction, MoveFunctionId } from \"../../types\";\n\nexport function isBool(arg: SimpleEntryFunctionArgumentTypes): arg is boolean {\n  return typeof arg === \"boolean\";\n}\n\nexport function isString(arg: any): arg is string {\n  return typeof arg === \"string\";\n}\n\nexport function isNumber(arg: SimpleEntryFunctionArgumentTypes): arg is number {\n  return typeof arg === \"number\";\n}\n\nexport function isLargeNumber(arg: SimpleEntryFunctionArgumentTypes): arg is number | bigint | string {\n  return typeof arg === \"number\" || typeof arg === \"bigint\" || typeof arg === \"string\";\n}\n\nexport function isNull(arg: SimpleEntryFunctionArgumentTypes): arg is null | undefined {\n  return arg === null || arg === undefined;\n}\n\nexport function isEncodedEntryFunctionArgument(\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n): arg is EntryFunctionArgumentTypes {\n  return (\n    isBcsBool(arg) ||\n    isBcsU8(arg) ||\n    isBcsU16(arg) ||\n    isBcsU32(arg) ||\n    isBcsU64(arg) ||\n    isBcsU128(arg) ||\n    isBcsU256(arg) ||\n    isBcsAddress(arg) ||\n    isBcsString(arg) ||\n    isBcsFixedBytes(arg) ||\n    arg instanceof MoveVector ||\n    arg instanceof MoveOption\n  );\n}\n\nexport function isBcsBool(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is Bool {\n  return arg instanceof Bool;\n}\n\nexport function isBcsAddress(\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n): arg is AccountAddress {\n  return arg instanceof AccountAddress;\n}\n\nexport function isBcsString(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is MoveString {\n  return arg instanceof MoveString;\n}\n\nexport function isBcsFixedBytes(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is FixedBytes {\n  return arg instanceof FixedBytes;\n}\n\nexport function isBcsU8(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U8 {\n  return arg instanceof U8;\n}\n\nexport function isBcsU16(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U16 {\n  return arg instanceof U16;\n}\n\nexport function isBcsU32(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U32 {\n  return arg instanceof U32;\n}\n\nexport function isBcsU64(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U64 {\n  return arg instanceof U64;\n}\n\nexport function isBcsU128(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U128 {\n  return arg instanceof U128;\n}\n\nexport function isBcsU256(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U256 {\n  return arg instanceof U256;\n}\n\nexport function isScriptDataInput(\n  arg: InputGenerateTransactionPayloadDataWithRemoteABI | InputGenerateTransactionPayloadData,\n): arg is InputScriptData {\n  return \"bytecode\" in arg;\n}\n\nexport function throwTypeMismatch(expectedType: string, position: number) {\n  throw new Error(`Type mismatch for argument ${position}, expected '${expectedType}'`);\n}\n\n/**\n * Finds first non-signer arg.\n *\n * A function is often defined with a `signer` or `&signer` arguments at the start, which are filled in\n * by signatures, and not by the caller.\n * @param functionAbi\n */\nexport function findFirstNonSignerArg(functionAbi: MoveFunction): number {\n  const index = functionAbi.params.findIndex((param) => param !== \"signer\" && param !== \"&signer\");\n  if (index < 0) {\n    return functionAbi.params.length;\n  }\n  return index;\n}\n\nexport function getFunctionParts(functionArg: MoveFunctionId) {\n  const funcNameParts = functionArg.split(\"::\");\n  if (funcNameParts.length !== 3) {\n    throw new Error(`Invalid function ${functionArg}`);\n  }\n  const moduleAddress = funcNameParts[0];\n  const moduleName = funcNameParts[1];\n  const functionName = funcNameParts[2];\n  return { moduleAddress, moduleName, functionName };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { parseTypeTag } from \"../typeTag/parser\";\nimport { TypeTag, TypeTagStruct } from \"../typeTag\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { EntryFunctionArgumentTypes, SimpleEntryFunctionArgumentTypes, EntryFunctionABI } from \"../types\";\nimport { Bool, MoveOption, MoveString, MoveVector, U128, U16, U256, U32, U64, U8 } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { getModule } from \"../../internal/account\";\nimport {\n  findFirstNonSignerArg,\n  isBcsAddress,\n  isBcsBool,\n  isBcsString,\n  isBcsU128,\n  isBcsU16,\n  isBcsU256,\n  isBcsU32,\n  isBcsU64,\n  isBcsU8,\n  isBool,\n  isEncodedEntryFunctionArgument,\n  isLargeNumber,\n  isNull,\n  isNumber,\n  isString,\n  throwTypeMismatch,\n} from \"./helpers\";\n\nconst TEXT_ENCODER = new TextEncoder();\n\n/**\n * Convert type arguments to only type tags, allowing for string representations of type tags\n */\nexport function standardizeTypeTags(typeArguments?: Array<TypeTag | string>): Array<TypeTag> {\n  return (\n    typeArguments?.map((typeArg: string | TypeTag): TypeTag => {\n      // Convert to TypeTag if it's a string representation\n      if (isString(typeArg)) {\n        return parseTypeTag(typeArg);\n      }\n      return typeArg;\n    }) ?? []\n  );\n}\n\n/**\n * Fetches the ABI for an entry function from the module\n *\n * @param moduleAddress\n * @param moduleName\n * @param functionName\n * @param aptosConfig\n */\nexport async function fetchEntryFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<EntryFunctionABI> {\n  // This fetch from the API is currently cached\n  const module = await getModule({ aptosConfig, accountAddress: moduleAddress, moduleName });\n\n  const functionAbi = module.abi?.exposed_functions.find((func) => func.name === functionName);\n\n  // If there's no ABI, then the function is invalid\n  if (!functionAbi) {\n    throw new Error(`Could not find entry function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n  }\n\n  // Non-entry functions also can't be used\n  if (!functionAbi.is_entry) {\n    throw new Error(`'${moduleAddress}::${moduleName}::${functionName}' is not an entry function`);\n  }\n\n  // Remove the signer arguments\n  const first = findFirstNonSignerArg(functionAbi);\n  const params: TypeTag[] = [];\n  for (let i = first; i < functionAbi.params.length; i += 1) {\n    params.push(parseTypeTag(functionAbi.params[i], { allowGenerics: true }));\n  }\n\n  return {\n    typeParameters: functionAbi.generic_type_params,\n    parameters: params,\n  };\n}\n\n/**\n * Converts a non-BCS encoded argument into BCS encoded, if necessary\n * @param functionName\n * @param functionAbi\n * @param arg\n * @param position\n */\nexport function convertArgument(\n  functionName: string,\n  functionAbi: EntryFunctionABI,\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n) {\n  // Ensure not too many arguments\n  if (position >= functionAbi.parameters.length) {\n    throw new Error(`Too many arguments for '${functionName}', expected ${functionAbi.parameters.length}`);\n  }\n\n  const param = functionAbi.parameters[position];\n  return checkOrConvertArgument(arg, param, position, genericTypeParams);\n}\n\nexport function checkOrConvertArgument(\n  arg: SimpleEntryFunctionArgumentTypes | EntryFunctionArgumentTypes,\n  param: TypeTag,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n) {\n  // If the argument is bcs encoded, we can just use it directly\n  if (isEncodedEntryFunctionArgument(arg)) {\n    // Ensure the type matches the ABI\n    checkType(param, arg, position);\n    return arg;\n  }\n\n  // If it is not BCS encoded, we will need to convert it with the ABI\n  return parseArg(arg, param, position, genericTypeParams);\n}\n\n/**\n * Parses a non-BCS encoded argument into a BCS encoded argument recursively\n * @param arg\n * @param param\n * @param position\n * @param genericTypeParams\n */\nfunction parseArg(\n  arg: SimpleEntryFunctionArgumentTypes,\n  param: TypeTag,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n): EntryFunctionArgumentTypes {\n  if (param.isBool()) {\n    if (isBool(arg)) {\n      return new Bool(arg);\n    }\n    throwTypeMismatch(\"boolean\", position);\n  }\n  // TODO: support uint8array?\n  if (param.isAddress()) {\n    if (isString(arg)) {\n      return AccountAddress.fromString(arg);\n    }\n    throwTypeMismatch(\"string | AccountAddress\", position);\n  }\n  if (param.isU8()) {\n    if (isNumber(arg)) {\n      return new U8(arg);\n    }\n    throwTypeMismatch(\"number\", position);\n  }\n  if (param.isU16()) {\n    if (isNumber(arg)) {\n      return new U16(arg);\n    }\n    throwTypeMismatch(\"number\", position);\n  }\n  if (param.isU32()) {\n    if (isNumber(arg)) {\n      return new U32(arg);\n    }\n    throwTypeMismatch(\"number\", position);\n  }\n  if (param.isU64()) {\n    if (isLargeNumber(arg)) {\n      return new U64(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n  if (param.isU128()) {\n    if (isLargeNumber(arg)) {\n      return new U128(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n  if (param.isU256()) {\n    if (isLargeNumber(arg)) {\n      return new U256(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n\n  // Generic needs to use the sub-type\n  if (param.isGeneric()) {\n    const genericIndex = param.value;\n    if (genericIndex < 0 || genericIndex >= genericTypeParams.length) {\n      throw new Error(`Generic argument ${param.toString()} is invalid for argument ${position}`);\n    }\n\n    return checkOrConvertArgument(arg, genericTypeParams[genericIndex], position, genericTypeParams);\n  }\n\n  // We have to special case some vectors for Vector<u8>\n  if (param.isVector()) {\n    // Check special case for Vector<u8>\n    if (param.value.isU8()) {\n      // We don't allow vector<u8>, but we convert strings to UTF8 uint8array\n      // This is legacy behavior from the original SDK\n      if (isString(arg)) {\n        return MoveVector.U8(TEXT_ENCODER.encode(arg));\n      }\n      if (arg instanceof Uint8Array) {\n        return MoveVector.U8(arg);\n      }\n      if (arg instanceof ArrayBuffer) {\n        return MoveVector.U8(new Uint8Array(arg));\n      }\n    }\n\n    // TODO: Support Uint16Array, Uint32Array, BigUint64Array?\n\n    if (Array.isArray(arg)) {\n      return new MoveVector(arg.map((item) => checkOrConvertArgument(item, param.value, position, genericTypeParams)));\n    }\n\n    throw new Error(`Type mismatch for argument ${position}, type '${param.toString()}'`);\n  }\n\n  // Handle structs as they're more complex\n  if (param.isStruct()) {\n    if (param.isString()) {\n      if (isString(arg)) {\n        return new MoveString(arg);\n      }\n      throwTypeMismatch(\"string\", position);\n    }\n    if (param.isObject()) {\n      // The inner type of Object doesn't matter, since it's just syntactic sugar\n      if (isString(arg)) {\n        return AccountAddress.fromString(arg);\n      }\n      throwTypeMismatch(\"string | AccountAddress\", position);\n    }\n\n    if (param.isOption()) {\n      // Empty option must be handled specially\n      if (isNull(arg)) {\n        // Note: This is a placeholder U8 type, and does not match the actual type, as that can't be dynamically grabbed\n        return new MoveOption<U8>(null);\n      }\n\n      return new MoveOption(checkOrConvertArgument(arg, param.value.typeArgs[0], position, genericTypeParams));\n    }\n\n    throw new Error(`Unsupported struct input type for argument ${position}, type '${param.toString()}'`);\n  }\n\n  throw new Error(`Type mismatch for argument ${position}, type '${param.toString()}'`);\n}\n\n/**\n * Checks that the type of an already BCS encoded argument matches the ABI\n * @param param\n * @param arg\n * @param position\n */\nfunction checkType(param: TypeTag, arg: EntryFunctionArgumentTypes, position: number) {\n  if (param.isBool()) {\n    if (isBcsBool(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"Bool\", position);\n  }\n  if (param.isAddress()) {\n    if (isBcsAddress(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"AccountAddress\", position);\n  }\n  if (param.isU8()) {\n    if (isBcsU8(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U8\", position);\n  }\n  if (param.isU16()) {\n    if (isBcsU16(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U16\", position);\n  }\n  if (param.isU32()) {\n    if (isBcsU32(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U32\", position);\n  }\n  if (param.isU64()) {\n    if (isBcsU64(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U64\", position);\n  }\n  if (param.isU128()) {\n    if (isBcsU128(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U128\", position);\n  }\n  if (param.isU256()) {\n    if (isBcsU256(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U256\", position);\n  }\n  if (param.isVector()) {\n    if (arg instanceof MoveVector) {\n      // If there's anything in it, check that the inner types match\n      // Note that since it's typed, the first item should be the same as the rest\n      if (arg.values.length > 0) {\n        checkType(param.value, arg.values[0], position);\n      }\n\n      return;\n    }\n    throwTypeMismatch(\"MoveVector\", position);\n  }\n\n  // Handle structs as they're more complex\n  if (param instanceof TypeTagStruct) {\n    if (param.isString()) {\n      if (isBcsString(arg)) {\n        return;\n      }\n      throwTypeMismatch(\"MoveString\", position);\n    }\n    if (param.isObject()) {\n      if (isBcsAddress(arg)) {\n        return;\n      }\n      throwTypeMismatch(\"AccountAddress\", position);\n    }\n    if (param.isOption()) {\n      if (arg instanceof MoveOption) {\n        // If there's a value, we can check the inner type (otherwise it doesn't really matter)\n        if (arg.value !== undefined) {\n          checkType(param.value.typeArgs[0], arg.value, position);\n        }\n        return;\n      }\n      throwTypeMismatch(\"MoveOption\", position);\n    }\n  }\n\n  throw new Error(`Type mismatch for argument ${position}, expected '${param.toString()}'`);\n}\n","/**\n * This file contains the underlying implementations for exposed submission API surface in\n * the {@link api/transaction}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * transaction namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { MoveVector, U8 } from \"../bcs\";\nimport { postAptosFullNode } from \"../client\";\nimport { Account } from \"../core/account\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { PrivateKey } from \"../core/crypto\";\nimport { AccountAuthenticator } from \"../transactions/authenticator/account\";\nimport { RotationProofChallenge } from \"../transactions/instances/rotationProofChallenge\";\nimport {\n  buildTransaction,\n  generateTransactionPayload,\n  generateSignedTransactionForSimulation,\n  generateSignedTransaction,\n  sign,\n  generateSigningMessage,\n  generateTransactionPayloadWithABI,\n} from \"../transactions/transactionBuilder/transactionBuilder\";\nimport {\n  InputGenerateTransactionData,\n  AnyRawTransaction,\n  InputSimulateTransactionData,\n  InputGenerateTransactionOptions,\n  SimpleTransaction,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputSubmitTransactionData,\n  InputGenerateMultiAgentRawTransactionData,\n  InputGenerateSingleSignerRawTransactionData,\n  MultiAgentTransaction,\n  AnyTransactionPayloadInstance,\n  EntryFunctionABI,\n} from \"../transactions/types\";\nimport { getInfo } from \"./account\";\nimport { UserTransactionResponse, PendingTransactionResponse, MimeType, HexInput, TransactionResponse } from \"../types\";\nimport { TypeTagU8, TypeTagVector } from \"../transactions\";\n\n/**\n * We are defining function signatures, each with its specific input and output.\n * These are the possible function signature for `generateTransaction` function.\n * When we call `generateTransaction` function with the relevant type properties,\n * Typescript can infer the return type based on the appropriate function overload.\n */\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateSingleSignerRawTransactionData,\n): Promise<SimpleTransaction>;\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateMultiAgentRawTransactionData,\n): Promise<MultiAgentTransaction>;\n/**\n * Generates any transaction by passing in the required arguments\n *\n * @param args.sender The transaction sender's account address as a AccountAddressInput\n * @param args.data EntryFunctionData | ScriptData | MultiSigData\n * @param args.feePayerAddress optional. For a fee payer (aka sponsored) transaction\n * @param args.secondarySignerAddresses optional. For a multi-agent or fee payer (aka sponsored) transactions\n * @param args.options optional. GenerateTransactionOptions type\n *\n * @example\n * For a single signer entry function\n * move function name, move function type arguments, move function arguments\n * `\n * data: {\n *  function:\"0x1::aptos_account::transfer\",\n *  typeArguments:[]\n *  functionArguments :[receiverAddress,10]\n * }\n * `\n *\n * @example\n * For a single signer script function\n * module bytecode, move function type arguments, move function arguments\n * ```\n * data: {\n *  bytecode:\"0x001234567\",\n *  typeArguments:[],\n *  functionArguments :[receiverAddress,10]\n * }\n * ```\n *\n * @return An instance of a RawTransaction, plus optional secondary/fee payer addresses\n * ```\n * {\n *  rawTransaction: RawTransaction,\n *  secondarySignerAddresses? : Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n */\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n): Promise<AnyRawTransaction> {\n  const payload = await buildTransactionPayload(args);\n  return buildRawTransaction(args, payload);\n}\n\nexport async function buildTransactionPayload(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n): Promise<AnyTransactionPayloadInstance> {\n  const { aptosConfig, data } = args;\n\n  // Merge in aptosConfig for remote ABI on non-script payloads\n  let generateTransactionPayloadData: InputGenerateTransactionPayloadDataWithRemoteABI;\n  let payload: AnyTransactionPayloadInstance;\n  if (\"bytecode\" in data) {\n    // TODO: Add ABI checking later\n    payload = await generateTransactionPayload(data);\n  } else if (\"multisigAddress\" in data) {\n    if (data.abi) {\n      payload = generateTransactionPayloadWithABI({ abi: data.abi, ...data });\n    } else {\n      generateTransactionPayloadData = {\n        aptosConfig,\n        multisigAddress: data.multisigAddress,\n        function: data.function,\n        functionArguments: data.functionArguments,\n        typeArguments: data.typeArguments,\n      };\n      payload = await generateTransactionPayload(generateTransactionPayloadData);\n    }\n  } else if (data.abi) {\n    payload = generateTransactionPayloadWithABI({ abi: data.abi, ...data });\n  } else {\n    generateTransactionPayloadData = {\n      aptosConfig,\n      function: data.function,\n      functionArguments: data.functionArguments,\n      typeArguments: data.typeArguments,\n    };\n    payload = await generateTransactionPayload(generateTransactionPayloadData);\n  }\n  return payload;\n}\n\nexport async function buildRawTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n  payload: AnyTransactionPayloadInstance,\n): Promise<AnyRawTransaction> {\n  const { aptosConfig, sender, options } = args;\n\n  let feePayerAddress;\n  if (isFeePayerTransactionInput(args)) {\n    feePayerAddress = AccountAddress.ZERO.toString();\n  }\n\n  if (isMultiAgentTransactionInput(args)) {\n    const { secondarySignerAddresses } = args;\n    return buildTransaction({\n      aptosConfig,\n      sender,\n      payload,\n      options,\n      secondarySignerAddresses,\n      feePayerAddress,\n    });\n  }\n\n  return buildTransaction({\n    aptosConfig,\n    sender,\n    payload,\n    options,\n    feePayerAddress,\n  });\n}\n\nfunction isFeePayerTransactionInput(data: InputGenerateTransactionData): boolean {\n  return data.withFeePayer === true;\n}\n\nfunction isMultiAgentTransactionInput(\n  data: InputGenerateTransactionData,\n): data is InputGenerateMultiAgentRawTransactionData {\n  return \"secondarySignerAddresses\" in data;\n}\n\n/**\n * Builds a signing message that can be signed by external signers\n *\n * Note: Please prefer using `signTransaction` unless signing outside the SDK\n *\n * @param args.transaction AnyRawTransaction, as generated by `generateTransaction()`\n *\n * @return The message to be signed\n */\nexport function getSigningMessage(args: { transaction: AnyRawTransaction }): Uint8Array {\n  const { transaction } = args;\n  return generateSigningMessage(transaction);\n}\n\n/**\n * Sign a transaction that can later be submitted to chain\n *\n * @param args.signer The signer account to sign the transaction\n * @param args.transaction An instance of a RawTransaction, plus optional secondary/fee payer addresses\n * ```\n * {\n *  rawTransaction: RawTransaction,\n *  secondarySignerAddresses? : Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n *\n * @return The signer AccountAuthenticator\n */\nexport function signTransaction(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n  const accountAuthenticator = sign({ ...args });\n  return accountAuthenticator;\n}\n\n/**\n * Simulates a transaction before singing it.\n *\n * @param args.signerPublicKey The signer public key\n * @param args.transaction The raw transaction to simulate\n * @param args.secondarySignersPublicKeys optional. For when the transaction is a multi signers transaction\n * @param args.feePayerPublicKey optional. For when the transaction is a fee payer (aka sponsored) transaction\n * @param args.options optional. A config to simulate the transaction with\n */\nexport async function simulateTransaction(\n  args: { aptosConfig: AptosConfig } & InputSimulateTransactionData,\n): Promise<Array<UserTransactionResponse>> {\n  const { aptosConfig, transaction, signerPublicKey, secondarySignersPublicKeys, feePayerPublicKey, options } = args;\n\n  const signedTransaction = generateSignedTransactionForSimulation({\n    transaction,\n    signerPublicKey,\n    secondarySignersPublicKeys,\n    feePayerPublicKey,\n    options,\n  });\n\n  const { data } = await postAptosFullNode<Uint8Array, Array<UserTransactionResponse>>({\n    aptosConfig,\n    body: signedTransaction,\n    path: \"transactions/simulate\",\n    params: {\n      estimate_gas_unit_price: args.options?.estimateGasUnitPrice ?? false,\n      estimate_max_gas_amount: args.options?.estimateMaxGasAmount ?? false,\n      estimate_prioritized_gas_unit_price: args.options?.estimatePrioritizedGasUnitPrice ?? false,\n    },\n    originMethod: \"simulateTransaction\",\n    contentType: MimeType.BCS_SIGNED_TRANSACTION,\n  });\n  return data;\n}\n\n/**\n * Submit transaction to chain\n *\n * @param args.transaction A aptos transaction type\n * @param args.senderAuthenticator The account authenticator of the transaction sender\n * @param args.secondarySignerAuthenticators optional. For when the transaction is a multi signers transaction\n *\n * @return PendingTransactionResponse\n */\nexport async function submitTransaction(\n  args: {\n    aptosConfig: AptosConfig;\n  } & InputSubmitTransactionData,\n): Promise<PendingTransactionResponse> {\n  const { aptosConfig } = args;\n  const signedTransaction = generateSignedTransaction({ ...args });\n  const { data } = await postAptosFullNode<Uint8Array, PendingTransactionResponse>({\n    aptosConfig,\n    body: signedTransaction,\n    path: \"transactions\",\n    originMethod: \"submitTransaction\",\n    contentType: MimeType.BCS_SIGNED_TRANSACTION,\n  });\n  return data;\n}\n\nexport async function signAndSubmitTransaction(args: {\n  aptosConfig: AptosConfig;\n  signer: Account;\n  transaction: AnyRawTransaction;\n}): Promise<PendingTransactionResponse> {\n  const { aptosConfig, signer, transaction } = args;\n  const authenticator = signTransaction({ signer, transaction });\n  return submitTransaction({\n    aptosConfig,\n    transaction,\n    senderAuthenticator: authenticator,\n  });\n}\n\nconst packagePublishAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [TypeTagVector.u8(), new TypeTagVector(TypeTagVector.u8())],\n};\n\nexport async function publicPackageTransaction(args: {\n  aptosConfig: AptosConfig;\n  account: AccountAddressInput;\n  metadataBytes: HexInput;\n  moduleBytecode: Array<HexInput>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, account, metadataBytes, moduleBytecode, options } = args;\n\n  const totalByteCode = moduleBytecode.map((bytecode) => MoveVector.U8(bytecode));\n\n  return generateTransaction({\n    aptosConfig,\n    sender: AccountAddress.from(account),\n    data: {\n      function: \"0x1::code::publish_package_txn\",\n      functionArguments: [MoveVector.U8(metadataBytes), new MoveVector(totalByteCode)],\n      abi: packagePublishAbi,\n    },\n    options,\n  });\n}\n\nconst rotateAuthKeyAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagU8(),\n    TypeTagVector.u8(),\n    new TypeTagU8(),\n    TypeTagVector.u8(),\n    TypeTagVector.u8(),\n    TypeTagVector.u8(),\n  ],\n};\n\n/**\n * TODO: Need to refactor and move this function out of transactionSubmission\n */\nexport async function rotateAuthKey(args: {\n  aptosConfig: AptosConfig;\n  fromAccount: Account;\n  toNewPrivateKey: PrivateKey;\n}): Promise<TransactionResponse> {\n  const { aptosConfig, fromAccount, toNewPrivateKey } = args;\n  const accountInfo = await getInfo({\n    aptosConfig,\n    accountAddress: fromAccount.accountAddress,\n  });\n\n  const newAccount = Account.fromPrivateKey({ privateKey: toNewPrivateKey, legacy: true });\n\n  const challenge = new RotationProofChallenge({\n    sequenceNumber: BigInt(accountInfo.sequence_number),\n    originator: fromAccount.accountAddress,\n    currentAuthKey: AccountAddress.from(accountInfo.authentication_key),\n    newPublicKey: newAccount.publicKey,\n  });\n\n  // Sign the challenge\n  const challengeHex = challenge.bcsToBytes();\n  const proofSignedByCurrentPrivateKey = fromAccount.sign(challengeHex);\n  const proofSignedByNewPrivateKey = newAccount.sign(challengeHex);\n\n  // Generate transaction\n  const rawTxn = await generateTransaction({\n    aptosConfig,\n    sender: fromAccount.accountAddress,\n    data: {\n      function: \"0x1::account::rotate_authentication_key\",\n      functionArguments: [\n        new U8(fromAccount.signingScheme.valueOf()), // from scheme\n        MoveVector.U8(fromAccount.publicKey.toUint8Array()),\n        new U8(newAccount.signingScheme.valueOf()), // to scheme\n        MoveVector.U8(newAccount.publicKey.toUint8Array()),\n        MoveVector.U8(proofSignedByCurrentPrivateKey.toUint8Array()),\n        MoveVector.U8(proofSignedByNewPrivateKey.toUint8Array()),\n      ],\n      abi: rotateAuthKeyAbi,\n    },\n  });\n  return signAndSubmitTransaction({\n    aptosConfig,\n    signer: fromAccount,\n    transaction: rawTxn,\n  });\n}\n","import { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddressInput } from \"../core\";\nimport { EntryFunctionABI, InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions/types\";\nimport { AnyNumber, MoveStructId } from \"../types\";\nimport { APTOS_COIN } from \"../utils/const\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { TypeTagAddress, TypeTagU64 } from \"../transactions\";\n\nconst coinTransferAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [] }],\n  parameters: [new TypeTagAddress(), new TypeTagU64()],\n};\n\nexport async function transferCoinTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  recipient: AccountAddressInput;\n  amount: AnyNumber;\n  coinType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, recipient, amount, coinType, options } = args;\n  const coinStructType = coinType ?? APTOS_COIN;\n  return generateTransaction({\n    aptosConfig,\n    sender,\n    data: {\n      function: \"0x1::aptos_account::transfer_coins\",\n      typeArguments: [coinStructType],\n      functionArguments: [recipient, amount],\n      abi: coinTransferAbi,\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddressInput } from \"../core\";\nimport { transferCoinTransaction } from \"../internal/coin\";\nimport { SimpleTransaction, InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { AnyNumber, MoveStructId } from \"../types\";\nimport { AptosConfig } from \"./aptosConfig\";\n\n/**\n * A class to handle all `Coin` operations\n */\nexport class Coin {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Generate a transfer coin transaction that can be simulated and/or signed and submitted\n   *\n   * @param args.sender The sender account\n   * @param args.recipient The recipient address\n   * @param args.amount The amount to transfer\n   * @param args.coinType optional. The coin struct type to transfer. Defaults to 0x1::aptos_coin::AptosCoin\n   *\n   * @returns SimpleTransaction\n   */\n  async transferCoinTransaction(args: {\n    sender: AccountAddressInput;\n    recipient: AccountAddressInput;\n    amount: AnyNumber;\n    coinType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferCoinTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/digitalAsset}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * digitalAsset namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { Bool, MoveString, MoveVector, U64 } from \"../bcs\";\nimport { Account, AccountAddress, AccountAddressInput } from \"../core\";\nimport { EntryFunctionABI, InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions/types\";\nimport {\n  AnyNumber,\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  MoveAbility,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n} from \"../types\";\nimport {\n  GetCollectionDataQuery,\n  GetCurrentTokenOwnershipQuery,\n  GetTokenActivityQuery,\n  GetTokenDataQuery,\n} from \"../types/generated/operations\";\nimport {\n  GetCollectionData,\n  GetCurrentTokenOwnership,\n  GetTokenActivity,\n  GetTokenData,\n} from \"../types/generated/queries\";\nimport { queryIndexer } from \"./general\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { MAX_U64_BIG_INT } from \"../bcs/consts\";\nimport { CurrentTokenOwnershipsV2BoolExp, TokenActivitiesV2BoolExp } from \"../types/generated/types\";\nimport {\n  checkOrConvertArgument,\n  objectStructTag,\n  parseTypeTag,\n  stringStructTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagGeneric,\n  TypeTagStruct,\n  TypeTagU64,\n  TypeTagVector,\n} from \"../transactions\";\n\n// A property type map for the user input and what Move expects\nconst PropertyTypeMap = {\n  BOOLEAN: \"bool\",\n  U8: \"u8\",\n  U16: \"u16\",\n  U32: \"u32\",\n  U64: \"u64\",\n  U128: \"u128\",\n  U256: \"u256\",\n  ADDRESS: \"address\",\n  STRING: \"0x1::string::String\",\n  ARRAY: \"vector<u8>\",\n};\n\nexport type PropertyType = keyof typeof PropertyTypeMap;\n\n// Accepted property value types for user input\n// To pass in an Array, use Uint8Array type\n// for example `new MoveVector([new MoveString(\"hello\"), new MoveString(\"world\")]).bcsToBytes()`\nexport type PropertyValue = boolean | number | bigint | string | AccountAddress | Uint8Array;\n\n// The default digital asset type to use if non provided\nconst defaultDigitalAssetType = \"0x4::token::Token\";\n\n// FETCH QUERIES\n\nexport async function getDigitalAssetData(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n}): Promise<GetTokenDataResponse> {\n  const { aptosConfig, digitalAssetAddress } = args;\n\n  const whereCondition: { token_data_id: { _eq: string } } = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenData,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getDigitalAssetData\",\n  });\n\n  return data.current_token_datas_v2[0];\n}\n\nexport async function getCurrentDigitalAssetOwnership(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n}): Promise<GetCurrentTokenOwnershipResponse> {\n  const { aptosConfig, digitalAssetAddress } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCurrentDigitalAssetOwnership\",\n  });\n\n  return data.current_token_ownerships_v2[0];\n}\n\nexport async function getOwnedDigitalAssets(args: {\n  aptosConfig: AptosConfig;\n  ownerAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n}): Promise<GetOwnedTokensResponse> {\n  const { aptosConfig, ownerAddress, options } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    owner_address: { _eq: AccountAddress.from(ownerAddress).toStringLong() },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getOwnedDigitalAssets\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\nexport async function getDigitalAssetActivity(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n}): Promise<GetTokenActivityResponse> {\n  const { aptosConfig, digitalAssetAddress, options } = args;\n\n  const whereCondition: TokenActivitiesV2BoolExp = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenActivity,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenActivityQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getDigitalAssetActivity\",\n  });\n\n  return data.token_activities_v2;\n}\n\nexport interface CreateCollectionOptions {\n  maxSupply?: AnyNumber;\n  mutableDescription?: boolean;\n  mutableRoyalty?: boolean;\n  mutableURI?: boolean;\n  mutableTokenDescription?: boolean;\n  mutableTokenName?: boolean;\n  mutableTokenProperties?: boolean;\n  mutableTokenURI?: boolean;\n  tokensBurnableByCreator?: boolean;\n  tokensFreezableByCreator?: boolean;\n  royaltyNumerator?: number;\n  royaltyDenominator?: number;\n}\n\nconst createCollectionAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagU64(),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagU64(),\n    new TypeTagU64(),\n  ],\n};\n\nexport async function createCollectionTransaction(\n  args: {\n    aptosConfig: AptosConfig;\n    creator: Account;\n    description: string;\n    name: string;\n    uri: string;\n    options?: InputGenerateTransactionOptions;\n  } & CreateCollectionOptions,\n): Promise<SimpleTransaction> {\n  const { aptosConfig, options, creator } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::create_collection\",\n      functionArguments: [\n        // Do not change the order\n        new MoveString(args.description),\n        new U64(args.maxSupply ?? MAX_U64_BIG_INT),\n        new MoveString(args.name),\n        new MoveString(args.uri),\n        new Bool(args.mutableDescription ?? true),\n        new Bool(args.mutableRoyalty ?? true),\n        new Bool(args.mutableURI ?? true),\n        new Bool(args.mutableTokenDescription ?? true),\n        new Bool(args.mutableTokenName ?? true),\n        new Bool(args.mutableTokenProperties ?? true),\n        new Bool(args.mutableTokenURI ?? true),\n        new Bool(args.tokensBurnableByCreator ?? true),\n        new Bool(args.tokensFreezableByCreator ?? true),\n        new U64(args.royaltyNumerator ?? 0),\n        new U64(args.royaltyDenominator ?? 1),\n      ],\n      abi: createCollectionAbi,\n    },\n    options,\n  });\n}\n\nexport async function getCollectionData(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  collectionName: string;\n  options?: TokenStandardArg;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, creatorAddress, collectionName, options } = args;\n  const address = AccountAddress.from(creatorAddress);\n\n  const whereCondition: any = {\n    collection_name: { _eq: collectionName },\n    creator_address: { _eq: address.toStringLong() },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  const graphqlQuery = {\n    query: GetCollectionData,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n  const data = await queryIndexer<GetCollectionDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCollectionData\",\n  });\n\n  return data.current_collections_v2[0];\n}\n\nexport async function getCollectionDataByCollectionId(args: {\n  aptosConfig: AptosConfig;\n  collectionId: AccountAddressInput;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, collectionId } = args;\n  const address = AccountAddress.from(collectionId);\n\n  const whereCondition: any = {\n    collection_id: { _eq: address.toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetCollectionData,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n  const data = await queryIndexer<GetCollectionDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCollectionData\",\n  });\n\n  return data.current_collections_v2[0];\n}\n\nexport async function getCollectionId(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  collectionName: string;\n  options?: TokenStandardArg;\n}): Promise<string> {\n  return (await getCollectionData(args)).collection_id;\n}\n\n// TRANSACTIONS\n\nconst mintDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(TypeTagVector.u8()),\n  ],\n};\n\nexport async function mintDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  collection: string;\n  description: string;\n  name: string;\n  uri: string;\n  propertyKeys?: Array<string>;\n  propertyTypes?: Array<PropertyType>;\n  propertyValues?: Array<PropertyValue>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    options,\n    creator,\n    collection,\n    description,\n    name,\n    uri,\n    propertyKeys,\n    propertyTypes,\n    propertyValues,\n  } = args;\n  const convertedPropertyType = propertyTypes?.map((type) => PropertyTypeMap[type]);\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint\",\n      functionArguments: [\n        new MoveString(collection),\n        new MoveString(description),\n        new MoveString(name),\n        new MoveString(uri),\n        MoveVector.MoveString(propertyKeys ?? []),\n        MoveVector.MoveString(convertedPropertyType ?? []),\n        getPropertyValueRaw(propertyValues ?? [], convertedPropertyType ?? []),\n      ],\n      abi: mintDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst transferDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagAddress()],\n};\n\nexport async function transferDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  digitalAssetAddress: AccountAddressInput;\n  recipient: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, digitalAssetAddress, recipient, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::object::transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), AccountAddress.from(recipient)],\n      abi: transferDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst mintSoulBoundAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(TypeTagVector.u8()),\n    new TypeTagAddress(),\n  ],\n};\n\nexport async function mintSoulBoundTransaction(args: {\n  aptosConfig: AptosConfig;\n  account: Account;\n  collection: string;\n  description: string;\n  name: string;\n  uri: string;\n  recipient: AccountAddress;\n  propertyKeys?: Array<string>;\n  propertyTypes?: Array<PropertyType>;\n  propertyValues?: Array<PropertyValue>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    account,\n    collection,\n    description,\n    name,\n    uri,\n    recipient,\n    propertyKeys,\n    propertyTypes,\n    propertyValues,\n    options,\n  } = args;\n  if (propertyKeys?.length !== propertyValues?.length) {\n    throw new Error(\"Property keys and property values counts do not match\");\n  }\n  if (propertyTypes?.length !== propertyValues?.length) {\n    throw new Error(\"Property types and property values counts do not match\");\n  }\n  const convertedPropertyType = propertyTypes?.map((type) => PropertyTypeMap[type]);\n  return generateTransaction({\n    aptosConfig,\n    sender: account.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint_soul_bound\",\n      functionArguments: [\n        collection,\n        description,\n        name,\n        uri,\n        MoveVector.MoveString(propertyKeys ?? []),\n        MoveVector.MoveString(convertedPropertyType ?? []),\n        getPropertyValueRaw(propertyValues ?? [], convertedPropertyType ?? []),\n        recipient,\n      ],\n      abi: mintSoulBoundAbi,\n    },\n    options,\n  });\n}\n\nconst burnDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0)))],\n};\n\nexport async function burnDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::burn\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress)],\n      abi: burnDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst freezeDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0)))],\n};\n\nexport async function freezeDigitalAssetTransferTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::freeze_transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress],\n      abi: freezeDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst unfreezeDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0)))],\n};\n\nexport async function unfreezeDigitalAssetTransferTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::unfreeze_transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress],\n      abi: unfreezeDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst setDigitalAssetDescriptionAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\nexport async function setDigitalAssetDescriptionTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  description: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, description, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_description\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(description)],\n      abi: setDigitalAssetDescriptionAbi,\n    },\n    options,\n  });\n}\n\nconst setDigitalAssetNameAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\nexport async function setDigitalAssetNameTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  name: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, name, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_name\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(name)],\n      abi: setDigitalAssetNameAbi,\n    },\n    options,\n  });\n}\n\nconst setDigitalAssetURIAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\nexport async function setDigitalAssetURITransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  uri: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, uri, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_uri\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(uri)],\n      abi: setDigitalAssetURIAbi,\n    },\n    options,\n  });\n}\n\nconst addDigitalAssetPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    TypeTagVector.u8(),\n  ],\n};\n\nexport async function addDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [\n        AccountAddress.from(digitalAssetAddress),\n        new MoveString(propertyKey),\n        new MoveString(PropertyTypeMap[propertyType]),\n        MoveVector.U8(getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType])),\n      ],\n      abi: addDigitalAssetPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst removeDigitalAssetPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\nexport async function removeDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, propertyKey, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::remove_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(propertyKey)],\n      abi: removeDigitalAssetPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst updateDigitalAssetPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    TypeTagVector.u8(),\n  ],\n};\n\nexport async function updateDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [\n        AccountAddress.from(digitalAssetAddress),\n        new MoveString(propertyKey),\n        new MoveString(PropertyTypeMap[propertyType]),\n        getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType]),\n      ],\n      abi: updateDigitalAssetPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst addDigitalAssetTypedPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }, { constraints: [] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagGeneric(1),\n  ],\n};\n\nexport async function addDigitalAssetTypedPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_typed_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType, PropertyTypeMap[propertyType]],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(propertyKey), propertyValue],\n      abi: addDigitalAssetTypedPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst updateDigitalAssetTypedPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }, { constraints: [] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagGeneric(1),\n  ],\n};\n\nexport async function updateDigitalAssetTypedPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_typed_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType, PropertyTypeMap[propertyType]],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(propertyKey), propertyValue],\n      abi: updateDigitalAssetTypedPropertyAbi,\n    },\n    options,\n  });\n}\n\nfunction getPropertyValueRaw(propertyValues: Array<PropertyValue>, propertyTypes: Array<string>): Array<Uint8Array> {\n  const results = new Array<Uint8Array>();\n  propertyTypes.forEach((typ, index) => {\n    results.push(getSinglePropertyValueRaw(propertyValues[index], typ));\n  });\n\n  return results;\n}\n\nfunction getSinglePropertyValueRaw(propertyValue: PropertyValue, propertyType: string): Uint8Array {\n  const typeTag = parseTypeTag(propertyType);\n  const res = checkOrConvertArgument(propertyValue, typeTag, 0, []);\n  return res.bcsToBytes();\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnyNumber,\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n} from \"../types\";\nimport { Account, AccountAddress, AccountAddressInput } from \"../core\";\nimport { InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions/types\";\nimport {\n  addDigitalAssetPropertyTransaction,\n  addDigitalAssetTypedPropertyTransaction,\n  burnDigitalAssetTransaction,\n  CreateCollectionOptions,\n  createCollectionTransaction,\n  freezeDigitalAssetTransferTransaction,\n  getCollectionData,\n  getCollectionDataByCollectionId,\n  getCollectionId,\n  getCurrentDigitalAssetOwnership,\n  getDigitalAssetActivity,\n  getDigitalAssetData,\n  getOwnedDigitalAssets,\n  mintDigitalAssetTransaction,\n  mintSoulBoundTransaction,\n  PropertyType,\n  PropertyValue,\n  removeDigitalAssetPropertyTransaction,\n  setDigitalAssetDescriptionTransaction,\n  setDigitalAssetNameTransaction,\n  setDigitalAssetURITransaction,\n  transferDigitalAssetTransaction,\n  unfreezeDigitalAssetTransferTransaction,\n  updateDigitalAssetPropertyTransaction,\n  updateDigitalAssetTypedPropertyTransaction,\n} from \"../internal/digitalAsset\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\n\n/**\n * A class to query all `DigitalAsset` related queries on Aptos.\n */\nexport class DigitalAsset {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries data of a specific collection by the collection creator address and the collection name.\n   *\n   * If, for some reason, a creator account has 2 collections with the same name in v1 and v2,\n   * can pass an optional `tokenStandard` parameter to query a specific standard\n   *\n   * @param args.creatorAddress the address of the collection's creator\n   * @param args.collectionName the name of the collection\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.tokenStandard the token standard to query\n   * @returns GetCollectionDataResponse response type\n   */\n  async getCollectionData(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCollectionData({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries data of a specific collection by the collection ID.\n   *\n   * @param args.collectionId the ID of the collection, it's the same thing as the address of the collection object\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns GetCollectionDataResponse response type\n   */\n  async getCollectionDataByCollectionId(args: {\n    collectionId: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCollectionDataByCollectionId({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a collection's ID.\n   *\n   * This is the same as the collection's object address in V2, but V1 does\n   * not use objects, and does not have an address\n   *\n   * @param args.creatorAddress the address of the collection's creator\n   * @param args.collectionName the name of the collection\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.tokenStandard the token standard to query\n   * @returns the collection id\n   */\n  async getCollectionId(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg;\n  }): Promise<string> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCollectionId({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets digital asset data given the address of a digital asset.\n   *\n   * @param args.tokenAddress The address of the digital asset\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns GetTokenDataResponse containing relevant data to the digital asset.\n   */\n  async getDigitalAssetData(args: {\n    digitalAssetAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetTokenDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getDigitalAssetData({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets digital asset ownership data given the address of a digital asset.\n   *\n   * @param args.tokenAddress The address of the digital asset\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   *\n   * @returns GetCurrentTokenOwnershipResponse containing relevant ownership data of the digital asset.\n   */\n  async getCurrentDigitalAssetOwnership(args: {\n    digitalAssetAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetCurrentTokenOwnershipResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCurrentDigitalAssetOwnership({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets the digital assets that the given address owns.\n   *\n   * @param args.ownerAddress The address of the owner\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   *\n   * @returns GetOwnedTokensResponse containing ownership data of the digital assets belonging to the ownerAddresss.\n   */\n  async getOwnedDigitalAssets(args: {\n    ownerAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetOwnedTokensResponse[0]>;\n  }): Promise<GetOwnedTokensResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getOwnedDigitalAssets({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets the activity data given the address of a digital asset.\n   *\n   * @param args.tokenAddress The address of the digital asset\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   *\n   * @returns GetTokenActivityResponse containing relevant activity data to the digital asset.\n   */\n  async getDigitalAssetActivity(args: {\n    digitalAssetAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n  }): Promise<GetTokenActivityResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getDigitalAssetActivity({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Creates a new collection within the specified account\n   *\n   * @param args.creator the account of the collection's creator\n   * @param args.description the description of the collection\n   * @param args.name the name of the collection\n   * @param args.uri the URI to additional info about the collection\n   *\n   * The parameters below are optional.\n   * @param args.maxSupply controls the max supply of the digital assets - defaults MAX_U64_BIG_INT\n   * @param args.mutableDescription controls mutability of the collection's description - defaults true\n   * @param args.mutableRoyalty controls mutability of the collection's description - defaults true\n   * @param args.mutableUri controls mutability of the collection's URI - defaults true\n   * @param args.mutableTokenDescription controls mutability of the digital asset's description - defaults true\n   * @param args.mutableTokenName controls mutability of the digital asset's name - defaults true\n   * @param args.mutableTokenProperties controls mutability of digital asset's properties - defaults true\n   * @param args.mutableTokenUri controls mutability of the digital asset's URI - defaults true\n   * @param args.tokensBurnableByCreator controls whether digital assets can be burnable by the creator - defaults true\n   * @param args.tokensFreezableByCreator controls whether digital assets can be frozen by the creator - defaults true\n   * @param args.royaltyNumerator the numerator of the royalty to be paid to the creator when\n   * a digital asset is transferred - defaults 0\n   * @param args.royaltyDenominator the denominator of the royalty to be paid to the creator\n   * when a digital asset is transferred - defaults 1\n   *\n   * @returns A SimpleTransaction that when submitted will create the collection.\n   */\n  async createCollectionTransaction(\n    args: {\n      creator: Account;\n      description: string;\n      name: string;\n      uri: string;\n      options?: InputGenerateTransactionOptions;\n    } & CreateCollectionOptions,\n  ): Promise<SimpleTransaction> {\n    return createCollectionTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Create a transaction to mint a digital asset into the creators account within an existing collection.\n   *\n   * @param args.creator the creator of the collection\n   * @param args.collection the name of the collection the digital asset belongs to\n   * @param args.description the description of the digital asset\n   * @param args.name the name of the digital asset\n   * @param args.uri the URI to additional info about the digital asset\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async mintDigitalAssetTransaction(args: {\n    creator: Account;\n    collection: string;\n    description: string;\n    name: string;\n    uri: string;\n    propertyKeys?: Array<string>;\n    propertyTypes?: Array<PropertyType>;\n    propertyValues?: Array<PropertyValue>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return mintDigitalAssetTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Transfer a digital asset (non fungible digital asset) ownership.\n   *\n   * We can transfer a digital asset only when the digital asset is not frozen\n   * (i.e. owner transfer is not disabled such as for soul bound digital assets)\n   *\n   * @param args.sender The sender account of the current digital asset owner\n   * @param args.digitalAssetAddress The digital asset address\n   * @param args.recipient The recipient account address\n   * @param args.digitalAssetType optional. The digital asset type, default to \"0x4::token::Token\"\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async transferDigitalAssetTransaction(args: {\n    sender: Account;\n    digitalAssetAddress: AccountAddressInput;\n    recipient: AccountAddress;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferDigitalAssetTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Mint a soul bound digital asset into a recipient's account\n   *\n   * @param args.account The account that mints the digital asset\n   * @param args.collection The collection name that the digital asset belongs to\n   * @param args.description The digital asset description\n   * @param args.name The digital asset name\n   * @param args.uri The digital asset URL\n   * @param args.recipient The account address where the digital asset will be created\n   * @param args.propertyKeys The property keys for storing on-chain properties\n   * @param args.propertyTypes The type of property values\n   * @param args.propertyValues The property values to be stored on-chain\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async mintSoulBoundTransaction(args: {\n    account: Account;\n    collection: string;\n    description: string;\n    name: string;\n    uri: string;\n    recipient: AccountAddress;\n    propertyKeys?: Array<string>;\n    propertyTypes?: Array<PropertyType>;\n    propertyValues?: Array<PropertyValue>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return mintSoulBoundTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Burn a digital asset by its creator\n   *\n   * @param args.creator The creator account\n   * @param args.digitalAssetAddress The digital asset address\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async burnDigitalAssetTransaction(args: {\n    creator: Account;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return burnDigitalAssetTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Freeze digital asset transfer ability\n   *\n   * @param args.creator The creator account\n   * @param args.digitalAssetAddress The digital asset address\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async freezeDigitalAssetTransaferTransaction(args: {\n    creator: Account;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return freezeDigitalAssetTransferTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Unfreeze digital asset transfer ability\n   *\n   * @param args.creator The creator account\n   * @param args.digitalAssetAddress The digital asset address\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async unfreezeDigitalAssetTransaferTransaction(args: {\n    creator: Account;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return unfreezeDigitalAssetTransferTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Set the digital asset description\n   *\n   * @param args.creator The creator account\n   * @param args.description The digital asset description\n   * @param args.digitalAssetAddress The digital asset address\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async setDigitalAssetDescriptionTransaction(args: {\n    creator: Account;\n    description: string;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return setDigitalAssetDescriptionTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Set the digital asset name\n   *\n   * @param args.creator The creator account\n   * @param args.name The digital asset name\n   * @param args.digitalAssetAddress The digital asset address\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async setDigitalAssetNameTransaction(args: {\n    creator: Account;\n    name: string;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return setDigitalAssetNameTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Set the digital asset name\n   *\n   * @param args.creator The creator account\n   * @param args.uri The digital asset uri\n   * @param args.digitalAssetAddress The digital asset address\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async setDigitalAssetURITransaction(args: {\n    creator: Account;\n    uri: string;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return setDigitalAssetURITransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Add a digital asset property\n   *\n   * @param args.account The account that mints the digital asset\n   * @param args.digitalAssetAddress The digital asset address\n   * @param args.propertyKey The property key for storing on-chain properties\n   * @param args.propertyType The type of property value\n   * @param args.propertyValue The property value to be stored on-chain\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async addDigitalAssetPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return addDigitalAssetPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Remove a digital asset property\n   *\n   * @param args.account The account that mints the digital asset\n   * @param args.digitalAssetAddress The digital asset address\n   * @param args.propertyKey The property key for storing on-chain properties\n   * @param args.propertyType The type of property value\n   * @param args.propertyValue The property value to be stored on-chain\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async removeDigitalAssetPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return removeDigitalAssetPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Update a digital asset property\n   *\n   * @param args.account The account that mints the digital asset\n   * @param args.digitalAssetAddress The digital asset address\n   * @param args.propertyKey The property key for storing on-chain properties\n   * @param args.propertyType The type of property value\n   * @param args.propertyValue The property value to be stored on-chain\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async updateDigitalAssetPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return updateDigitalAssetPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Add a typed digital asset property\n   *\n   * @param args.account The account that mints the digital asset\n   * @param args.digitalAssetAddress The digital asset address\n   * @param args.propertyKey The property key for storing on-chain properties\n   * @param args.propertyType The type of property value\n   * @param args.propertyValue The property value to be stored on-chain\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async addDigitalAssetTypedPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return addDigitalAssetTypedPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Update a typed digital asset property\n   *\n   * @param args.account The account that mints the digital asset\n   * @param args.digitalAssetAddress The digital asset address\n   * @param args.propertyKey The property key for storing on-chain properties\n   * @param args.propertyType The type of property value\n   * @param args.propertyValue The property value to be stored on-chain\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async updateDigitalAssetTypedPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return updateDigitalAssetTypedPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/event}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * event namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { AnyNumber, GetEventsResponse, PaginationArgs, MoveStructId, OrderByArg, WhereArg } from \"../types\";\nimport { GetEventsQuery } from \"../types/generated/operations\";\nimport { GetEvents } from \"../types/generated/queries\";\nimport { EventsBoolExp, InputMaybe } from \"../types/generated/types\";\nimport { queryIndexer } from \"./general\";\n\nconst MAX_EVENT_TYPE_LENGTH = 300;\nconst checkEventTypeLength = (eventType?: InputMaybe<string>) => {\n  if (eventType && eventType.length > MAX_EVENT_TYPE_LENGTH) {\n    throw new Error(`Event type length exceeds the maximum length of ${MAX_EVENT_TYPE_LENGTH}`);\n  }\n};\n\nexport async function getModuleEventsByEventType(args: {\n  aptosConfig: AptosConfig;\n  eventType: MoveStructId;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n}): Promise<GetEventsResponse> {\n  const { aptosConfig, eventType, options } = args;\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: \"0x0000000000000000000000000000000000000000000000000000000000000000\" },\n    creation_number: { _eq: \"0\" },\n    sequence_number: { _eq: \"0\" },\n    indexed_type: { _eq: eventType },\n  };\n\n  const customOptions = {\n    where: whereCondition,\n    pagination: options,\n    orderBy: options?.orderBy,\n  };\n\n  return getEvents({ aptosConfig, options: customOptions });\n}\n\nexport async function getAccountEventsByCreationNumber(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  creationNumber: AnyNumber;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, creationNumber, options } = args;\n  const address = AccountAddress.from(accountAddress);\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address.toStringLong() },\n    creation_number: { _eq: creationNumber },\n  };\n\n  const customOptions = {\n    where: whereCondition,\n    pagination: options,\n    orderBy: options?.orderBy,\n  };\n\n  return getEvents({ aptosConfig, options: customOptions });\n}\n\nexport async function getAccountEventsByEventType(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  eventType: MoveStructId;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, eventType, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address },\n    indexed_type: { _eq: eventType },\n  };\n\n  const customOptions = {\n    where: whereCondition,\n    pagination: options,\n    orderBy: options?.orderBy,\n  };\n\n  return getEvents({ aptosConfig, options: customOptions });\n}\n\nexport async function getEvents(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]> & WhereArg<EventsBoolExp>;\n}): Promise<GetEventsResponse> {\n  const { aptosConfig, options } = args;\n  // eslint-disable-next-line no-underscore-dangle\n  checkEventTypeLength(options?.where?.indexed_type?._eq);\n\n  const graphqlQuery = {\n    query: GetEvents,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetEventsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getEvents\",\n  });\n\n  return data.events;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  getAccountEventsByCreationNumber,\n  getAccountEventsByEventType,\n  getModuleEventsByEventType,\n  getEvents,\n} from \"../internal/event\";\nimport { AnyNumber, GetEventsResponse, MoveStructId, OrderByArg, PaginationArgs, WhereArg } from \"../types\";\nimport { EventsBoolExp } from \"../types/generated/types\";\nimport { AccountAddressInput } from \"../core\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\n\n/**\n * A class to query all `Event` Aptos related queries\n */\nexport class Event {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Get module events by event type\n   *\n   * @param args.eventType - The event type\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   *\n   * @returns Promise<GetEventsResponse>\n   */\n  async getModuleEventsByEventType(args: {\n    eventType: MoveStructId;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getModuleEventsByEventType({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Get events by creation number and an account address\n   *\n   * @param args.accountAddress - The account address\n   * @param args.creationNumber - The event creation number\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   *\n   * @returns Promise<GetEventsResponse>\n   */\n  async getAccountEventsByCreationNumber(args: {\n    accountAddress: AccountAddressInput;\n    creationNumber: AnyNumber;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getAccountEventsByCreationNumber({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Get events by event type and an account address\n   *\n   * @param args.accountAddress - The account address\n   * @param args.eventType - The event type\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   *\n   * @returns Promise<GetEventsResponse>\n   */\n  async getAccountEventsByEventType(args: {\n    accountAddress: AccountAddressInput;\n    eventType: MoveStructId;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getAccountEventsByEventType({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Get all events\n   *\n   * An optional `where` can be passed in to filter out the response.\n   *@param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @example\n   * ```\n   * { where:\n   *  {\n   *   transaction_version: { _eq: 123456 },\n   *  }\n   * }\n   * ```\n   *\n   * @returns GetEventsQuery response type\n   */\n  async getEvents(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetEventsResponse[0]> & WhereArg<EventsBoolExp>;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getEvents({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/faucet}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * faucet namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { postAptosFaucet } from \"../client\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { TransactionResponseType, UserTransactionResponse, WaitForTransactionOptions } from \"../types\";\nimport { DEFAULT_TXN_TIMEOUT_SEC } from \"../utils/const\";\nimport { waitForTransaction } from \"./transaction\";\n\nexport async function fundAccount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  amount: number;\n  options?: WaitForTransactionOptions;\n}): Promise<UserTransactionResponse> {\n  const { aptosConfig, accountAddress, amount, options } = args;\n  const timeout = options?.timeoutSecs || DEFAULT_TXN_TIMEOUT_SEC;\n  const { data } = await postAptosFaucet<any, { txn_hashes: Array<string> }>({\n    aptosConfig,\n    path: \"fund\",\n    body: {\n      address: AccountAddress.from(accountAddress).toString(),\n      amount,\n    },\n    originMethod: \"fundAccount\",\n  });\n\n  const txnHash = data.txn_hashes[0];\n\n  const res = await waitForTransaction({\n    aptosConfig,\n    transactionHash: txnHash,\n    options: {\n      timeoutSecs: timeout,\n      checkSuccess: options?.checkSuccess,\n    },\n  });\n\n  // Response is always User transaction for a user submitted transaction\n  if (res.type === TransactionResponseType.User) {\n    return res;\n  }\n\n  throw new Error(`Unexpected transaction received for fund account: ${res.type}`);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fundAccount } from \"../internal/faucet\";\nimport { UserTransactionResponse, WaitForTransactionOptions } from \"../types\";\nimport { AccountAddressInput } from \"../core\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexer } from \"../internal/transaction\";\n\n/**\n * A class to query all `Faucet` related queries on Aptos.\n */\nexport class Faucet {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * This creates an account if it does not exist and mints the specified amount of\n   * coins into that account\n   *\n   * @param args.accountAddress Address of the account to fund\n   * @param args.amount Amount of tokens to fund the account with\n   * @param args.options Configuration options for waitForTransaction\n   * @returns Transaction hash of the transaction that funded the account\n   */\n  async fundAccount(args: {\n    accountAddress: AccountAddressInput;\n    amount: number;\n    options?: WaitForTransactionOptions;\n  }): Promise<UserTransactionResponse> {\n    const fundTxn = await fundAccount({ aptosConfig: this.config, ...args });\n\n    if (args.options?.waitForIndexer !== false) {\n      await waitForIndexer({ aptosConfig: this.config, minimumLedgerVersion: BigInt(fundTxn.version) });\n    }\n\n    return fundTxn;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/fungible_asset}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * fungible_asset namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport {\n  AnyNumber,\n  GetCurrentFungibleAssetBalancesResponse,\n  GetFungibleAssetActivitiesResponse,\n  GetFungibleAssetMetadataResponse,\n  PaginationArgs,\n  WhereArg,\n} from \"../types\";\nimport { queryIndexer } from \"./general\";\nimport {\n  GetCurrentFungibleAssetBalances,\n  GetFungibleAssetActivities,\n  GetFungibleAssetMetadata,\n} from \"../types/generated/queries\";\nimport {\n  GetCurrentFungibleAssetBalancesQuery,\n  GetFungibleAssetActivitiesQuery,\n  GetFungibleAssetMetadataQuery,\n} from \"../types/generated/operations\";\nimport {\n  CurrentFungibleAssetBalancesBoolExp,\n  FungibleAssetActivitiesBoolExp,\n  FungibleAssetMetadataBoolExp,\n} from \"../types/generated/types\";\nimport { Account, AccountAddress } from \"../core\";\nimport {\n  EntryFunctionABI,\n  InputGenerateTransactionOptions,\n  parseTypeTag,\n  SimpleTransaction,\n  TypeTagAddress,\n  TypeTagU64,\n} from \"../transactions\";\nimport { generateTransaction } from \"./transactionSubmission\";\n\nexport async function getFungibleAssetMetadata(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<FungibleAssetMetadataBoolExp>;\n}): Promise<GetFungibleAssetMetadataResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetFungibleAssetMetadata,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.limit,\n      offset: options?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetFungibleAssetMetadataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getFungibleAssetMetadata\",\n  });\n\n  return data.fungible_asset_metadata;\n}\n\nexport async function getFungibleAssetActivities(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<FungibleAssetActivitiesBoolExp>;\n}): Promise<GetFungibleAssetActivitiesResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetFungibleAssetActivities,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.limit,\n      offset: options?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetFungibleAssetActivitiesQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getFungibleAssetActivities\",\n  });\n\n  return data.fungible_asset_activities;\n}\n\nexport async function getCurrentFungibleAssetBalances(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n}): Promise<GetCurrentFungibleAssetBalancesResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetCurrentFungibleAssetBalances,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.limit,\n      offset: options?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentFungibleAssetBalancesQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCurrentFungibleAssetBalances\",\n  });\n\n  return data.current_fungible_asset_balances;\n}\n\nconst faTransferAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [parseTypeTag(\"0x1::object::Object\"), new TypeTagAddress(), new TypeTagU64()],\n};\n\nexport async function transferFungibleAsset(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  fungibleAssetMetadataAddress: AccountAddress;\n  recipient: AccountAddress;\n  amount: AnyNumber;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, fungibleAssetMetadataAddress, recipient, amount, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::primary_fungible_store::transfer\",\n      typeArguments: [\"0x1::fungible_asset::Metadata\"],\n      functionArguments: [fungibleAssetMetadataAddress, recipient, amount],\n      abi: faTransferAbi,\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnyNumber,\n  GetCurrentFungibleAssetBalancesResponse,\n  GetFungibleAssetActivitiesResponse,\n  GetFungibleAssetMetadataResponse,\n  PaginationArgs,\n  WhereArg,\n} from \"../types\";\nimport {\n  getCurrentFungibleAssetBalances,\n  getFungibleAssetActivities,\n  getFungibleAssetMetadata,\n  transferFungibleAsset,\n} from \"../internal/fungibleAsset\";\nimport {\n  CurrentFungibleAssetBalancesBoolExp,\n  FungibleAssetActivitiesBoolExp,\n  FungibleAssetMetadataBoolExp,\n} from \"../types/generated/types\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { Account, AccountAddress } from \"../core\";\nimport { InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions\";\n\n/**\n * A class to query all `FungibleAsset` related queries on Aptos.\n */\nexport class FungibleAsset {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries all fungible asset metadata.\n   *\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   *\n   * @returns A list of fungible asset metadata\n   */\n  async getFungibleAssetMetadata(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<FungibleAssetMetadataBoolExp>;\n  }): Promise<GetFungibleAssetMetadataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getFungibleAssetMetadata({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a fungible asset metadata\n   *\n   * This query returns the fungible asset metadata for a specific fungible asset.\n   *\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.assetType The asset type of the fungible asset.\n   * e.g\n   * \"0x1::aptos_coin::AptosCoin\" for Aptos Coin\n   * \"0xc2948283c2ce03aafbb294821de7ee684b06116bb378ab614fa2de07a99355a8\" - address format if this is fungible asset\n   *\n   * @returns A fungible asset metadata item\n   */\n  async getFungibleAssetMetadataByAssetType(args: {\n    assetType: string;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetFungibleAssetMetadataResponse[0]> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    const data = await getFungibleAssetMetadata({\n      aptosConfig: this.config,\n      options: {\n        where: {\n          asset_type: { _eq: args.assetType },\n        },\n      },\n    });\n\n    return data[0];\n  }\n\n  /**\n   * Queries all fungible asset activities\n   *\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   *\n   * @returns A list of fungible asset metadata\n   */\n  async getFungibleAssetActivities(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<FungibleAssetActivitiesBoolExp>;\n  }): Promise<GetFungibleAssetActivitiesResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getFungibleAssetActivities({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries all fungible asset balances\n   *\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   *\n   * @returns A list of fungible asset metadata\n   */\n  async getCurrentFungibleAssetBalances(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n  }): Promise<GetCurrentFungibleAssetBalancesResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getCurrentFungibleAssetBalances({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   *  Transfer `amount` of fungible asset from sender's primary store to recipient's primary store.\n   *\n   * Use this method to transfer any fungible asset including fungible token.\n   *\n   * @param sender The sender account\n   * @param fungibleAssetMetadataAddress The fungible asset account address.\n   * For example if you’re transferring USDT this would be the USDT address\n   * @param recipient The recipient account address\n   * @param amount Number of assets to transfer\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain.\n   */\n  async transferFungibleAsset(args: {\n    sender: Account;\n    fungibleAssetMetadataAddress: AccountAddress;\n    recipient: AccountAddress;\n    amount: AnyNumber;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferFungibleAsset({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getBlockByHeight,\n  getBlockByVersion,\n  getChainTopUserTransactions,\n  getIndexerLastSuccessVersion,\n  getLedgerInfo,\n  getProcessorStatus,\n  getTableItem,\n  queryIndexer,\n  view,\n} from \"../internal/general\";\nimport {\n  AnyNumber,\n  Block,\n  GetChainTopUserTransactionsResponse,\n  GetProcessorStatusResponse,\n  GraphqlQuery,\n  LedgerInfo,\n  LedgerVersionArg,\n  MoveValue,\n  TableItemRequest,\n  InputViewRequestData,\n} from \"../types\";\nimport { ProcessorType } from \"../utils/const\";\n\n/**\n * A class to query all `General` Aptos related queries\n */\nexport class General {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Queries for the Aptos ledger info\n   *\n   * @returns Aptos Ledger Info\n   *\n   * @example An example of the returned data\n   * ```\n   * {\n   * \"chain_id\": 4,\n   * \"epoch\": \"8\",\n   * \"ledger_version\": \"714\",\n   * \"oldest_ledger_version\": \"0\",\n   * \"ledger_timestamp\": \"1694695496521775\",\n   * \"node_role\": \"validator\",\n   * \"oldest_block_height\": \"0\",\n   * \"block_height\": \"359\",\n   * \"git_hash\": \"c82193f36f4e185fed9f68c4ad21f6c6dd390c6e\"\n   * }\n   * ```\n   */\n  async getLedgerInfo(): Promise<LedgerInfo> {\n    return getLedgerInfo({ aptosConfig: this.config });\n  }\n\n  /**\n   * Queries for the chain id\n   *\n   * @returns The chain id\n   */\n  async getChainId(): Promise<number> {\n    const result = await this.getLedgerInfo();\n    return result.chain_id;\n  }\n\n  /**\n   * Queries for block by transaction version\n   *\n   * @param args.ledgerVersion Ledger version to lookup block information for\n   * @param args.options.withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block information with optional transactions\n   */\n  async getBlockByVersion(args: {\n    ledgerVersion: AnyNumber;\n    options?: { withTransactions?: boolean };\n  }): Promise<Block> {\n    return getBlockByVersion({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Get block by block height\n   *\n   * @param args.blockHeight Block height to lookup.  Starts at 0\n   * @param args.options.withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block with optional transactions\n   */\n  async getBlockByHeight(args: { blockHeight: AnyNumber; options?: { withTransactions?: boolean } }): Promise<Block> {\n    return getBlockByHeight({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a table item for a table identified by the handle and the key for the item.\n   * Key and value types need to be passed in to help with key serialization and value deserialization.\n   * @param args.handle A pointer to where that table is stored\n   * @param args.data Object that describes table item\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @example https://api.devnet.aptoslabs.com/v1/accounts/0x1/resource/0x1::coin::CoinInfo%3C0x1::aptos_coin::AptosCoin%3E\n   * {\n   *  data.key_type = \"address\" // Move type of table key\n   *  data.value_type = \"u128\" // Move type of table value\n   *  data.key = \"0x619dc29a0aac8fa146714058e8dd6d2d0f3bdf5f6331907bf91f3acd81e6935\" // Value of table key\n   * }\n   *\n   * @returns Table item value rendered in JSON\n   */\n  async getTableItem<T>(args: { handle: string; data: TableItemRequest; options?: LedgerVersionArg }): Promise<T> {\n    return getTableItem<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a Move view function\n   * @param args.payload Payload for the view function\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   * @example\n   * `\n   * const payload: ViewRequest = {\n   *  function: \"0x1::coin::balance\",\n   *  typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *  functionArguments: [accountAddress],\n   * };\n   * `\n   *\n   * @returns an array of Move values\n   */\n  async view<T extends Array<MoveValue>>(args: {\n    payload: InputViewRequestData;\n    options?: LedgerVersionArg;\n  }): Promise<T> {\n    return view<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries top user transactions\n   *\n   * @param args.limit The number of transactions to return\n   * @returns GetChainTopUserTransactionsResponse\n   */\n  async getChainTopUserTransactions(args: { limit: number }): Promise<GetChainTopUserTransactionsResponse> {\n    return getChainTopUserTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * A generic function for retrieving data from Aptos Indexer.\n   * For more detailed queries specification see\n   * {@link https://cloud.hasura.io/public/graphiql?endpoint=https://indexer.mainnet.aptoslabs.com/v1/graphql}\n   *\n   * @param args.query.query A GraphQL query\n   * @param args.query.variables The variables for the query\n   * @example\n   * ```\n   * {\n   *  query: `query MyQuery {\n        ledger_infos {\n          chain_id\n        }\n      }`;\n   * }\n   * ```\n   *\n   * @return The provided T type\n   */\n  async queryIndexer<T extends {}>(args: { query: GraphqlQuery }): Promise<T> {\n    return queryIndexer<T>({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries for the last successful indexer version\n   *\n   * This is useful to tell what ledger version the indexer is updated to, as it can be behind the full nodes.\n   */\n  async getIndexerLastSuccessVersion(): Promise<bigint> {\n    return getIndexerLastSuccessVersion({ aptosConfig: this.config });\n  }\n\n  /**\n   * Query the processor status for a specific processor type.\n   *\n   * @param processorType The processor type to query\n   * @returns\n   */\n  async getProcessorStatus(processorType: ProcessorType): Promise<GetProcessorStatusResponse[0]> {\n    return getProcessorStatus({ aptosConfig: this.config, processorType });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/name}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * name namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { Account, AccountAddress, AccountAddressInput } from \"../core\";\nimport { InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions/types\";\nimport { GetANSNameResponse, MoveAddressType, MoveValue, OrderByArg, PaginationArgs, WhereArg } from \"../types\";\nimport { GetNamesQuery } from \"../types/generated/operations\";\nimport { GetNames } from \"../types/generated/queries\";\nimport { CurrentAptosNamesBoolExp } from \"../types/generated/types\";\nimport { Network } from \"../utils/apiEndpoints\";\nimport { queryIndexer, view } from \"./general\";\nimport { generateTransaction } from \"./transactionSubmission\";\n\nexport const VALIDATION_RULES_DESCRIPTION = [\n  \"A name must be between 3 and 63 characters long,\",\n  \"and can only contain lowercase a-z, 0-9, and hyphens.\",\n  \"A name may not start or end with a hyphen.\",\n].join(\" \");\n\n/**\n *\n * @param fragment A fragment of a name, either the domain or subdomain\n * @returns boolean indicating if the fragment is a valid fragment\n */\nexport function isValidANSSegment(fragment: string): boolean {\n  if (!fragment) return false;\n  if (fragment.length < 3) return false;\n  if (fragment.length > 63) return false;\n  // only lowercase a-z and 0-9 are allowed, along with -. a domain may not start or end with a hyphen\n  if (!/^[a-z\\d][a-z\\d-]{1,61}[a-z\\d]$/.test(fragment)) return false;\n  return true;\n}\n\n/**\n * Checks if an ANS name is valid or not\n *\n * @param name A string of the domain name, can include or exclude the .apt suffix\n */\nexport function isValidANSName(name: string): { domainName: string; subdomainName?: string } {\n  const [first, second, ...rest] = name.replace(/\\.apt$/, \"\").split(\".\");\n\n  if (rest.length > 0) {\n    throw new Error(`${name} is invalid. A name can only have two parts, a domain and a subdomain separated by a \".\"`);\n  }\n\n  if (!isValidANSSegment(first)) {\n    throw new Error(`${first} is not valid. ${VALIDATION_RULES_DESCRIPTION}`);\n  }\n\n  if (second && !isValidANSSegment(second)) {\n    throw new Error(`${second} is not valid. ${VALIDATION_RULES_DESCRIPTION}`);\n  }\n\n  return {\n    domainName: second || first,\n    subdomainName: second ? first : undefined,\n  };\n}\n\nexport const LOCAL_ANS_ACCOUNT_PK =\n  process.env.ANS_TEST_ACCOUNT_PRIVATE_KEY ?? \"0x37368b46ce665362562c6d1d4ec01a08c8644c488690df5a17e13ba163e20221\";\nexport const LOCAL_ANS_ACCOUNT_ADDRESS =\n  process.env.ANS_TEST_ACCOUNT_ADDRESS ?? \"0x585fc9f0f0c54183b039ffc770ca282ebd87307916c215a3e692f2f8e4305e82\";\n\nconst NetworkToAnsContract: Record<Network, string | null> = {\n  [Network.TESTNET]: \"0x5f8fd2347449685cf41d4db97926ec3a096eaf381332be4f1318ad4d16a8497c\",\n  [Network.MAINNET]: \"0x867ed1f6bf916171b1de3ee92849b8978b7d1b9e0a8cc982a3d19d535dfd9c0c\",\n  [Network.LOCAL]: LOCAL_ANS_ACCOUNT_ADDRESS,\n  [Network.CUSTOM]: null,\n  [Network.DEVNET]: null,\n  [Network.RANDOMNET]: null,\n};\n\nfunction getRouterAddress(aptosConfig: AptosConfig): string {\n  const address = NetworkToAnsContract[aptosConfig.network];\n  if (!address) throw new Error(`The ANS contract is not deployed to ${aptosConfig.network}`);\n  return address;\n}\n\nconst Some = <T>(value: T): MoveValue => ({ vec: [value] });\nconst None = (): MoveValue => ({ vec: [] });\n// != here is intentional, we want to check for null and undefined\n// eslint-disable-next-line eqeqeq\nconst Option = <T>(value: T | undefined | null): MoveValue => (value != undefined ? Some(value) : None());\n\nconst unwrapOption = <T>(option: any): T | undefined => {\n  if (!!option && typeof option === \"object\" && \"vec\" in option && Array.isArray(option.vec)) {\n    return option.vec[0];\n  }\n\n  return undefined;\n};\n\nexport async function getOwnerAddress(args: { aptosConfig: AptosConfig; name: string }): Promise<string | undefined> {\n  const { aptosConfig, name } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const res = await view({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::router::get_owner_addr`,\n      functionArguments: [domainName, Option(subdomainName)],\n    },\n  });\n\n  const owner = unwrapOption<MoveAddressType>(res[0]);\n\n  return owner ? AccountAddress.from(owner).toString() : undefined;\n}\n\nexport interface RegisterNameParameters {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name: string;\n  expiration:\n    | { policy: \"domain\"; years?: 1 }\n    | { policy: \"subdomain:follow-domain\" }\n    | { policy: \"subdomain:independent\"; expirationDate: number };\n  transferable?: boolean;\n  toAddress?: AccountAddressInput;\n  targetAddress?: AccountAddressInput;\n  options?: InputGenerateTransactionOptions;\n}\n\nexport async function registerName(args: RegisterNameParameters): Promise<SimpleTransaction> {\n  const { aptosConfig, expiration, name, sender, targetAddress, toAddress, options, transferable } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const hasSubdomainPolicy =\n    expiration.policy === \"subdomain:independent\" || expiration.policy === \"subdomain:follow-domain\";\n\n  if (subdomainName && !hasSubdomainPolicy) {\n    throw new Error(\n      \"Subdomains must have an expiration policy of either 'subdomain:independent' or 'subdomain:follow-domain'\",\n    );\n  }\n\n  if (hasSubdomainPolicy && !subdomainName) {\n    throw new Error(`Policy is set to ${expiration.policy} but no subdomain was provided`);\n  }\n\n  if (expiration.policy === \"domain\") {\n    const years = expiration.years ?? 1;\n    if (years !== 1) {\n      throw new Error(\"For now, names can only be registered for 1 year at a time\");\n    }\n\n    const secondsInYear = 31536000;\n    const registrationDuration = years * secondsInYear;\n\n    const transaction = await generateTransaction({\n      aptosConfig,\n      sender: sender.accountAddress.toString(),\n      data: {\n        function: `${routerAddress}::router::register_domain`,\n        functionArguments: [domainName, registrationDuration, targetAddress, toAddress],\n      },\n      options,\n    });\n\n    return transaction;\n  }\n\n  // We are a subdomain\n  if (!subdomainName) {\n    throw new Error(`${expiration.policy} requires a subdomain to be provided.`);\n  }\n\n  const tldExpiration = await getExpiration({ aptosConfig, name: domainName });\n  if (!tldExpiration) {\n    throw new Error(\"The domain does not exist\");\n  }\n\n  const expirationDateInMillisecondsSinceEpoch =\n    expiration.policy === \"subdomain:independent\" ? expiration.expirationDate : tldExpiration;\n\n  if (expirationDateInMillisecondsSinceEpoch > tldExpiration) {\n    throw new Error(\"The subdomain expiration time cannot be greater than the domain expiration time\");\n  }\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::register_subdomain`,\n      functionArguments: [\n        domainName,\n        subdomainName,\n        Math.round(expirationDateInMillisecondsSinceEpoch / 1000),\n        expiration.policy === \"subdomain:follow-domain\" ? 1 : 0,\n        !!transferable,\n        targetAddress,\n        toAddress,\n      ],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\nexport async function getExpiration(args: { aptosConfig: AptosConfig; name: string }): Promise<number | undefined> {\n  const { aptosConfig, name } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  try {\n    const res = await view({\n      aptosConfig,\n      payload: {\n        function: `${routerAddress}::router::get_expiration`,\n        functionArguments: [domainName, Option(subdomainName)],\n      },\n    });\n\n    // Normalize expiration time from epoch seconds to epoch milliseconds\n    return Number(res[0]) * 1000;\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport async function getPrimaryName(args: {\n  aptosConfig: AptosConfig;\n  address: AccountAddressInput;\n}): Promise<string | undefined> {\n  const { aptosConfig, address } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n\n  const res = await view({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::router::get_primary_name`,\n      functionArguments: [AccountAddress.from(address).toString()],\n    },\n  });\n\n  const domainName = unwrapOption<MoveAddressType>(res[1]);\n  const subdomainName = unwrapOption<MoveAddressType>(res[0]);\n\n  if (!domainName) return undefined;\n\n  return [subdomainName, domainName].filter(Boolean).join(\".\");\n}\n\nexport async function setPrimaryName(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name?: string;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, name, options } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n\n  if (!name) {\n    const transaction = await generateTransaction({\n      aptosConfig,\n      sender: sender.accountAddress.toString(),\n      data: {\n        function: `${routerAddress}::router::clear_primary_name`,\n        functionArguments: [],\n      },\n      options,\n    });\n\n    return transaction;\n  }\n\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::set_primary_name`,\n      functionArguments: [domainName, subdomainName],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\nexport async function getTargetAddress(args: {\n  aptosConfig: AptosConfig;\n  name: string;\n}): Promise<MoveAddressType | undefined> {\n  const { aptosConfig, name } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const res = await view({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::router::get_target_addr`,\n      functionArguments: [domainName, Option(subdomainName)],\n    },\n  });\n\n  const target = unwrapOption<MoveAddressType>(res[0]);\n  return target ? AccountAddress.from(target).toString() : undefined;\n}\n\nexport async function setTargetAddress(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name: string;\n  address: AccountAddressInput;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, name, address, options } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::set_target_addr`,\n      functionArguments: [domainName, subdomainName, address],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\nexport async function getName(args: {\n  aptosConfig: AptosConfig;\n  name: string;\n}): Promise<GetANSNameResponse[0] | undefined> {\n  const { aptosConfig, name } = args;\n  const { domainName, subdomainName = \"\" } = isValidANSName(name);\n\n  const where: CurrentAptosNamesBoolExp = {\n    domain: { _eq: domainName },\n    subdomain: { _eq: subdomainName },\n  };\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    query: {\n      query: GetNames,\n      variables: {\n        where_condition: where,\n        limit: 1,\n      },\n    },\n    originMethod: \"getName\",\n  });\n\n  // Convert the expiration_timestamp from an ISO string to milliseconds since epoch\n  let res = data.current_aptos_names[0];\n  if (res) {\n    res = sanitizeANSName(res);\n  }\n\n  return res;\n}\n\ninterface QueryNamesOptions {\n  options?: PaginationArgs & OrderByArg<GetANSNameResponse[0]> & WhereArg<CurrentAptosNamesBoolExp>;\n}\n\nexport interface GetAccountNamesArgs extends QueryNamesOptions {\n  accountAddress: AccountAddressInput;\n}\n\nexport async function getAccountNames(\n  args: { aptosConfig: AptosConfig } & GetAccountNamesArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, accountAddress } = args;\n\n  const expirationDate = await getANSExpirationDate({ aptosConfig });\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getAccountNames\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          owner_address: { _eq: accountAddress.toString() },\n          expiration_timestamp: { _gte: expirationDate },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\nexport interface GetAccountDomainsArgs extends QueryNamesOptions {\n  accountAddress: AccountAddressInput;\n}\n\nexport async function getAccountDomains(\n  args: { aptosConfig: AptosConfig } & GetAccountDomainsArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, accountAddress } = args;\n\n  const expirationDate = await getANSExpirationDate({ aptosConfig });\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getAccountDomains\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          owner_address: { _eq: accountAddress.toString() },\n          expiration_timestamp: { _gte: expirationDate },\n          subdomain: { _eq: \"\" },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\nexport interface GetAccountSubdomainsArgs extends QueryNamesOptions {\n  accountAddress: AccountAddressInput;\n}\n\nexport async function getAccountSubdomains(\n  args: { aptosConfig: AptosConfig } & GetAccountSubdomainsArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, accountAddress } = args;\n\n  const expirationDate = await getANSExpirationDate({ aptosConfig });\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getAccountSubdomains\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          owner_address: { _eq: accountAddress.toString() },\n          expiration_timestamp: { _gte: expirationDate },\n          subdomain: { _neq: \"\" },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\nexport interface GetDomainSubdomainsArgs extends QueryNamesOptions {\n  domain: string;\n}\n\nexport async function getDomainSubdomains(\n  args: { aptosConfig: AptosConfig } & GetDomainSubdomainsArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, domain } = args;\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getDomainSubdomains\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          domain: { _eq: domain },\n          subdomain: { _neq: \"\" },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\n/**\n * This function returns the expiration date in which a name is fully expired as\n * defined by the contract.  The grace period allows for names to be past\n * expiration for a certain amount of time before they are released to the\n * public. The names will not function as normal, but the owner can renew\n * without others taking ownership of the name. At the time of writing, the\n * contract specified 30 days.\n *\n * @param args.aptosConfig an AptosConfig object\n * @returns\n */\nasync function getANSExpirationDate(args: { aptosConfig: AptosConfig }): Promise<string> {\n  const { aptosConfig } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n\n  const [gracePeriodInSeconds] = await view<[number]>({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::config::reregistration_grace_sec`,\n      functionArguments: [],\n    },\n  });\n\n  const gracePeriodInDays = gracePeriodInSeconds / 60 / 60 / 24;\n  const now = () => new Date();\n  return new Date(now().setDate(now().getDate() - gracePeriodInDays)).toISOString();\n}\n\nexport async function renewDomain(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name: string;\n  years?: 1;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, name, years = 1, options } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const renewalDuration = years * 31536000;\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  if (subdomainName) {\n    throw new Error(\"Subdomains cannot be renewed\");\n  }\n\n  if (years !== 1) {\n    throw new Error(\"Currently, only 1 year renewals are supported\");\n  }\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::renew_domain`,\n      functionArguments: [domainName, renewalDuration],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\n/**\n * The indexer returns ISO strings for expiration, however the contract works in\n * epoch milliseconds. This function converts the ISO string to epoch\n * milliseconds. In the future, if other properties need sanitization, this can\n * be extended.\n */\nfunction sanitizeANSName(name: GetANSNameResponse[0]): GetANSNameResponse[0] {\n  return {\n    ...name,\n    expiration_timestamp: new Date(name.expiration_timestamp).valueOf(),\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account, AccountAddressInput } from \"../core\";\nimport {\n  RegisterNameParameters,\n  getExpiration,\n  getOwnerAddress,\n  registerName,\n  getPrimaryName,\n  setPrimaryName,\n  getTargetAddress,\n  setTargetAddress,\n  renewDomain,\n  getName,\n  getAccountDomains,\n  GetAccountDomainsArgs,\n  GetAccountSubdomainsArgs,\n  getAccountSubdomains,\n  getAccountNames,\n  GetAccountNamesArgs,\n  getDomainSubdomains,\n  GetDomainSubdomainsArgs,\n} from \"../internal/ans\";\nimport { GetANSNameResponse, MoveAddressType } from \"../types\";\nimport { InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions/types\";\nimport { AptosConfig } from \"./aptosConfig\";\n\n/**\n * A class to handle all `ANS` operations\n */\nexport class ANS {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Retrieve the owner address of a domain name or subdomain name from the contract.\n   *\n   * ```ts\n   * // Will return the owner address of \"test.aptos.apt\" or undefined\n   * const owner = await aptos.getOwnerAddress({name: \"test.aptos\"})\n   * // owner = 0x123...\n   * ```\n   *\n   * @param args.name - A string of the name to retrieve\n   *\n   * @returns MoveAddressType if the name is owned, undefined otherwise\n   */\n  async getOwnerAddress(args: { name: string }): Promise<MoveAddressType | undefined> {\n    return getOwnerAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve the expiration time of a domain name or subdomain name from the contract.\n   *\n   * ```ts\n   * // Will return the expiration of \"test.aptos.apt\" or undefined\n   * const exp = await aptos.getExpiration({name: \"test.aptos\"})\n   * // new Date(exp) would give you the date in question: 2021-01-01T00:00:00.000Z\n   * ```\n   *\n   * @param args.name - A string of the name to retrieve\n   *\n   * @returns number as a unix timestamp in milliseconds.\n   */\n  async getExpiration(args: { name: string }): Promise<number | undefined> {\n    return getExpiration({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve the target address of a domain or subdomain name. This is the\n   * address the name points to for use on chain. Note, the target address can\n   * point to addresses that are not the owner of the name\n   *\n   * ```ts\n   * const targetAddr = await aptos.getTargetAddress({name: \"test.aptos\"})\n   * // targetAddr = 0x123...\n   * ```\n   *\n   * @param args.name - A string of the name: primary, primary.apt, secondary.primary, secondary.primary.apt, etc.\n   *\n   * @returns MoveAddressType if the name has a target, undefined otherwise\n   */\n  async getTargetAddress(args: { name: string }): Promise<MoveAddressType | undefined> {\n    return getTargetAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sets the target address of a domain or subdomain name. This is the\n   * address the name points to for use on chain. Note, the target address can\n   * point to addresses that are not the owner of the name\n   *\n   * ```ts\n   * await aptos.setTargetAddress({sender: alice, name: \"test.aptos\", address: bob.accountAddress})\n   * const address = await aptos.getTargetAddress({name: \"test.aptos\"})\n   * // address = bob.accountAddress\n   * ```\n   *\n   * @param args.name - A string of the name: test.aptos.apt, test.apt, test, test.aptos, etc.\n   * @param args.address - A AccountAddressInput of the address to set the domain or subdomain to\n   *\n   * @returns SimpleTransaction\n   */\n  async setTargetAddress(args: {\n    sender: Account;\n    name: string;\n    address: AccountAddressInput;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return setTargetAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve the primary name for an account. An account can have\n   * multiple names that target it, but only a single name that is primary. An\n   * account also may not have a primary name.\n   *\n   * ```ts\n   * const name = await aptos.getPrimaryName({address: alice.accountAddress})\n   * // name = test.aptos\n   * ```\n   *\n   * @param args.address - A AccountAddressInput (address) of the account\n   *\n   * @returns a string if the account has a primary name, undefined otherwise\n   */\n  async getPrimaryName(args: { address: AccountAddressInput }): Promise<string | undefined> {\n    return getPrimaryName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sets the primary name for the sender. An account can have\n   * multiple names that target it, but only a single name that is primary. An\n   * account also may not have a primary name.\n   *\n   * ```ts\n   * await aptos.setPrimaryName({sender: alice, name: \"test.aptos\"})\n   * const primaryName = await aptos.getPrimaryName({address: alice.accountAddress})\n   * // primaryName = test.aptos\n   * ```\n   *\n   * @param args.sender - The sender account\n   * @param args.name - A string of the name: test, test.apt, test.aptos, test.aptos.apt, etc.\n   *\n   * @returns SimpleTransaction\n   */\n  async setPrimaryName(args: {\n    sender: Account;\n    name?: string;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return setPrimaryName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Registers a new name\n   *\n   * ```ts\n   * // An example of registering a subdomain name assuming def.apt is already registered\n   * // and belongs to the sender alice.\n   *  const txn = aptos.registerName({\n   *    sender: alice,\n   *    name: \"test.aptos.apt\",\n   *    expiration: {\n   *      policy: \"subdomain:independent\",\n   *      expirationDate: Date.now() + 30 * 24 * 60 * 60 * 1000,\n   *    },\n   *  });\n   * ```\n   *\n   * @param args.sender - The sender account\n   * @param args.name - A string of the name to register. This can be inclusive or exclusive of the .apt suffix.\n   * Examples include: \"test\", \"test.apt\", \"test.aptos.apt\", etc.\n   * @param args.expiration  - An object with the expiration policy of the name.\n   * @param args.expiration.policy - 'domain' | 'subdomain:follow-domain' | 'subdomain:independent'\n   * - domain: Years is required and the name will expire after the given number of years.\n   * - subdomain:follow-domain: The name will expire at the same time as the domain name.\n   * - subdomain:independent: The name will expire at the given date.\n   * @param args.expiration.expirationDate - An epoch number in milliseconds of\n   * the date when the subdomain will expire. Only applicable when the policy is\n   * set to 'subdomain:independent'.\n   * @param args.transferable  - Determines if the subdomain being minted is soul-bound. Applicable only to subdomains.\n   * @param args.targetAddress optional - The address the domain name will resolve to. If not provided,\n   * the sender's address will be used.\n   * @param args.toAddress optional - The address to send the domain name to. If not provided,\n   * the transaction will be sent to the router.\n   *\n   * @returns SimpleTransaction\n   */\n  async registerName(args: Omit<RegisterNameParameters, \"aptosConfig\">): Promise<SimpleTransaction> {\n    return registerName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Renews a domain name\n   *\n   * Note: If a domain name was minted with V1 of the contract, it will automatically be upgraded to V2 via this transaction.\n   *\n   * ```ts\n   * await aptos.renewDomain({sender: alice, name: \"test\"})\n   * // test.apt will be renewed for one year\n   * ```\n   *\n   * @param args.sender - The sender account\n   * @param args.name - A string of the domain the subdomain will be under. The signer must be the domain owner.\n   * Subdomains cannot be renewed.\n   * @param args.years - The number of years to renew the name. Currently only one year is permitted.\n   *\n   * @returns SimpleTransaction\n   */\n  async renewDomain(args: {\n    sender: Account;\n    name: string;\n    years?: 1;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return renewDomain({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches a single name from the indexer\n   * @param args.name - A string of the name to retrieve, e.g. \"test.aptos.apt\"\n   * or \"test.apt\" or \"test\". Can be inclusive or exclusive of the .apt suffix.\n   * Can be a subdomain.\n   *\n   * @returns A promise of an ANSName or undefined\n   */\n  async getName(args: { name: string }): Promise<GetANSNameResponse[0] | undefined> {\n    return getName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all  names for an account (both top level domains and subdomains)\n   *\n   * @param args\n   * @param args.accountAddress - A AccountAddressInput of the address to retrieve names for.\n   * @param args.options.offset - Optional, the offset to start from when fetching names\n   * @param args.options.limit - Optional, A number of the names to fetch per request\n   * @param args.options.orderBy - The order to sort the names by\n   * @param args.options.where - Additional filters to apply to the query\n   *\n   * @returns a promise of an array of ANSName\n   */\n  async getAccountNames(args: GetAccountNamesArgs): Promise<GetANSNameResponse> {\n    return getAccountNames({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all top level domain names for an account\n   *\n   * @param args\n   * @param args.accountAddress - A AccountAddressInput of the address to retrieve domain names for.\n   * @param args.options.offset - Optional, the offset to start from when fetching names\n   * @param args.options.limit - Optional, A number of the names to fetch per request\n   * @param args.options.orderBy - The order to sort the names by\n   * @param args.options.where - Additional filters to apply to the query\n   *\n   * @returns a promise of an array of ANSName\n   */\n  async getAccountDomains(args: GetAccountDomainsArgs): Promise<GetANSNameResponse> {\n    return getAccountDomains({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all subdomains names for an account\n   *\n   * @param args\n   * @param args.accountAddress - A AccountAddressInput of the address to retrieve subdomains names for.\n   * @param args.options.offset - Optional, the offset to start from when fetching names\n   * @param args.options.limit - Optional, A number of the names to fetch per request\n   * @param args.options.orderBy - The order to sort the names by\n   * @param args.options.where - Additional filters to apply to the query\n   *\n   * @returns a promise of an array of ANSName\n   */\n  async getAccountSubdomains(args: GetAccountSubdomainsArgs): Promise<GetANSNameResponse> {\n    return getAccountSubdomains({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all subdomains names for a given domain. Note, this will not return the domain itself.\n   *\n   * @param args\n   * @param args.domain - A string of the domain name: eg. \"test.apt\" or \"test\" (without the suffix of .apt)\n   * @param args.options.offset - Optional, the offset to start from when fetching names\n   * @param args.options.limit - Optional, A number of the names to fetch per request\n   * @param args.options.orderBy - The order to sort the names by\n   * @param args.options.where - Additional filters to apply to the query\n   *\n   * @returns a promise of an array of ANSName\n   */\n  async getDomainSubdomains(args: GetDomainSubdomainsArgs): Promise<GetANSNameResponse> {\n    return getDomainSubdomains({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/staking}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * faucet namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { GetDelegatedStakingActivitiesResponse, GetNumberOfDelegatorsResponse, OrderByArg } from \"../types\";\nimport { GetDelegatedStakingActivitiesQuery, GetNumberOfDelegatorsQuery } from \"../types/generated/operations\";\nimport { GetDelegatedStakingActivities, GetNumberOfDelegators } from \"../types/generated/queries\";\nimport { queryIndexer } from \"./general\";\n\nexport async function getNumberOfDelegators(args: {\n  aptosConfig: AptosConfig;\n  poolAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, poolAddress } = args;\n  const address = AccountAddress.from(poolAddress).toStringLong();\n  const query = {\n    query: GetNumberOfDelegators,\n    variables: { where_condition: { pool_address: { _eq: address } } },\n  };\n  const data = await queryIndexer<GetNumberOfDelegatorsQuery>({ aptosConfig, query });\n\n  // commonjs (aka cjs) doesnt handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data.num_active_delegator_per_pool[0] ? data.num_active_delegator_per_pool[0].num_active_delegator : 0;\n}\n\nexport async function getNumberOfDelegatorsForAllPools(args: {\n  aptosConfig: AptosConfig;\n  options?: OrderByArg<GetNumberOfDelegatorsResponse[0]>;\n}): Promise<GetNumberOfDelegatorsResponse> {\n  const { aptosConfig, options } = args;\n  const query = {\n    query: GetNumberOfDelegators,\n    variables: { order_by: options?.orderBy },\n  };\n  const data = await queryIndexer<GetNumberOfDelegatorsQuery>({\n    aptosConfig,\n    query,\n  });\n  return data.num_active_delegator_per_pool;\n}\n\nexport async function getDelegatedStakingActivities(args: {\n  aptosConfig: AptosConfig;\n  delegatorAddress: AccountAddressInput;\n  poolAddress: AccountAddressInput;\n}): Promise<GetDelegatedStakingActivitiesResponse> {\n  const { aptosConfig, delegatorAddress, poolAddress } = args;\n  const query = {\n    query: GetDelegatedStakingActivities,\n    variables: {\n      delegatorAddress: AccountAddress.from(delegatorAddress).toStringLong(),\n      poolAddress: AccountAddress.from(poolAddress).toStringLong(),\n    },\n  };\n  const data = await queryIndexer<GetDelegatedStakingActivitiesQuery>({ aptosConfig, query });\n  return data.delegated_staking_activities;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  getDelegatedStakingActivities,\n  getNumberOfDelegators,\n  getNumberOfDelegatorsForAllPools,\n} from \"../internal/staking\";\nimport { AnyNumber, GetDelegatedStakingActivitiesResponse, GetNumberOfDelegatorsResponse, OrderByArg } from \"../types\";\nimport { AccountAddressInput } from \"../core\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\n\n/**\n * A class to query all `Staking` related queries on Aptos.\n */\nexport class Staking {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries current number of delegators in a pool.  Throws an error if the pool is not found.\n   *\n   * @param args.poolAddress Pool address\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns The number of delegators for the given pool\n   */\n  async getNumberOfDelegators(args: {\n    poolAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.STAKE_PROCESSOR,\n    });\n    return getNumberOfDelegators({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries current number of delegators in a pool.  Throws an error if the pool is not found.\n   *\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns GetNumberOfDelegatorsForAllPoolsResponse response type\n   */\n  async getNumberOfDelegatorsForAllPools(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: OrderByArg<GetNumberOfDelegatorsResponse[0]>;\n  }): Promise<GetNumberOfDelegatorsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.STAKE_PROCESSOR,\n    });\n    return getNumberOfDelegatorsForAllPools({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries delegated staking activities\n   *\n   * @param args.delegatorAddress Delegator address\n   * @param args.poolAddress Pool address\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns GetDelegatedStakingActivitiesResponse response type\n   */\n  async getDelegatedStakingActivities(args: {\n    delegatorAddress: AccountAddressInput;\n    poolAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetDelegatedStakingActivitiesResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.STAKE_PROCESSOR,\n    });\n    return getDelegatedStakingActivities({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddressInput } from \"../../core\";\nimport { generateTransaction } from \"../../internal/transactionSubmission\";\nimport {\n  InputGenerateTransactionPayloadData,\n  InputGenerateTransactionOptions,\n  SimpleTransaction,\n  MultiAgentTransaction,\n} from \"../../transactions\";\nimport { AptosConfig } from \"../aptosConfig\";\n\n/**\n * A class to handle all `Build` transaction operations\n */\nexport class Build {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Build a simple transaction\n   *\n   * @param args.sender The sender account address\n   * @param args.data The transaction data\n   * @param args.options optional. Optional transaction configurations\n   * @param args.withFeePayer optional. Whether there is a fee payer for the transaction\n   *\n   * @returns SimpleTransaction\n   */\n  async simple(args: {\n    sender: AccountAddressInput;\n    data: InputGenerateTransactionPayloadData;\n    options?: InputGenerateTransactionOptions;\n    withFeePayer?: boolean;\n  }): Promise<SimpleTransaction> {\n    return generateTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Build a multi agent transaction\n   *\n   * @param args.sender The sender account address\n   * @param args.data The transaction data\n   * @param args.secondarySignerAddresses An array of the secondary signers account addresses\n   * @param args.options optional. Optional transaction configurations\n   * @param args.withFeePayer optional. Whether there is a fee payer for the transaction\n   *\n   * @returns MultiAgentTransaction\n   */\n  async multiAgent(args: {\n    sender: AccountAddressInput;\n    data: InputGenerateTransactionPayloadData;\n    secondarySignerAddresses: AccountAddressInput[];\n    options?: InputGenerateTransactionOptions;\n    withFeePayer?: boolean;\n  }): Promise<MultiAgentTransaction> {\n    return generateTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","export function ValidateFeePayerDataOnSubmission(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  /* eslint-disable-next-line func-names, no-param-reassign */\n  descriptor.value = async function (...args: any[]) {\n    const [methodArgs] = args;\n\n    if (methodArgs.transaction.feePayerAddress && !methodArgs.feePayerAuthenticator) {\n      throw new Error(\"You are submitting a Fee Payer transaction but missing the feePayerAuthenticator\");\n    }\n\n    return originalMethod.apply(this, args);\n  };\n\n  return descriptor;\n}\n\nexport function ValidateFeePayerDataOnSimulation(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  /* eslint-disable-next-line func-names, no-param-reassign */\n  descriptor.value = async function (...args: any[]) {\n    const [methodArgs] = args;\n\n    if (methodArgs.transaction.feePayerAddress && !methodArgs.feePayerPublicKey) {\n      throw new Error(\"You are simulating a Fee Payer transaction but missing the feePayerPublicKey\");\n    }\n\n    return originalMethod.apply(this, args);\n  };\n\n  return descriptor;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { PublicKey } from \"../../core\";\nimport { simulateTransaction } from \"../../internal/transactionSubmission\";\nimport { AnyRawTransaction, InputSimulateTransactionOptions } from \"../../transactions\";\nimport { UserTransactionResponse } from \"../../types\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { ValidateFeePayerDataOnSimulation } from \"./helpers\";\n\n/**\n * A class to handle all `Simulate` transaction operations\n */\nexport class Simulate {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Simulate a simple transaction\n   *\n   * @param args.signerPublicKey The signer public key\n   * @param args.transaction An instance of a raw transaction\n   * @param args.options optional. Optional transaction configurations\n   * @param args.feePayerPublicKey optional. The fee payer public key if it is a fee payer transaction\n   *\n   * @returns Array<UserTransactionResponse>\n   */\n  @ValidateFeePayerDataOnSimulation\n  async simple(args: {\n    signerPublicKey: PublicKey;\n    transaction: AnyRawTransaction;\n    feePayerPublicKey?: PublicKey;\n    options?: InputSimulateTransactionOptions;\n  }): Promise<Array<UserTransactionResponse>> {\n    return simulateTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Simulate a multi agent transaction\n   *\n   * @param args.signerPublicKey The signer public key\n   * @param args.transaction An instance of a raw transaction\n   * @param args.secondarySignersPublicKeys An array of the secondary signers public keys\n   * @param args.options optional. Optional transaction configurations\n   * @param args.feePayerPublicKey optional. The fee payer public key if it is a fee payer transaction\n   *\n   * @returns Array<UserTransactionResponse>\n   */\n  @ValidateFeePayerDataOnSimulation\n  async multiAgent(args: {\n    signerPublicKey: PublicKey;\n    transaction: AnyRawTransaction;\n    secondarySignersPublicKeys: Array<PublicKey>;\n    feePayerPublicKey?: PublicKey;\n    options?: InputSimulateTransactionOptions;\n  }): Promise<Array<UserTransactionResponse>> {\n    return simulateTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { submitTransaction } from \"../../internal/transactionSubmission\";\nimport { AccountAuthenticator, AnyRawTransaction } from \"../../transactions\";\nimport { PendingTransactionResponse } from \"../../types\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { ValidateFeePayerDataOnSubmission } from \"./helpers\";\n\n/**\n * A class to handle all `Submit` transaction operations\n */\nexport class Submit {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Submit a simple transaction\n   *\n   * @param args.transaction An instance of a raw transaction\n   * @param args.senderAuthenticator optional. The sender account authenticator\n   * @param args.feePayerAuthenticator optional. The fee payer account authenticator if it is a fee payer transaction\n   *\n   * @returns PendingTransactionResponse\n   */\n  @ValidateFeePayerDataOnSubmission\n  async simple(args: {\n    transaction: AnyRawTransaction;\n    senderAuthenticator: AccountAuthenticator;\n    feePayerAuthenticator?: AccountAuthenticator;\n  }): Promise<PendingTransactionResponse> {\n    return submitTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Submit a multi agent transaction\n   *\n   * @param args.transaction An instance of a raw transaction\n   * @param args.senderAuthenticator optional. The sender account authenticator\n   * @param args.additionalSignersAuthenticators An array of the secondary signers account authenticators\n   * @param args.feePayerAuthenticator optional. The fee payer account authenticator if it is a fee payer transaction\n   *\n   * @returns PendingTransactionResponse\n   */\n  @ValidateFeePayerDataOnSubmission\n  async multiAgent(args: {\n    transaction: AnyRawTransaction;\n    senderAuthenticator: AccountAuthenticator;\n    additionalSignersAuthenticators: Array<AccountAuthenticator>;\n    feePayerAuthenticator?: AccountAuthenticator;\n  }): Promise<PendingTransactionResponse> {\n    return submitTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","import EventEmitter from \"eventemitter3\";\nimport { TransactionWorkerEvents, TransactionWorker, TransactionWorkerEventsEnum } from \"../../transactions/management\";\nimport { InputGenerateTransactionPayloadData, InputGenerateTransactionOptions } from \"../../transactions\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { Account } from \"../../core\";\n\nexport class TransactionManagement extends EventEmitter<TransactionWorkerEvents> {\n  account!: Account;\n\n  transactionWorker!: TransactionWorker;\n\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    super();\n    this.config = config;\n  }\n\n  /**\n   * Internal function to start the transaction worker and\n   * listen to worker events\n   *\n   * @param args.sender The sender account to sign and submit the transaction\n   */\n  private start(args: { sender: Account }): void {\n    const { sender } = args;\n    this.account = sender;\n    this.transactionWorker = new TransactionWorker(this.config, sender);\n\n    this.transactionWorker.start();\n    this.registerToEvents();\n  }\n\n  /**\n   * Internal function to push transaction data to the transaction worker.\n   *\n   * @param args.data An array of transaction payloads\n   * @param args.options optional. Transaction generation configurations (excluding accountSequenceNumber)\n   *\n   * TODO - make this public once worker supports adding transactions to existing queue\n   */\n  private push(args: {\n    data: InputGenerateTransactionPayloadData[];\n    options?: Omit<InputGenerateTransactionOptions, \"accountSequenceNumber\">;\n  }): void {\n    const { data, options } = args;\n\n    for (const d of data) {\n      this.transactionWorker.push(d, options);\n    }\n  }\n\n  /**\n   * Internal function to start listening to transaction worker events\n   *\n   * TODO - should we ask events to listen to as an input?\n   */\n  private registerToEvents() {\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionSent, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionSent, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionSendFailed, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionSendFailed, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionExecuted, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionExecuted, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionExecutionFailed, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionExecutionFailed, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.ExecutionFinish, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.ExecutionFinish, data);\n    });\n  }\n\n  /**\n   * Send batch transactions for a single account.\n   *\n   * This function uses a transaction worker that receives payloads to be processed\n   * and submitted to chain.\n   * Note that this process is best for submitting multiple transactions that\n   * dont rely on each other, i.e batch funds, batch token mints, etc.\n   *\n   * If any worker failure, the functions throws an error.\n   *\n   * @param args.sender The sender account to sign and submit the transaction\n   * @param args.data An array of transaction payloads\n   * @param args.options optional. Transaction generation configurations (excluding accountSequenceNumber)\n   *\n   * @return void. Throws if any error\n   */\n  forSingleAccount(args: {\n    sender: Account;\n    data: InputGenerateTransactionPayloadData[];\n    options?: Omit<InputGenerateTransactionOptions, \"accountSequenceNumber\">;\n  }): void {\n    try {\n      const { sender, data, options } = args;\n      this.start({ sender });\n\n      this.push({ data, options });\n    } catch (error: any) {\n      throw new Error(`failed to submit transactions with error: ${error}`);\n    }\n  }\n}\n","/**\n * A wrapper that handles and manages an account sequence number.\n *\n * Submit up to `maximumInFlight` transactions per account in parallel with a timeout of `sleepTime`\n * If local assumes `maximumInFlight` are in flight, determine the actual committed state from the network\n * If there are less than `maximumInFlight` due to some being committed, adjust the window\n * If `maximumInFlight` are in flight, wait `sleepTime` seconds before re-evaluating\n * If ever waiting more than `maxWaitTime` restart the sequence number to the current on-chain state\n *\n * Assumptions:\n * Accounts are expected to be managed by a single AccountSequenceNumber and not used otherwise.\n * They are initialized to the current on-chain state, so if there are already transactions in\n * flight, they may take some time to reset.\n * Accounts are automatically initialized if not explicitly\n *\n * Notes:\n * This is co-routine safe, that is many async tasks can be reading from this concurrently.\n * The state of an account cannot be used across multiple AccountSequenceNumber services.\n * The synchronize method will create a barrier that prevents additional nextSequenceNumber\n * calls until it is complete.\n * This only manages the distribution of sequence numbers it does not help handle transaction\n * failures.\n * If a transaction fails, you should call synchronize and wait for timeouts.\n */\n\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { Account } from \"../../core\";\nimport { getInfo } from \"../../internal/account\";\nimport { sleep } from \"../../utils/helpers\";\n\n// returns `now` time in seconds\nconst now = () => Math.floor(Date.now() / 1000);\n\nexport class AccountSequenceNumber {\n  readonly aptosConfig: AptosConfig;\n\n  readonly account: Account;\n\n  // sequence number on chain\n  lastUncommintedNumber: bigint | null = null;\n\n  // local sequence number\n  currentNumber: bigint | null = null;\n\n  /**\n   * We want to guarantee that we preserve ordering of workers to requests.\n   *\n   * `lock` is used to try to prevent multiple coroutines from accessing a shared resource at the same time,\n   * which can result in race conditions and data inconsistency.\n   * This code actually doesn't do it though, since we aren't giving out a slot, it is still somewhat a race condition.\n   *\n   * The ideal solution is likely that each thread grabs the next number from a incremental integer.\n   * When they complete, they increment that number and that entity is able to enter the `lock`.\n   * That would guarantee ordering.\n   */\n  lock = false;\n\n  maxWaitTime: number;\n\n  maximumInFlight: number;\n\n  sleepTime: number;\n\n  constructor(\n    aptosConfig: AptosConfig,\n    account: Account,\n    maxWaitTime: number,\n    maximumInFlight: number,\n    sleepTime: number,\n  ) {\n    this.aptosConfig = aptosConfig;\n    this.account = account;\n    this.maxWaitTime = maxWaitTime;\n    this.maximumInFlight = maximumInFlight;\n    this.sleepTime = sleepTime;\n  }\n\n  /**\n   * Returns the next available sequence number for this account\n   *\n   * @returns next available sequence number\n   */\n  async nextSequenceNumber(): Promise<bigint | null> {\n    /* eslint-disable no-await-in-loop */\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n    let nextNumber = BigInt(0);\n    try {\n      if (this.lastUncommintedNumber === null || this.currentNumber === null) {\n        await this.initialize();\n      }\n\n      if (this.currentNumber! - this.lastUncommintedNumber! >= this.maximumInFlight) {\n        await this.update();\n\n        const startTime = now();\n        while (this.currentNumber! - this.lastUncommintedNumber! >= this.maximumInFlight) {\n          await sleep(this.sleepTime);\n          if (now() - startTime > this.maxWaitTime) {\n            /* eslint-disable no-console */\n            console.warn(\n              `Waited over 30 seconds for a transaction to commit, resyncing ${this.account.accountAddress.toString()}`,\n            );\n            await this.initialize();\n          } else {\n            await this.update();\n          }\n        }\n      }\n      nextNumber = this.currentNumber!;\n      this.currentNumber! += BigInt(1);\n    } catch (e) {\n      console.error(\"error in getting next sequence number for this account\", e);\n    } finally {\n      this.lock = false;\n    }\n    return nextNumber;\n  }\n\n  /**\n   * Initializes this account with the sequence number on chain\n   */\n  async initialize(): Promise<void> {\n    const { sequence_number: sequenceNumber } = await getInfo({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress,\n    });\n    this.currentNumber = BigInt(sequenceNumber);\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n  }\n\n  /**\n   * Updates this account sequence number with the one on-chain\n   *\n   * @returns on-chain sequence number for this account\n   */\n  async update(): Promise<bigint> {\n    const { sequence_number: sequenceNumber } = await getInfo({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress,\n    });\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n    return this.lastUncommintedNumber;\n  }\n\n  /**\n   * Synchronizes local sequence number with the seqeunce number on chain for this account.\n   *\n   * Poll the network until all submitted transactions have either been committed or until\n   * the maximum wait time has elapsed\n   */\n  async synchronize(): Promise<void> {\n    if (this.lastUncommintedNumber === this.currentNumber) return;\n\n    /* eslint-disable no-await-in-loop */\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n\n    try {\n      await this.update();\n      const startTime = now();\n      while (this.lastUncommintedNumber !== this.currentNumber) {\n        if (now() - startTime > this.maxWaitTime) {\n          /* eslint-disable no-console */\n          console.warn(\n            `Waited over 30 seconds for a transaction to commit, resyncing ${this.account.accountAddress.toString()}`,\n          );\n          await this.initialize();\n        } else {\n          await sleep(this.sleepTime);\n          await this.update();\n        }\n      }\n    } catch (e) {\n      console.error(\"error in synchronizing this account sequence number with the one on chain\", e);\n    } finally {\n      this.lock = false;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport EventEmitter from \"eventemitter3\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { Account } from \"../../core\";\nimport { waitForTransaction } from \"../../internal/transaction\";\nimport { generateTransaction, signAndSubmitTransaction } from \"../../internal/transactionSubmission\";\nimport { PendingTransactionResponse, TransactionResponse } from \"../../types\";\nimport { InputGenerateTransactionOptions, InputGenerateTransactionPayloadData, SimpleTransaction } from \"../types\";\nimport { AccountSequenceNumber } from \"./accountSequenceNumber\";\nimport { AsyncQueue, AsyncQueueCancelledError } from \"./asyncQueue\";\n\nexport const promiseFulfilledStatus = \"fulfilled\";\n\n// Event types the worker fires during execution and\n// the dapp can listen to\nexport enum TransactionWorkerEventsEnum {\n  // fired after a transaction gets sent to the chain\n  TransactionSent = \"transactionSent\",\n  // fired if there is an error sending the transaction to the chain\n  TransactionSendFailed = \"transactionSendFailed\",\n  // fired when a single transaction has executed successfully\n  TransactionExecuted = \"transactionExecuted\",\n  // fired if a single transaction fails in execution\n  TransactionExecutionFailed = \"transactionExecutionFailed\",\n  // fired when the worker has finished its job / when the queue has been emptied\n  ExecutionFinish = \"executionFinish\",\n}\n\n// Typed interface of the worker events\nexport interface TransactionWorkerEvents {\n  transactionSent: (data: SuccessEventData) => void;\n  transactionSendFailed: (data: FailureEventData) => void;\n  transactionExecuted: (data: SuccessEventData) => void;\n  transactionExecutionFailed: (data: FailureEventData) => void;\n  executionFinish: (data: ExecutionFinishEventData) => void;\n}\n\n// Type for when the worker has finished its job\nexport type ExecutionFinishEventData = {\n  message: string;\n};\n\n// Type for a success event\nexport type SuccessEventData = {\n  message: string;\n  transactionHash: string;\n};\n\n// Type for a failure event\nexport type FailureEventData = {\n  message: string;\n  error: string;\n};\n\n/**\n * TransactionWorker provides a simple framework for receiving payloads to be processed.\n *\n * Once one `start()` the process and pushes a new transaction, the worker acquires\n * the current account's next sequence number (by using the AccountSequenceNumber class),\n * generates a signed transaction and pushes an async submission process into the `outstandingTransactions` queue.\n * At the same time, the worker processes transactions by reading the `outstandingTransactions` queue\n * and submits the next transaction to chain, it\n * 1) waits for resolution of the submission process or get pre-execution validation error\n * and 2) waits for the resolution of the execution process or get an execution error.\n * The worker fires events for any submission and/or execution success and/or failure.\n */\nexport class TransactionWorker extends EventEmitter<TransactionWorkerEvents> {\n  readonly aptosConfig: AptosConfig;\n\n  readonly account: Account;\n\n  // current account sequence number\n  readonly accountSequnceNumber: AccountSequenceNumber;\n\n  readonly taskQueue: AsyncQueue<() => Promise<void>> = new AsyncQueue<() => Promise<void>>();\n\n  // process has started\n  started: boolean;\n\n  /**\n   * transactions payloads waiting to be generated and signed\n   *\n   * TODO support entry function payload from ABI builder\n   */\n  transactionsQueue = new AsyncQueue<\n    [InputGenerateTransactionPayloadData, InputGenerateTransactionOptions | undefined]\n  >();\n\n  /**\n   * signed transactions waiting to be submitted\n   */\n  outstandingTransactions = new AsyncQueue<[Promise<PendingTransactionResponse>, bigint]>();\n\n  /**\n   * transactions that have been submitted to chain\n   */\n  sentTransactions: Array<[string, bigint, any]> = [];\n\n  /**\n   * transactions that have been committed to chain\n   */\n  executedTransactions: Array<[string, bigint, any]> = [];\n\n  /**\n   * Provides a simple framework for receiving payloads to be processed.\n   *\n   * @param aptosConfig - a config object\n   * @param sender - a sender as Account\n   * @param maxWaitTime - the max wait time to wait before resyncing the sequence number\n   * to the current on-chain state, default to 30\n   * @param maximumInFlight - submit up to `maximumInFlight` transactions per account.\n   * Mempool limits the number of transactions per account to 100, hence why we default to 100.\n   * @param sleepTime - If `maximumInFlight` are in flight, wait `sleepTime` seconds before re-evaluating, default to 10\n   */\n  constructor(\n    aptosConfig: AptosConfig,\n    account: Account,\n    maxWaitTime: number = 30,\n    maximumInFlight: number = 100,\n    sleepTime: number = 10,\n  ) {\n    super();\n    this.aptosConfig = aptosConfig;\n    this.account = account;\n    this.started = false;\n    this.accountSequnceNumber = new AccountSequenceNumber(\n      aptosConfig,\n      account,\n      maxWaitTime,\n      maximumInFlight,\n      sleepTime,\n    );\n  }\n\n  /**\n   * Gets the current account sequence number,\n   * generates the transaction with the account sequence number,\n   * adds the transaction to the outstanding transaction queue\n   * to be processed later.\n   */\n  async submitNextTransaction() {\n    try {\n      /* eslint-disable no-constant-condition */\n      while (true) {\n        const sequenceNumber = await this.accountSequnceNumber.nextSequenceNumber();\n        if (sequenceNumber === null) return;\n        const transaction = await this.generateNextTransaction(this.account, sequenceNumber);\n        if (!transaction) return;\n        const pendingTransaction = signAndSubmitTransaction({\n          aptosConfig: this.aptosConfig,\n          transaction,\n          signer: this.account,\n        });\n        await this.outstandingTransactions.enqueue([pendingTransaction, sequenceNumber]);\n      }\n    } catch (error: any) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n      throw new Error(`Submit transaction failed for ${this.account.accountAddress.toString()} with error ${error}`);\n    }\n  }\n\n  /**\n   * Reads the outstanding transaction queue and submits the transaction to chain.\n   *\n   * If the transaction has fulfilled, it pushes the transaction to the processed\n   * transactions queue and fires a transactionsFulfilled event.\n   *\n   * If the transaction has failed, it pushes the transaction to the processed\n   * transactions queue with the failure reason and fires a transactionsFailed event.\n   */\n  async processTransactions() {\n    try {\n      /* eslint-disable no-constant-condition */\n      while (true) {\n        const awaitingTransactions = [];\n        const sequenceNumbers = [];\n        let [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n\n        awaitingTransactions.push(pendingTransaction);\n        sequenceNumbers.push(sequenceNumber);\n\n        while (!this.outstandingTransactions.isEmpty()) {\n          [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n\n          awaitingTransactions.push(pendingTransaction);\n          sequenceNumbers.push(sequenceNumber);\n        }\n        // send awaiting transactions to chain\n        const sentTransactions = await Promise.allSettled(awaitingTransactions);\n        for (let i = 0; i < sentTransactions.length && i < sequenceNumbers.length; i += 1) {\n          // check sent transaction status\n          const sentTransaction = sentTransactions[i];\n          sequenceNumber = sequenceNumbers[i];\n          if (sentTransaction.status === promiseFulfilledStatus) {\n            // transaction sent to chain\n            this.sentTransactions.push([sentTransaction.value.hash, sequenceNumber, null]);\n            // check sent transaction execution\n            this.emit(TransactionWorkerEventsEnum.TransactionSent, {\n              message: `transaction hash ${sentTransaction.value.hash} has been committed to chain`,\n              transactionHash: sentTransaction.value.hash,\n            });\n            await this.checkTransaction(sentTransaction, sequenceNumber);\n          } else {\n            // send transaction failed\n            this.sentTransactions.push([sentTransaction.status, sequenceNumber, sentTransaction.reason]);\n            this.emit(TransactionWorkerEventsEnum.TransactionSendFailed, {\n              message: `failed to commit transaction ${this.sentTransactions.length} with error ${sentTransaction.reason}`,\n              error: sentTransaction.reason,\n            });\n          }\n        }\n        this.emit(TransactionWorkerEventsEnum.ExecutionFinish, {\n          message: `execute ${sentTransactions.length} transactions finished`,\n        });\n      }\n    } catch (error: any) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n      throw new Error(`Process execution failed for ${this.account.accountAddress.toString()} with error ${error}`);\n    }\n  }\n\n  /**\n   * Once transaction has been sent to chain, we check for its execution status.\n   * @param sentTransaction transactions that were sent to chain and are now waiting to be executed\n   * @param sequenceNumber the account's sequence number that was sent with the transaction\n   */\n  async checkTransaction(sentTransaction: PromiseFulfilledResult<PendingTransactionResponse>, sequenceNumber: bigint) {\n    try {\n      const waitFor: Array<Promise<TransactionResponse>> = [];\n      waitFor.push(waitForTransaction({ aptosConfig: this.aptosConfig, transactionHash: sentTransaction.value.hash }));\n      const sentTransactions = await Promise.allSettled(waitFor);\n\n      for (let i = 0; i < sentTransactions.length; i += 1) {\n        const executedTransaction = sentTransactions[i];\n        if (executedTransaction.status === promiseFulfilledStatus) {\n          // transaction executed to chain\n          this.executedTransactions.push([executedTransaction.value.hash, sequenceNumber, null]);\n          this.emit(TransactionWorkerEventsEnum.TransactionExecuted, {\n            message: `transaction hash ${executedTransaction.value.hash} has been executed on chain`,\n            transactionHash: sentTransaction.value.hash,\n          });\n        } else {\n          // transaction execution failed\n          this.executedTransactions.push([executedTransaction.status, sequenceNumber, executedTransaction.reason]);\n          this.emit(TransactionWorkerEventsEnum.TransactionExecutionFailed, {\n            message: `failed to execute transaction ${this.executedTransactions.length} with error ${executedTransaction.reason}`,\n            error: executedTransaction.reason,\n          });\n        }\n      }\n    } catch (error: any) {\n      throw new Error(`Check transaction failed for ${this.account.accountAddress.toString()} with error ${error}`);\n    }\n  }\n\n  /**\n   * Push transaction to the transactions queue\n   *\n   * @param transactionData Transaction payload\n   * @param transactionData.abi For all entry function payloads, the ABI to skip remote ABI lookups\n   * @param options.maxGasAmount Maximum gas amount for the transaction\n   * @param options.gasUnitPrice Gas unit price for the transaction\n   * @param options.expireTimestamp expiration timestamp on the transaction\n   * @param options.accountSequenceNumber the sequence number for the transaction\n   */\n  async push(\n    transactionData: InputGenerateTransactionPayloadData,\n    options?: InputGenerateTransactionOptions,\n  ): Promise<void> {\n    this.transactionsQueue.enqueue([transactionData, options]);\n  }\n\n  /**\n   * Generates a signed transaction that can be submitted to chain\n   * @param account an Aptos account\n   * @param sequenceNumber a sequence number the transaction will be generated with\n   * @returns\n   */\n  async generateNextTransaction(account: Account, sequenceNumber: bigint): Promise<SimpleTransaction | undefined> {\n    if (this.transactionsQueue.isEmpty()) return undefined;\n    const [transactionData, options] = await this.transactionsQueue.dequeue();\n    return generateTransaction({\n      aptosConfig: this.aptosConfig,\n      sender: account.accountAddress,\n      data: transactionData,\n      options: { ...options, accountSequenceNumber: sequenceNumber },\n    });\n  }\n\n  /**\n   * Starts transaction submission and transaction processing.\n   */\n  async run() {\n    try {\n      while (!this.taskQueue.isCancelled()) {\n        const task = await this.taskQueue.dequeue();\n        await task();\n      }\n    } catch (error: any) {\n      throw new Error(`Unable to start transaction batching: ${error}`);\n    }\n  }\n\n  /**\n   * Starts the transaction management process.\n   */\n  start() {\n    if (this.started) {\n      throw new Error(\"worker has already started\");\n    }\n    this.started = true;\n    this.taskQueue.enqueue(() => this.submitNextTransaction());\n    this.taskQueue.enqueue(() => this.processTransactions());\n    this.run();\n  }\n\n  /**\n   * Stops the the transaction management process.\n   */\n  stop() {\n    if (this.taskQueue.isCancelled()) {\n      throw new Error(\"worker has already stopped\");\n    }\n    this.started = false;\n    this.taskQueue.cancel();\n  }\n}\n","/**\n * The AsyncQueue class is an async-aware data structure that provides a queue-like\n * behavior for managing asynchronous tasks or operations.\n * It allows to enqueue items and dequeue them asynchronously.\n * This is not thread-safe but it is async concurrency safe and\n * it does not guarantee ordering for those that call into and await on enqueue.\n */\n\ninterface PendingDequeue<T> {\n  resolve: (value: T) => void;\n  reject: (reason?: AsyncQueueCancelledError) => void;\n}\n\nexport class AsyncQueue<T> {\n  readonly queue: T[] = [];\n\n  // The pendingDequeue is used to handle the resolution of promises when items are enqueued and dequeued.\n  private pendingDequeue: PendingDequeue<T>[] = [];\n\n  private cancelled: boolean = false;\n\n  /**\n   * The enqueue method adds an item to the queue. If there are pending dequeued promises,\n   * in the pendingDequeue, it resolves the oldest promise with the enqueued item immediately.\n   * Otherwise, it adds the item to the queue.\n   *\n   * @param item T\n   */\n  enqueue(item: T): void {\n    this.cancelled = false;\n\n    if (this.pendingDequeue.length > 0) {\n      const promise = this.pendingDequeue.shift();\n\n      promise?.resolve(item);\n\n      return;\n    }\n\n    this.queue.push(item);\n  }\n\n  /**\n   * The dequeue method returns a promise that resolves to the next item in the queue.\n   * If the queue is not empty, it resolves the promise immediately with the next item.\n   * Otherwise, it creates a new promise. The promise's resolve function is stored\n   * in the pendingDequeue with a unique counter value as the key.\n   * The newly created promise is then returned, and it will be resolved later when an item is enqueued.\n   *\n   * @returns Promise<T>\n   */\n  async dequeue(): Promise<T> {\n    if (this.queue.length > 0) {\n      return Promise.resolve(this.queue.shift()!);\n    }\n\n    return new Promise<T>((resolve, reject) => {\n      this.pendingDequeue.push({ resolve, reject });\n    });\n  }\n\n  /**\n   * The isEmpty method returns whether the queue is empty or not.\n   *\n   * @returns boolean\n   */\n  isEmpty(): boolean {\n    return this.queue.length === 0;\n  }\n\n  /**\n   * The cancel method cancels all pending promises in the queue.\n   * It rejects the promises with a AsyncQueueCancelledError error,\n   * ensuring that any awaiting code can handle the cancellation appropriately.\n   */\n  cancel(): void {\n    this.cancelled = true;\n\n    this.pendingDequeue.forEach(async ({ reject }) => {\n      reject(new AsyncQueueCancelledError(\"Task cancelled\"));\n    });\n\n    this.pendingDequeue = [];\n\n    this.queue.length = 0;\n  }\n\n  /**\n   * The isCancelled method returns whether the queue is cancelled or not.\n   *\n   * @returns boolean\n   */\n  isCancelled(): boolean {\n    return this.cancelled;\n  }\n\n  /**\n   * The pendingDequeueLength method returns the length of the pendingDequeue.\n   *\n   * @returns number\n   */\n  pendingDequeueLength(): number {\n    return this.pendingDequeue.length;\n  }\n}\n\nexport class AsyncQueueCancelledError extends Error {}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getGasPriceEstimation,\n  getTransactionByHash,\n  getTransactionByVersion,\n  getTransactions,\n  isTransactionPending,\n  waitForTransaction,\n} from \"../internal/transaction\";\nimport {\n  AnyNumber,\n  CommittedTransactionResponse,\n  GasEstimation,\n  HexInput,\n  PaginationArgs,\n  PendingTransactionResponse,\n  TransactionResponse,\n  WaitForTransactionOptions,\n} from \"../types\";\nimport {\n  getSigningMessage,\n  publicPackageTransaction,\n  rotateAuthKey,\n  signAndSubmitTransaction,\n  signTransaction,\n} from \"../internal/transactionSubmission\";\nimport {\n  AccountAuthenticator,\n  AnyRawTransaction,\n  InputGenerateTransactionOptions,\n  InputGenerateTransactionPayloadData,\n  SimpleTransaction,\n} from \"../transactions\";\nimport { AccountAddressInput, Account, PrivateKey } from \"../core\";\nimport { Build } from \"./transactionSubmission/build\";\nimport { Simulate } from \"./transactionSubmission/simulate\";\nimport { Submit } from \"./transactionSubmission/submit\";\nimport { TransactionManagement } from \"./transactionSubmission/management\";\n\nexport class Transaction {\n  readonly config: AptosConfig;\n\n  readonly build: Build;\n\n  readonly simulate: Simulate;\n\n  readonly submit: Submit;\n\n  readonly batch: TransactionManagement;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n    this.build = new Build(this.config);\n    this.simulate = new Simulate(this.config);\n    this.submit = new Submit(this.config);\n    this.batch = new TransactionManagement(this.config);\n  }\n\n  /**\n   * Queries on-chain transactions. This function will not return pending\n   * transactions. For that, use `getTransactionsByHash`.\n   *\n   * @param args.options.offset The number transaction to start with\n   * @param args.options.limit Number of results to return\n   *\n   * @returns Array of on-chain transactions\n   */\n  async getTransactions(args?: { options?: PaginationArgs }): Promise<TransactionResponse[]> {\n    return getTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries on-chain transaction by version. This function will not return pending transactions.\n   *\n   * @param args.ledgerVersion - Transaction version is an unsigned 64-bit number.\n   * @returns On-chain transaction. Only on-chain transactions have versions, so this\n   * function cannot be used to query pending transactions.\n   */\n  async getTransactionByVersion(args: { ledgerVersion: AnyNumber }): Promise<TransactionResponse> {\n    return getTransactionByVersion({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries on-chain transaction by transaction hash. This function will return pending transactions.\n   * @param args.transactionHash - Transaction hash should be hex-encoded bytes string with 0x prefix.\n   * @returns Transaction from mempool (pending) or on-chain (committed) transaction\n   */\n  async getTransactionByHash(args: { transactionHash: HexInput }): Promise<TransactionResponse> {\n    return getTransactionByHash({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Defines if specified transaction is currently in pending state\n   *\n   * To create a transaction hash:\n   *\n   * 1. Create a hash message from the bytes: \"Aptos::Transaction\" bytes + the BCS-serialized Transaction bytes.\n   * 2. Apply hash algorithm SHA3-256 to the hash message bytes.\n   * 3. Hex-encode the hash bytes with 0x prefix.\n   *\n   * @param args.transactionHash A hash of transaction\n   * @returns `true` if transaction is in pending state and `false` otherwise\n   */\n  async isPendingTransaction(args: { transactionHash: HexInput }): Promise<boolean> {\n    return isTransactionPending({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Waits for a transaction to move past the pending state.\n   *\n   * There are 4 cases.\n   * 1. Transaction is successfully processed and committed to the chain.\n   *    - The function will resolve with the transaction response from the API.\n   * 2. Transaction is rejected for some reason, and is therefore not committed to the blockchain.\n   *    - The function will throw an AptosApiError with an HTTP status code indicating some problem with the request.\n   * 3. Transaction is committed but execution failed, meaning no changes were\n   *    written to the blockchain state.\n   *    - If `checkSuccess` is true, the function will throw a FailedTransactionError\n   *      If `checkSuccess` is false, the function will resolve with the transaction response where the `success` field is false.\n   * 4. Transaction does not move past the pending state within `args.options.timeoutSecs` seconds.\n   *    - The function will throw a WaitForTransactionError\n   *\n   *\n   * @param args.transactionHash The hash of a transaction previously submitted to the blockchain.\n   * @param args.options.timeoutSecs Timeout in seconds. Defaults to 20 seconds.\n   * @param args.options.checkSuccess A boolean which controls whether the function will error if the transaction failed.\n   *   Defaults to true.  See case 3 above.\n   * @returns The transaction on-chain.  See above for more details.\n   */\n  async waitForTransaction(args: {\n    transactionHash: HexInput;\n    options?: WaitForTransactionOptions;\n  }): Promise<CommittedTransactionResponse> {\n    return waitForTransaction({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Gives an estimate of the gas unit price required to get a\n   * transaction on chain in a reasonable amount of time.\n   * For more information {@link https://api.mainnet.aptoslabs.com/v1/spec#/operations/estimate_gas_price}\n   *\n   * @returns Object holding the outputs of the estimate gas API\n   * @example\n   * ```\n   * {\n   *  gas_estimate: number;\n   *  deprioritized_gas_estimate?: number;\n   *  prioritized_gas_estimate?: number;\n   * }\n   * ```\n   */\n  async getGasPriceEstimation(): Promise<GasEstimation> {\n    return getGasPriceEstimation({\n      aptosConfig: this.config,\n    });\n  }\n\n  /**\n   * Returns a signing message for a transaction.\n   *\n   * This allows a user to sign a transaction using their own preferred signing method, and\n   * then submit it to the network.\n   * @param args.transaction A raw transaction for signing elsewhere\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getSigningMessage(args: { transaction: AnyRawTransaction }): Uint8Array {\n    return getSigningMessage(args);\n  }\n\n  /**\n   * Generates a transaction to publish a move package to chain.\n   *\n   * To get the `metadataBytes` and `byteCode`, can compile using Aptos CLI with command\n   * `aptos move compile --save-metadata ...`,\n   * For more info {@link https://aptos.dev/tutorials/your-first-dapp/#step-4-publish-a-move-module}\n   *\n   * @param args.account The publisher account\n   * @param args.metadataBytes The package metadata bytes\n   * @param args.moduleBytecode An array of the bytecode of each module in the package in compiler output order\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to chain\n   */\n  async publishPackageTransaction(args: {\n    account: AccountAddressInput;\n    metadataBytes: HexInput;\n    moduleBytecode: Array<HexInput>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return publicPackageTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Rotate an account's auth key. After rotation, only the new private key can be used to sign txns for\n   * the account.\n   * Note: Only legacy Ed25519 scheme is supported for now.\n   * More info: {@link https://aptos.dev/guides/account-management/key-rotation/}\n   * @param args.fromAccount The account to rotate the auth key for\n   * @param args.toNewPrivateKey The new private key to rotate to\n   *\n   * @returns PendingTransactionResponse\n   */\n  async rotateAuthKey(args: { fromAccount: Account; toNewPrivateKey: PrivateKey }): Promise<TransactionResponse> {\n    return rotateAuthKey({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sign a transaction that can later be submitted to chain\n   *\n   * @param args.signer The signer account\n   * @param args.transaction A raw transaction to sign on\n   *\n   * @returns AccountAuthenticator\n   */\n  // eslint-disable-next-line class-methods-use-this\n  sign(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n    return signTransaction({\n      ...args,\n    });\n  }\n\n  /**\n   * Sign a transaction as a fee payer that can later be submitted to chain\n   *\n   * @param args.signer The fee payer signer account\n   * @param args.transaction A raw transaction to sign on\n   *\n   * @returns AccountAuthenticator\n   */\n  // eslint-disable-next-line class-methods-use-this\n  signAsFeePayer(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n    const { signer, transaction } = args;\n\n    // if transaction doesnt hold a \"feePayerAddress\" prop it means\n    // this is not a fee payer transaction\n    if (!transaction.feePayerAddress) {\n      throw new Error(`Transaction ${transaction} is not a Fee Payer transaction`);\n    }\n\n    // Set the feePayerAddress to the signer account address\n    transaction.feePayerAddress = signer.accountAddress;\n\n    return signTransaction({\n      signer,\n      transaction,\n    });\n  }\n\n  // TRANSACTION SUBMISSION //\n\n  /**\n   * @deprecated Prefer to use `aptos.transaction.batch.forSingleAccount()`\n   *\n   * Batch transactions for a single account.\n   *\n   * This function uses a transaction worker that receives payloads to be processed\n   * and submitted to chain.\n   * Note that this process is best for submitting multiple transactions that\n   * dont rely on each other, i.e batch funds, batch token mints, etc.\n   *\n   * If any worker failure, the functions throws an error.\n   *\n   * @param args.sender The sender account to sign and submit the transaction\n   * @param args.data An array of transaction payloads\n   * @param args.options optional. Transaction generation configurations (excluding accountSequenceNumber)\n   *\n   * @return void. Throws if any error\n   */\n  async batchTransactionsForSingleAccount(args: {\n    sender: Account;\n    data: InputGenerateTransactionPayloadData[];\n    options?: Omit<InputGenerateTransactionOptions, \"accountSequenceNumber\">;\n  }): Promise<void> {\n    try {\n      const { sender, data, options } = args;\n      this.batch.forSingleAccount({ sender, data, options });\n    } catch (error: any) {\n      throw new Error(`failed to submit transactions with error: ${error}`);\n    }\n  }\n\n  /**\n   * Sign and submit a single signer transaction to chain\n   *\n   * @param args.signer The signer account to sign the transaction\n   * @param args.transaction An instance of a RawTransaction, plus optional secondary/fee payer addresses\n   * ```\n   * {\n   *  rawTransaction: RawTransaction,\n   *  secondarySignerAddresses? : Array<AccountAddress>,\n   *  feePayerAddress?: AccountAddress\n   * }\n   * ```\n   *\n   * @return PendingTransactionResponse\n   */\n  async signAndSubmitTransaction(args: {\n    signer: Account;\n    transaction: AnyRawTransaction;\n  }): Promise<PendingTransactionResponse> {\n    const { signer, transaction } = args;\n    return signAndSubmitTransaction({\n      aptosConfig: this.config,\n      signer,\n      transaction,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account } from \"./account\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { Coin } from \"./coin\";\nimport { DigitalAsset } from \"./digitalAsset\";\nimport { Event } from \"./event\";\nimport { Faucet } from \"./faucet\";\nimport { FungibleAsset } from \"./fungibleAsset\";\nimport { General } from \"./general\";\nimport { ANS } from \"./ans\";\nimport { Staking } from \"./staking\";\nimport { Transaction } from \"./transaction\";\n\n/**\n * This class is the main entry point into Aptos's\n * APIs and separates functionality into different namespaces.\n *\n * To use the SDK, create a new Aptos instance to get access\n * to all the sdk functionality.\n */\nexport class Aptos {\n  readonly config: AptosConfig;\n\n  readonly account: Account;\n\n  readonly ans: ANS;\n\n  readonly coin: Coin;\n\n  readonly digitalAsset: DigitalAsset;\n\n  readonly event: Event;\n\n  readonly faucet: Faucet;\n\n  readonly fungibleAsset: FungibleAsset;\n\n  readonly general: General;\n\n  readonly staking: Staking;\n\n  readonly transaction: Transaction;\n\n  constructor(settings?: AptosConfig) {\n    this.config = new AptosConfig(settings);\n    this.account = new Account(this.config);\n    this.ans = new ANS(this.config);\n    this.coin = new Coin(this.config);\n    this.digitalAsset = new DigitalAsset(this.config);\n    this.event = new Event(this.config);\n    this.faucet = new Faucet(this.config);\n    this.fungibleAsset = new FungibleAsset(this.config);\n    this.general = new General(this.config);\n    this.staking = new Staking(this.config);\n    this.transaction = new Transaction(this.config);\n  }\n}\n\n// extends Aptos interface so all the methods and properties\n// from the other classes will be recognized by typescript.\nexport interface Aptos\n  extends Account,\n    ANS,\n    Coin,\n    DigitalAsset,\n    Event,\n    Faucet,\n    FungibleAsset,\n    General,\n    Staking,\n    Omit<Transaction, \"build\" | \"simulate\" | \"submit\" | \"batch\"> {}\n\n/**\nIn TypeScript, we can’t inherit or extend from more than one class,\nMixins helps us to get around that by creating a partial classes\nthat we can combine to form a single class that contains all the methods and properties from the partial classes.\n{@link https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern}\n\nHere, we combine any subclass and the Aptos class.\n*/\nfunction applyMixin(targetClass: any, baseClass: any, baseClassProp: string) {\n  // Mixin instance methods\n  Object.getOwnPropertyNames(baseClass.prototype).forEach((propertyName) => {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, propertyName);\n    if (!propertyDescriptor) return;\n    // eslint-disable-next-line func-names\n    propertyDescriptor.value = function (...args: any) {\n      return (this as any)[baseClassProp][propertyName](...args);\n    };\n    Object.defineProperty(targetClass.prototype, propertyName, propertyDescriptor);\n  });\n}\n\napplyMixin(Aptos, Account, \"account\");\napplyMixin(Aptos, ANS, \"ans\");\napplyMixin(Aptos, Coin, \"coin\");\napplyMixin(Aptos, DigitalAsset, \"digitalAsset\");\napplyMixin(Aptos, Event, \"event\");\napplyMixin(Aptos, Faucet, \"faucet\");\napplyMixin(Aptos, FungibleAsset, \"fungibleAsset\");\napplyMixin(Aptos, General, \"general\");\napplyMixin(Aptos, Staking, \"staking\");\napplyMixin(Aptos, Transaction, \"transaction\");\n"]}