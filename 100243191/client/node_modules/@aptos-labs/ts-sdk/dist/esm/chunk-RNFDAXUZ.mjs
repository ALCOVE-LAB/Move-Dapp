import{a as h}from"./chunk-GTCDSGOA.mjs";import{a as d}from"./chunk-CUWAGKEP.mjs";import{e as m,j as p}from"./chunk-LR65XHSF.mjs";import{a as c}from"./chunk-W2XLZW4Y.mjs";import{b as a}from"./chunk-BZMO6Q6L.mjs";import{sha3_256 as g}from"@noble/hashes/sha3";import{secp256k1 as o}from"@noble/curves/secp256k1";import{HDKey as A}from"@scure/bip32";var n=class n extends h{constructor(e){super();let r=a.fromHexInput(e);if(r.toUint8Array().length!==n.LENGTH)throw new Error(`PublicKey length should be ${n.LENGTH}`);this.key=r}verifySignature(e){let{message:r,signature:i}=e;if(!(i instanceof y))return!1;let l=a.fromHexInput(r).toUint8Array(),v=g(l),H=i.toUint8Array();return o.verify(H,v,this.key.toUint8Array())}toUint8Array(){return this.key.toUint8Array()}serialize(e){e.serializeBytes(this.key.toUint8Array())}static deserialize(e){let r=e.deserializeBytes();return new n(r)}static isPublicKey(e){return e instanceof n}};n.LENGTH=65;var u=n,t=class t extends c{constructor(e){super();let r=a.fromHexInput(e);if(r.toUint8Array().length!==t.LENGTH)throw new Error(`PrivateKey length should be ${t.LENGTH}`);this.key=r}static generate(){let e=o.utils.randomPrivateKey();return new t(e)}static fromDerivationPath(e,r){if(!m(e))throw new Error(`Invalid derivation path ${e}`);return t.fromDerivationPathInner(e,p(r))}static fromDerivationPathInner(e,r){let{privateKey:i}=A.fromMasterSeed(r).derive(e);if(i===null)throw new Error("Invalid key");return new t(i)}sign(e){let r=a.fromHexInput(e),i=g(r.toUint8Array()),l=o.sign(i,this.key.toUint8Array());return new y(l.toCompactRawBytes())}publicKey(){let e=o.getPublicKey(this.key.toUint8Array(),!1);return new u(e)}toUint8Array(){return this.key.toUint8Array()}toString(){return this.key.toString()}serialize(e){e.serializeBytes(this.toUint8Array())}static deserialize(e){let r=e.deserializeBytes();return new t(r)}static isPrivateKey(e){return e instanceof t}};t.LENGTH=32;var f=t,s=class s extends d{constructor(e){super();let r=a.fromHexInput(e);if(r.toUint8Array().length!==s.LENGTH)throw new Error(`Signature length should be ${s.LENGTH}, received ${r.toUint8Array().length}`);this.data=r}toUint8Array(){return this.data.toUint8Array()}serialize(e){e.serializeBytes(this.data.toUint8Array())}static deserialize(e){let r=e.deserializeBytes();return new s(r)}};s.LENGTH=64;var y=s;export{u as a,f as b,y as c};
//# sourceMappingURL=chunk-RNFDAXUZ.mjs.map